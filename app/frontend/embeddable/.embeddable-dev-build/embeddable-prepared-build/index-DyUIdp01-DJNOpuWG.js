import { F as Fs, V as Vs, O as On, D as Ds, w as ws, b as bs, H as Hs, g as gi } from "./BubbleMapChart-DoY9i-C0.js";
import { k, S } from "./BubbleMapChart-DoY9i-C0.js";
import { r as reactExports, n as nt } from "./embeddable-entry-point-DfzYO-OW.js";
function B(l, t, e) {
  const { opacity: n, zIndex: a } = t;
  n != null && n !== e.opacity && l.setOpacity(n), a != null && a !== e.zIndex && l.setZIndex(a);
}
function c() {
  return c = Object.assign || function(l) {
    for (var t = 1; t < arguments.length; t++) {
      var e = arguments[t];
      for (var n in e)
        Object.prototype.hasOwnProperty.call(e, n) && (l[n] = e[n]);
    }
    return l;
  }, c.apply(this, arguments);
}
function G({ bounds: l, boundsOptions: t, center: e, children: n, className: a, id: m, placeholder: x, style: L, whenReady: o, zoom: r, ...O }, C) {
  const [I] = reactExports.useState({
    className: a,
    id: m,
    style: L
  }), [i, b] = reactExports.useState(null);
  reactExports.useImperativeHandle(C, () => (i == null ? void 0 : i.map) ?? null, [
    i
  ]);
  const w = reactExports.useCallback((s) => {
    if (s !== null && i === null) {
      const f = new On.Map(s, O);
      e != null && r != null ? f.setView(e, r) : l != null && f.fitBounds(l, t), o != null && f.whenReady(o), b(Ds(f));
    }
  }, []);
  reactExports.useEffect(() => () => {
    i == null || i.map.remove();
  }, [
    i
  ]);
  const M = i ? /* @__PURE__ */ nt.createElement(ws, {
    value: i
  }, n) : x ?? null;
  return /* @__PURE__ */ nt.createElement("div", c({}, I, {
    ref: w
  }), M);
}
const V = /* @__PURE__ */ reactExports.forwardRef(G), _ = Fs(function({ position: t, ...e }, n) {
  const a = new On.Marker(t, e);
  return bs(a, Hs(n, {
    overlayContainer: a
  }));
}, function(t, e, n) {
  e.position !== n.position && t.setLatLng(e.position), e.icon != null && e.icon !== n.icon && t.setIcon(e.icon), e.zIndexOffset != null && e.zIndexOffset !== n.zIndexOffset && t.setZIndexOffset(e.zIndexOffset), e.opacity != null && e.opacity !== n.opacity && t.setOpacity(e.opacity), t.dragging != null && e.draggable !== n.draggable && (e.draggable === true ? t.dragging.enable() : t.dragging.disable());
}), q = Vs(function({ url: t, ...e }, n) {
  const a = new On.TileLayer(t, gi(e, n));
  return bs(a, n);
}, function(t, e, n) {
  B(t, e, n);
  const { url: a } = e;
  a != null && a !== n.url && t.setUrl(a);
});
export {
  V as MapContainer,
  _ as Marker,
  q as TileLayer,
  k as Tooltip,
  S as useMap
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtRHlVSWRwMDEtREpOT3B1V0cuanMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jaHJpc3RvcGhlcmNhcmxzb24vZmx1aWQvZHJvcGxldC1lbWJlZGRhYmxlL2FwcC9mcm9udGVuZC9lbWJlZGRhYmxlL25vZGVfbW9kdWxlcy9AZW1iZWRkYWJsZS5jb20vdmFuaWxsYS1jb21wb25lbnRzL2Rpc3QvaW5kZXgtRHlVSWRwMDEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbCBhcyB1LCBjIGFzIFQsIEwgYXMgeiwgYSBhcyBFLCBiIGFzIHksIGUgYXMgaCwgZCBhcyBqLCB3IGFzIHYgfSBmcm9tIFwiLi9CdWJibGVNYXBDaGFydC5lbWItQjBRdXZ3bVUuanNcIjtcbmltcG9ydCB7IFQgYXMgRiwgdSBhcyBKIH0gZnJvbSBcIi4vQnViYmxlTWFwQ2hhcnQuZW1iLUIwUXV2d21VLmpzXCI7XG5pbXBvcnQgZCwgeyBmb3J3YXJkUmVmIGFzIFIsIHVzZVN0YXRlIGFzIGcsIHVzZUltcGVyYXRpdmVIYW5kbGUgYXMgUywgdXNlQ2FsbGJhY2sgYXMgWiwgdXNlRWZmZWN0IGFzIHAgfSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIEIobCwgdCwgZSkge1xuICBjb25zdCB7IG9wYWNpdHk6IG4sIHpJbmRleDogYSB9ID0gdDtcbiAgbiAhPSBudWxsICYmIG4gIT09IGUub3BhY2l0eSAmJiBsLnNldE9wYWNpdHkobiksIGEgIT0gbnVsbCAmJiBhICE9PSBlLnpJbmRleCAmJiBsLnNldFpJbmRleChhKTtcbn1cbmZ1bmN0aW9uIGMoKSB7XG4gIHJldHVybiBjID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbihsKSB7XG4gICAgZm9yICh2YXIgdCA9IDE7IHQgPCBhcmd1bWVudHMubGVuZ3RoOyB0KyspIHtcbiAgICAgIHZhciBlID0gYXJndW1lbnRzW3RdO1xuICAgICAgZm9yICh2YXIgbiBpbiBlKVxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbikgJiYgKGxbbl0gPSBlW25dKTtcbiAgICB9XG4gICAgcmV0dXJuIGw7XG4gIH0sIGMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmZ1bmN0aW9uIEcoeyBib3VuZHM6IGwsIGJvdW5kc09wdGlvbnM6IHQsIGNlbnRlcjogZSwgY2hpbGRyZW46IG4sIGNsYXNzTmFtZTogYSwgaWQ6IG0sIHBsYWNlaG9sZGVyOiB4LCBzdHlsZTogTCwgd2hlblJlYWR5OiBvLCB6b29tOiByLCAuLi5PIH0sIEMpIHtcbiAgY29uc3QgW0ldID0gZyh7XG4gICAgY2xhc3NOYW1lOiBhLFxuICAgIGlkOiBtLFxuICAgIHN0eWxlOiBMXG4gIH0pLCBbaSwgYl0gPSBnKG51bGwpO1xuICBTKEMsICgpID0+IChpID09IG51bGwgPyB2b2lkIDAgOiBpLm1hcCkgPz8gbnVsbCwgW1xuICAgIGlcbiAgXSk7XG4gIGNvbnN0IHcgPSBaKChzKSA9PiB7XG4gICAgaWYgKHMgIT09IG51bGwgJiYgaSA9PT0gbnVsbCkge1xuICAgICAgY29uc3QgZiA9IG5ldyB1Lk1hcChzLCBPKTtcbiAgICAgIGUgIT0gbnVsbCAmJiByICE9IG51bGwgPyBmLnNldFZpZXcoZSwgcikgOiBsICE9IG51bGwgJiYgZi5maXRCb3VuZHMobCwgdCksIG8gIT0gbnVsbCAmJiBmLndoZW5SZWFkeShvKSwgYihUKGYpKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcCgoKSA9PiAoKSA9PiB7XG4gICAgaSA9PSBudWxsIHx8IGkubWFwLnJlbW92ZSgpO1xuICB9LCBbXG4gICAgaVxuICBdKTtcbiAgY29uc3QgTSA9IGkgPyAvKiBAX19QVVJFX18gKi8gZC5jcmVhdGVFbGVtZW50KHosIHtcbiAgICB2YWx1ZTogaVxuICB9LCBuKSA6IHggPz8gbnVsbDtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBkLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgYyh7fSwgSSwge1xuICAgIHJlZjogd1xuICB9KSwgTSk7XG59XG5jb25zdCBWID0gLyogQF9fUFVSRV9fICovIFIoRyksIF8gPSBFKGZ1bmN0aW9uKHsgcG9zaXRpb246IHQsIC4uLmUgfSwgbikge1xuICBjb25zdCBhID0gbmV3IHUuTWFya2VyKHQsIGUpO1xuICByZXR1cm4geShhLCBoKG4sIHtcbiAgICBvdmVybGF5Q29udGFpbmVyOiBhXG4gIH0pKTtcbn0sIGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgZS5wb3NpdGlvbiAhPT0gbi5wb3NpdGlvbiAmJiB0LnNldExhdExuZyhlLnBvc2l0aW9uKSwgZS5pY29uICE9IG51bGwgJiYgZS5pY29uICE9PSBuLmljb24gJiYgdC5zZXRJY29uKGUuaWNvbiksIGUuekluZGV4T2Zmc2V0ICE9IG51bGwgJiYgZS56SW5kZXhPZmZzZXQgIT09IG4uekluZGV4T2Zmc2V0ICYmIHQuc2V0WkluZGV4T2Zmc2V0KGUuekluZGV4T2Zmc2V0KSwgZS5vcGFjaXR5ICE9IG51bGwgJiYgZS5vcGFjaXR5ICE9PSBuLm9wYWNpdHkgJiYgdC5zZXRPcGFjaXR5KGUub3BhY2l0eSksIHQuZHJhZ2dpbmcgIT0gbnVsbCAmJiBlLmRyYWdnYWJsZSAhPT0gbi5kcmFnZ2FibGUgJiYgKGUuZHJhZ2dhYmxlID09PSAhMCA/IHQuZHJhZ2dpbmcuZW5hYmxlKCkgOiB0LmRyYWdnaW5nLmRpc2FibGUoKSk7XG59KSwgcSA9IGooZnVuY3Rpb24oeyB1cmw6IHQsIC4uLmUgfSwgbikge1xuICBjb25zdCBhID0gbmV3IHUuVGlsZUxheWVyKHQsIHYoZSwgbikpO1xuICByZXR1cm4geShhLCBuKTtcbn0sIGZ1bmN0aW9uKHQsIGUsIG4pIHtcbiAgQih0LCBlLCBuKTtcbiAgY29uc3QgeyB1cmw6IGEgfSA9IGU7XG4gIGEgIT0gbnVsbCAmJiBhICE9PSBuLnVybCAmJiB0LnNldFVybChhKTtcbn0pO1xuZXhwb3J0IHtcbiAgViBhcyBNYXBDb250YWluZXIsXG4gIF8gYXMgTWFya2VyLFxuICBxIGFzIFRpbGVMYXllcixcbiAgRiBhcyBUb29sdGlwLFxuICBKIGFzIHVzZU1hcFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LUR5VUlkcDAxLmpzLm1hcFxuIl0sIm5hbWVzIjpbImciLCJTIiwiWiIsInUiLCJUIiwicCIsImQiLCJ6IiwiUiIsIkUiLCJ5IiwiaCIsImoiLCJ2Il0sIm1hcHBpbmdzIjoiOzs7QUFHQSxTQUFTLEVBQUUsR0FBRyxHQUFHLEdBQUc7QUFDbEIsUUFBTSxFQUFFLFNBQVMsR0FBRyxRQUFRLEVBQUMsSUFBSztBQUNsQyxPQUFLLFFBQVEsTUFBTSxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsR0FBRyxLQUFLLFFBQVEsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUM7QUFDL0Y7QUFDQSxTQUFTLElBQUk7QUFDWCxTQUFPLElBQUksT0FBTyxVQUFVLFNBQVMsR0FBRztBQUN0QyxhQUFTLElBQUksR0FBRyxJQUFJLFVBQVUsUUFBUSxLQUFLO0FBQ3pDLFVBQUksSUFBSSxVQUFVLENBQUM7QUFDbkIsZUFBUyxLQUFLO0FBQ1osZUFBTyxVQUFVLGVBQWUsS0FBSyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFBQSxJQUM3RDtBQUNBLFdBQU87QUFBQSxFQUNULEdBQUcsRUFBRSxNQUFNLE1BQU0sU0FBUztBQUM1QjtBQUNBLFNBQVMsRUFBRSxFQUFFLFFBQVEsR0FBRyxlQUFlLEdBQUcsUUFBUSxHQUFHLFVBQVUsR0FBRyxXQUFXLEdBQUcsSUFBSSxHQUFHLGFBQWEsR0FBRyxPQUFPLEdBQUcsV0FBVyxHQUFHLE1BQU0sR0FBRyxHQUFHLEVBQUMsR0FBSSxHQUFHO0FBQ2pKLFFBQU0sQ0FBQyxDQUFDLElBQUlBLHNCQUFFO0FBQUEsSUFDWixXQUFXO0FBQUEsSUFDWCxJQUFJO0FBQUEsSUFDSixPQUFPO0FBQUEsRUFDWCxDQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSUEsYUFBQUEsU0FBRSxJQUFJO0FBQ25CQyxtQ0FBRSxHQUFHLE9BQU8sS0FBSyxPQUFPLFNBQVMsRUFBRSxRQUFRLE1BQU07QUFBQSxJQUMvQztBQUFBLEVBQ0osQ0FBRztBQUNELFFBQU0sSUFBSUMseUJBQUUsQ0FBQyxNQUFNO0FBQ2pCLFFBQUksTUFBTSxRQUFRLE1BQU0sTUFBTTtBQUM1QixZQUFNLElBQUksSUFBSUMsR0FBRSxJQUFJLEdBQUcsQ0FBQztBQUN4QixXQUFLLFFBQVEsS0FBSyxPQUFPLEVBQUUsUUFBUSxHQUFHLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRSxVQUFVLEdBQUcsQ0FBQyxHQUFHLEtBQUssUUFBUSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUVDLEdBQUUsQ0FBQyxDQUFDO0FBQUEsSUFDaEg7QUFBQSxFQUNGLEdBQUcsQ0FBQSxDQUFFO0FBQ0xDLGVBQUFBLFVBQUUsTUFBTSxNQUFNO0FBQ1osU0FBSyxRQUFRLEVBQUUsSUFBSSxPQUFNO0FBQUEsRUFDM0IsR0FBRztBQUFBLElBQ0Q7QUFBQSxFQUNKLENBQUc7QUFDRCxRQUFNLElBQUksSUFBb0JDLG1CQUFFLGNBQWNDLElBQUc7QUFBQSxJQUMvQyxPQUFPO0FBQUEsRUFDWCxHQUFLLENBQUMsSUFBSSxLQUFLO0FBQ2IsU0FBdUJELG1CQUFFLGNBQWMsT0FBTyxFQUFFLENBQUEsR0FBSSxHQUFHO0FBQUEsSUFDckQsS0FBSztBQUFBLEVBQ1QsQ0FBRyxHQUFHLENBQUM7QUFDUDtBQUNLLE1BQUMsSUFBb0JFLDZCQUFBQSxXQUFFLENBQUMsR0FBRyxJQUFJQyxHQUFFLFNBQVMsRUFBRSxVQUFVLEdBQUcsR0FBRyxFQUFDLEdBQUksR0FBRztBQUN2RSxRQUFNLElBQUksSUFBSU4sR0FBRSxPQUFPLEdBQUcsQ0FBQztBQUMzQixTQUFPTyxHQUFFLEdBQUdDLEdBQUUsR0FBRztBQUFBLElBQ2Ysa0JBQWtCO0FBQUEsRUFDdEIsQ0FBRyxDQUFDO0FBQ0osR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHO0FBQ25CLElBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsUUFBUSxHQUFHLEVBQUUsUUFBUSxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLEVBQUUsZ0JBQWdCLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLEdBQUcsRUFBRSxXQUFXLFFBQVEsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxPQUFPLEdBQUcsRUFBRSxZQUFZLFFBQVEsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLGNBQWMsT0FBSyxFQUFFLFNBQVMsT0FBTSxJQUFLLEVBQUUsU0FBUyxRQUFPO0FBQ2haLENBQUMsR0FBRyxJQUFJQyxHQUFFLFNBQVMsRUFBRSxLQUFLLEdBQUcsR0FBRyxFQUFDLEdBQUksR0FBRztBQUN0QyxRQUFNLElBQUksSUFBSVQsR0FBRSxVQUFVLEdBQUdVLEdBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEMsU0FBT0gsR0FBRSxHQUFHLENBQUM7QUFDZixHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUc7QUFDbkIsSUFBRSxHQUFHLEdBQUcsQ0FBQztBQUNULFFBQU0sRUFBRSxLQUFLLEVBQUMsSUFBSztBQUNuQixPQUFLLFFBQVEsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7QUFDeEMsQ0FBQzsiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMF19
