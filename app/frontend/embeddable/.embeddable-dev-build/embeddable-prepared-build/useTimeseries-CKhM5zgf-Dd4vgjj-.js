import { r as reactExports } from "./embeddable-entry-point-DfzYO-OW.js";
import { i, d, f, a, N as N$1, M, D, g } from "./subYears-CyoGbgS0-DIOARaW6.js";
import { V, i as ie, Y as Y$1, R, e as ee } from "./format-TjzP8gQX-Cs7Vwno2.js";
function p(a2, s) {
  return V(a2, s * ie);
}
function m(a2, s) {
  return V(a2, s * 1e3);
}
function S(a2, s) {
  const n = s * 7;
  return i(a2, n);
}
function W(a2, s) {
  return p(a2, -s);
}
function Y(a2, s) {
  return m(a2, -s);
}
function C(a2, s) {
  return S(a2, -s);
}
const G = {
  second: m,
  minute: Y$1,
  hour: p,
  day: i,
  week: S,
  month: a,
  quarter: f,
  year: d
}, J = {
  second: Y,
  minute: R,
  hour: W,
  day: g,
  week: C,
  month: D,
  quarter: M,
  year: N$1
}, N = {
  second: 1,
  minute: 60,
  hour: 3600,
  day: 86400,
  week: 604800,
  month: 2629800,
  // Roughly 30.44 days
  quarter: 7889400,
  // Roughly 91.31 days
  year: 31557600
  // Based on a typical Gregorian year
}, j = (a2, s = "asc") => {
  const { xAxis: n, granularity: u } = a2, f2 = reactExports.useCallback(
    (e, t) => {
      const l = e[e.length - 1], r = t[(n == null ? void 0 : n.name) || ""];
      if (r == null)
        return e;
      if (!l)
        return [...e, t];
      const o = l[(n == null ? void 0 : n.name) || ""];
      if (!o)
        return [...e, t];
      const b = s === "asc" ? G[u || "day"](ee(o), 1) : J[u || "day"](ee(o), 1), d2 = ee(r).getTime(), i2 = b.getTime();
      return (s === "asc" ? d2 <= i2 : d2 >= i2) || Math.abs(i2 - d2) < N[u || "day"] * 1e3 ? [...e, t] : (e.push({
        [(n == null ? void 0 : n.name) || ""]: b.toISOString().split("Z")[0]
        // Format to ISO string without timezone
      }), f2(e, t));
    },
    [n, u, s]
    // Dependencies for useCallback
  );
  return { fillGaps: f2 };
};
export {
  S,
  j,
  m,
  p
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlVGltZXNlcmllcy1DS2hNNXpnZi1EZDR2Z2pqLS5qcyIsInNvdXJjZXMiOlsiL1VzZXJzL2NocmlzdG9waGVyY2FybHNvbi9mbHVpZC9kcm9wbGV0LWVtYmVkZGFibGUvYXBwL2Zyb250ZW5kL2VtYmVkZGFibGUvbm9kZV9tb2R1bGVzL0BlbWJlZGRhYmxlLmNvbS92YW5pbGxhLWNvbXBvbmVudHMvZGlzdC91c2VUaW1lc2VyaWVzLUNLaE01emdmLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrIGFzIGcgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGEgYXMgeSwgYiBhcyBrLCBjIGFzIE0sIGQgYXMgcSwgcyBhcyBELCBlIGFzIFQsIGYgYXMgdiwgZyBhcyB3IH0gZnJvbSBcIi4vc3ViWWVhcnMtQ3lvR2JnUzAuanNcIjtcbmltcG9ydCB7IGUgYXMgaCwgbSBhcyBILCBnIGFzIEksIGggYXMgYywgaSBhcyBRIH0gZnJvbSBcIi4vZm9ybWF0LVRqelA4Z1FYLmpzXCI7XG5mdW5jdGlvbiBwKGEsIHMpIHtcbiAgcmV0dXJuIGgoYSwgcyAqIEgpO1xufVxuZnVuY3Rpb24gbShhLCBzKSB7XG4gIHJldHVybiBoKGEsIHMgKiAxZTMpO1xufVxuZnVuY3Rpb24gUyhhLCBzKSB7XG4gIGNvbnN0IG4gPSBzICogNztcbiAgcmV0dXJuIHkoYSwgbik7XG59XG5mdW5jdGlvbiBXKGEsIHMpIHtcbiAgcmV0dXJuIHAoYSwgLXMpO1xufVxuZnVuY3Rpb24gWShhLCBzKSB7XG4gIHJldHVybiBtKGEsIC1zKTtcbn1cbmZ1bmN0aW9uIEMoYSwgcykge1xuICByZXR1cm4gUyhhLCAtcyk7XG59XG5jb25zdCBHID0ge1xuICBzZWNvbmQ6IG0sXG4gIG1pbnV0ZTogSSxcbiAgaG91cjogcCxcbiAgZGF5OiB5LFxuICB3ZWVrOiBTLFxuICBtb250aDogcSxcbiAgcXVhcnRlcjogTSxcbiAgeWVhcjoga1xufSwgSiA9IHtcbiAgc2Vjb25kOiBZLFxuICBtaW51dGU6IFEsXG4gIGhvdXI6IFcsXG4gIGRheTogdyxcbiAgd2VlazogQyxcbiAgbW9udGg6IHYsXG4gIHF1YXJ0ZXI6IFQsXG4gIHllYXI6IERcbn0sIE4gPSB7XG4gIHNlY29uZDogMSxcbiAgbWludXRlOiA2MCxcbiAgaG91cjogMzYwMCxcbiAgZGF5OiA4NjQwMCxcbiAgd2VlazogNjA0ODAwLFxuICBtb250aDogMjYyOTgwMCxcbiAgLy8gUm91Z2hseSAzMC40NCBkYXlzXG4gIHF1YXJ0ZXI6IDc4ODk0MDAsXG4gIC8vIFJvdWdobHkgOTEuMzEgZGF5c1xuICB5ZWFyOiAzMTU1NzYwMFxuICAvLyBCYXNlZCBvbiBhIHR5cGljYWwgR3JlZ29yaWFuIHllYXJcbn0sIGogPSAoYSwgcyA9IFwiYXNjXCIpID0+IHtcbiAgY29uc3QgeyB4QXhpczogbiwgZ3JhbnVsYXJpdHk6IHUgfSA9IGEsIGYgPSBnKFxuICAgIChlLCB0KSA9PiB7XG4gICAgICBjb25zdCBsID0gZVtlLmxlbmd0aCAtIDFdLCByID0gdFsobiA9PSBudWxsID8gdm9pZCAwIDogbi5uYW1lKSB8fCBcIlwiXTtcbiAgICAgIGlmIChyID09IG51bGwpXG4gICAgICAgIHJldHVybiBlO1xuICAgICAgaWYgKCFsKVxuICAgICAgICByZXR1cm4gWy4uLmUsIHRdO1xuICAgICAgY29uc3QgbyA9IGxbKG4gPT0gbnVsbCA/IHZvaWQgMCA6IG4ubmFtZSkgfHwgXCJcIl07XG4gICAgICBpZiAoIW8pXG4gICAgICAgIHJldHVybiBbLi4uZSwgdF07XG4gICAgICBjb25zdCBiID0gcyA9PT0gXCJhc2NcIiA/IEdbdSB8fCBcImRheVwiXShjKG8pLCAxKSA6IEpbdSB8fCBcImRheVwiXShjKG8pLCAxKSwgZCA9IGMocikuZ2V0VGltZSgpLCBpID0gYi5nZXRUaW1lKCk7XG4gICAgICByZXR1cm4gKHMgPT09IFwiYXNjXCIgPyBkIDw9IGkgOiBkID49IGkpIHx8IE1hdGguYWJzKGkgLSBkKSA8IE5bdSB8fCBcImRheVwiXSAqIDFlMyA/IFsuLi5lLCB0XSA6IChlLnB1c2goe1xuICAgICAgICBbKG4gPT0gbnVsbCA/IHZvaWQgMCA6IG4ubmFtZSkgfHwgXCJcIl06IGIudG9JU09TdHJpbmcoKS5zcGxpdChcIlpcIilbMF1cbiAgICAgICAgLy8gRm9ybWF0IHRvIElTTyBzdHJpbmcgd2l0aG91dCB0aW1lem9uZVxuICAgICAgfSksIGYoZSwgdCkpO1xuICAgIH0sXG4gICAgW24sIHUsIHNdXG4gICAgLy8gRGVwZW5kZW5jaWVzIGZvciB1c2VDYWxsYmFja1xuICApO1xuICByZXR1cm4geyBmaWxsR2FwczogZiB9O1xufTtcbmV4cG9ydCB7XG4gIFMgYXMgYSxcbiAgcCBhcyBiLFxuICBtIGFzIGMsXG4gIGogYXMgdVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVRpbWVzZXJpZXMtQ0toTTV6Z2YuanMubWFwXG4iXSwibmFtZXMiOlsiYSIsImgiLCJIIiwieSIsIkkiLCJxIiwiTSIsImsiLCJRIiwidyIsInYiLCJUIiwiRCIsImYiLCJnIiwiYyIsImQiLCJpIl0sIm1hcHBpbmdzIjoiOzs7QUFHQSxTQUFTLEVBQUVBLElBQUcsR0FBRztBQUNmLFNBQU9DLEVBQUVELElBQUcsSUFBSUUsRUFBQztBQUNuQjtBQUNBLFNBQVMsRUFBRUYsSUFBRyxHQUFHO0FBQ2YsU0FBT0MsRUFBRUQsSUFBRyxJQUFJLEdBQUc7QUFDckI7QUFDQSxTQUFTLEVBQUVBLElBQUcsR0FBRztBQUNmLFFBQU0sSUFBSSxJQUFJO0FBQ2QsU0FBT0csRUFBRUgsSUFBRyxDQUFDO0FBQ2Y7QUFDQSxTQUFTLEVBQUVBLElBQUcsR0FBRztBQUNmLFNBQU8sRUFBRUEsSUFBRyxDQUFDLENBQUM7QUFDaEI7QUFDQSxTQUFTLEVBQUVBLElBQUcsR0FBRztBQUNmLFNBQU8sRUFBRUEsSUFBRyxDQUFDLENBQUM7QUFDaEI7QUFDQSxTQUFTLEVBQUVBLElBQUcsR0FBRztBQUNmLFNBQU8sRUFBRUEsSUFBRyxDQUFDLENBQUM7QUFDaEI7QUFDSyxNQUFDLElBQUk7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLFFBQVFJO0FBQUFBLEVBQ1IsTUFBTTtBQUFBLEVBQ04sS0FBS0Q7QUFBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixPQUFPRTtBQUFBQSxFQUNQLFNBQVNDO0FBQUFBLEVBQ1QsTUFBTUM7QUFDUixHQUFHLElBQUk7QUFBQSxFQUNMLFFBQVE7QUFBQSxFQUNSLFFBQVFDO0FBQUFBLEVBQ1IsTUFBTTtBQUFBLEVBQ04sS0FBS0M7QUFBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixPQUFPQztBQUFBQSxFQUNQLFNBQVNDO0FBQUFBLEVBQ1QsTUFBTUM7QUFDUixHQUFHLElBQUk7QUFBQSxFQUNMLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLE1BQU07QUFBQSxFQUNOLEtBQUs7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQTtBQUFBLEVBRVAsU0FBUztBQUFBO0FBQUEsRUFFVCxNQUFNO0FBQUE7QUFFUixHQUFHLElBQUksQ0FBQ1osSUFBRyxJQUFJLFVBQVU7QUFDdkIsUUFBTSxFQUFFLE9BQU8sR0FBRyxhQUFhLE1BQU1BLElBQUdhLEtBQUlDLGFBQUFBO0FBQUFBLElBQzFDLENBQUMsR0FBRyxNQUFNO0FBQ1IsWUFBTSxJQUFJLEVBQUUsRUFBRSxTQUFTLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSyxPQUFPLFNBQVMsRUFBRSxTQUFTLEVBQUU7QUFDcEUsVUFBSSxLQUFLO0FBQ1AsZUFBTztBQUNULFVBQUksQ0FBQztBQUNILGVBQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNqQixZQUFNLElBQUksR0FBRyxLQUFLLE9BQU8sU0FBUyxFQUFFLFNBQVMsRUFBRTtBQUMvQyxVQUFJLENBQUM7QUFDSCxlQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDakIsWUFBTSxJQUFJLE1BQU0sUUFBUSxFQUFFLEtBQUssS0FBSyxFQUFFQyxHQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLEtBQUssRUFBRUEsR0FBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHQyxLQUFJRCxHQUFFLENBQUMsRUFBRSxRQUFPLEdBQUlFLEtBQUksRUFBRSxRQUFPO0FBQzFHLGNBQVEsTUFBTSxRQUFRRCxNQUFLQyxLQUFJRCxNQUFLQyxPQUFNLEtBQUssSUFBSUEsS0FBSUQsRUFBQyxJQUFJLEVBQUUsS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLO0FBQUEsUUFDcEcsRUFBRSxLQUFLLE9BQU8sU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsWUFBVyxFQUFHLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFBQTtBQUFBLE1BRTNFLENBQU8sR0FBR0gsR0FBRSxHQUFHLENBQUM7QUFBQSxJQUNaO0FBQUEsSUFDQSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQUE7QUFBQSxFQUVaO0FBQ0UsU0FBTyxFQUFFLFVBQVVBLEdBQUM7QUFDdEI7IiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzBdfQ==
