import { c as ce } from "./format-TjzP8gQX-Cs7Vwno2.js";
function q(b, k, S) {
  var v, T, C;
  const {
    displayAsPercentage: E,
    granularity: h,
    maxSegments: p,
    metric: d,
    results: r,
    segment: o,
    showTotals: O,
    theme: l,
    totals: y,
    useCustomDateFormat: w,
    xAxis: a
  } = b, g = [...new Set((v = r == null ? void 0 : r.data) == null ? void 0 : v.map((t) => t[(a == null ? void 0 : a.name) || ""]))], i = V(), m = {}, I = (S == null ? void 0 : S.chartType) === "stackedAreaChart" ? 0 : null;
  g.forEach((t) => {
    const n = {};
    i.forEach((c) => n[c] = I), m[t] = n;
  }), (T = r == null ? void 0 : r.data) == null || T.forEach((t) => {
    const n = t[(o == null ? void 0 : o.name) || ""], c = t[(a == null ? void 0 : a.name) || ""], s = t[(d == null ? void 0 : d.name) || ""];
    i.includes(n) ? m[c][n] = parseFloat(s) : m[c].Other = (m[c].Other || 0) + parseFloat(s);
  });
  let F;
  return w && h ? F = l.dateFormats[h] : a.nativeType === "time" && (h && l.dateFormats[h] ? F = l.dateFormats[h] : (C = a == null ? void 0 : a.inputs) != null && C.granularity && l.dateFormats[a.inputs.granularity] && (F = l.dateFormats[a.inputs.granularity])), {
    labels: g.map((t) => ce(t, { meta: a == null ? void 0 : a.meta, dateFormat: F })),
    datasets: i.map((t, n) => ({
      ...k,
      backgroundColor: l.charts.colors[n % l.charts.colors.length],
      borderColor: l.charts.colors[n % l.charts.colors.length],
      label: t,
      // this is actually segment name, not label, but chart.js wants "label" here
      data: g.map((s) => {
        const u = m[s][t];
        return O && y && u !== null && (y[s].lastSegment = n), E && u !== null ? parseFloat(
          `${u * 100 / i.reduce((f, e) => m[s][e] === null ? f : m[s][e] + f, 0)}`
        ) : u;
      }),
      xAxisNames: g,
      totals: y
    }))
  };
  function V() {
    var u, f;
    const t = [
      ...new Set((u = r == null ? void 0 : r.data) == null ? void 0 : u.map((e) => e[(o == null ? void 0 : o.name) || ""] || "No value"))
    ];
    if (!p || t.length <= p || p < 1)
      return t;
    const n = {};
    (f = r == null ? void 0 : r.data) == null || f.forEach(
      (e) => n[e[(o == null ? void 0 : o.name) || ""]] = (n[e[(o == null ? void 0 : o.name) || ""]] || 0) + parseInt(e[(d == null ? void 0 : d.name) || ""])
    );
    const s = Object.keys(n).map((e) => ({
      name: e,
      value: n[e]
    })).sort((e, D) => D.value - e.value).slice(0, p).map((e) => e.name);
    return s.push("Other"), s;
  }
}
export {
  q
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0U3RhY2tlZENoYXJ0RGF0YS1EbVduSUpYUC1KaV9oZV9USC5qcyIsInNvdXJjZXMiOlsiL1VzZXJzL2NocmlzdG9waGVyY2FybHNvbi9mbHVpZC9kcm9wbGV0LWVtYmVkZGFibGUvYXBwL2Zyb250ZW5kL2VtYmVkZGFibGUvbm9kZV9tb2R1bGVzL0BlbWJlZGRhYmxlLmNvbS92YW5pbGxhLWNvbXBvbmVudHMvZGlzdC9nZXRTdGFja2VkQ2hhcnREYXRhLURtV25JSlhQLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGYgYXMgTiB9IGZyb20gXCIuL2Zvcm1hdC1UanpQOGdRWC5qc1wiO1xuZnVuY3Rpb24gcShiLCBrLCBTKSB7XG4gIHZhciB2LCBULCBDO1xuICBjb25zdCB7XG4gICAgZGlzcGxheUFzUGVyY2VudGFnZTogRSxcbiAgICBncmFudWxhcml0eTogaCxcbiAgICBtYXhTZWdtZW50czogcCxcbiAgICBtZXRyaWM6IGQsXG4gICAgcmVzdWx0czogcixcbiAgICBzZWdtZW50OiBvLFxuICAgIHNob3dUb3RhbHM6IE8sXG4gICAgdGhlbWU6IGwsXG4gICAgdG90YWxzOiB5LFxuICAgIHVzZUN1c3RvbURhdGVGb3JtYXQ6IHcsXG4gICAgeEF4aXM6IGFcbiAgfSA9IGIsIGcgPSBbLi4ubmV3IFNldCgodiA9IHIgPT0gbnVsbCA/IHZvaWQgMCA6IHIuZGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IHYubWFwKCh0KSA9PiB0WyhhID09IG51bGwgPyB2b2lkIDAgOiBhLm5hbWUpIHx8IFwiXCJdKSldLCBpID0gVigpLCBtID0ge30sIEkgPSAoUyA9PSBudWxsID8gdm9pZCAwIDogUy5jaGFydFR5cGUpID09PSBcInN0YWNrZWRBcmVhQ2hhcnRcIiA/IDAgOiBudWxsO1xuICBnLmZvckVhY2goKHQpID0+IHtcbiAgICBjb25zdCBuID0ge307XG4gICAgaS5mb3JFYWNoKChjKSA9PiBuW2NdID0gSSksIG1bdF0gPSBuO1xuICB9KSwgKFQgPSByID09IG51bGwgPyB2b2lkIDAgOiByLmRhdGEpID09IG51bGwgfHwgVC5mb3JFYWNoKCh0KSA9PiB7XG4gICAgY29uc3QgbiA9IHRbKG8gPT0gbnVsbCA/IHZvaWQgMCA6IG8ubmFtZSkgfHwgXCJcIl0sIGMgPSB0WyhhID09IG51bGwgPyB2b2lkIDAgOiBhLm5hbWUpIHx8IFwiXCJdLCBzID0gdFsoZCA9PSBudWxsID8gdm9pZCAwIDogZC5uYW1lKSB8fCBcIlwiXTtcbiAgICBpLmluY2x1ZGVzKG4pID8gbVtjXVtuXSA9IHBhcnNlRmxvYXQocykgOiBtW2NdLk90aGVyID0gKG1bY10uT3RoZXIgfHwgMCkgKyBwYXJzZUZsb2F0KHMpO1xuICB9KTtcbiAgbGV0IEY7XG4gIHJldHVybiB3ICYmIGggPyBGID0gbC5kYXRlRm9ybWF0c1toXSA6IGEubmF0aXZlVHlwZSA9PT0gXCJ0aW1lXCIgJiYgKGggJiYgbC5kYXRlRm9ybWF0c1toXSA/IEYgPSBsLmRhdGVGb3JtYXRzW2hdIDogKEMgPSBhID09IG51bGwgPyB2b2lkIDAgOiBhLmlucHV0cykgIT0gbnVsbCAmJiBDLmdyYW51bGFyaXR5ICYmIGwuZGF0ZUZvcm1hdHNbYS5pbnB1dHMuZ3JhbnVsYXJpdHldICYmIChGID0gbC5kYXRlRm9ybWF0c1thLmlucHV0cy5ncmFudWxhcml0eV0pKSwge1xuICAgIGxhYmVsczogZy5tYXAoKHQpID0+IE4odCwgeyBtZXRhOiBhID09IG51bGwgPyB2b2lkIDAgOiBhLm1ldGEsIGRhdGVGb3JtYXQ6IEYgfSkpLFxuICAgIGRhdGFzZXRzOiBpLm1hcCgodCwgbikgPT4gKHtcbiAgICAgIC4uLmssXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGwuY2hhcnRzLmNvbG9yc1tuICUgbC5jaGFydHMuY29sb3JzLmxlbmd0aF0sXG4gICAgICBib3JkZXJDb2xvcjogbC5jaGFydHMuY29sb3JzW24gJSBsLmNoYXJ0cy5jb2xvcnMubGVuZ3RoXSxcbiAgICAgIGxhYmVsOiB0LFxuICAgICAgLy8gdGhpcyBpcyBhY3R1YWxseSBzZWdtZW50IG5hbWUsIG5vdCBsYWJlbCwgYnV0IGNoYXJ0LmpzIHdhbnRzIFwibGFiZWxcIiBoZXJlXG4gICAgICBkYXRhOiBnLm1hcCgocykgPT4ge1xuICAgICAgICBjb25zdCB1ID0gbVtzXVt0XTtcbiAgICAgICAgcmV0dXJuIE8gJiYgeSAmJiB1ICE9PSBudWxsICYmICh5W3NdLmxhc3RTZWdtZW50ID0gbiksIEUgJiYgdSAhPT0gbnVsbCA/IHBhcnNlRmxvYXQoXG4gICAgICAgICAgYCR7dSAqIDEwMCAvIGkucmVkdWNlKChmLCBlKSA9PiBtW3NdW2VdID09PSBudWxsID8gZiA6IG1bc11bZV0gKyBmLCAwKX1gXG4gICAgICAgICkgOiB1O1xuICAgICAgfSksXG4gICAgICB4QXhpc05hbWVzOiBnLFxuICAgICAgdG90YWxzOiB5XG4gICAgfSkpXG4gIH07XG4gIGZ1bmN0aW9uIFYoKSB7XG4gICAgdmFyIHUsIGY7XG4gICAgY29uc3QgdCA9IFtcbiAgICAgIC4uLm5ldyBTZXQoKHUgPSByID09IG51bGwgPyB2b2lkIDAgOiByLmRhdGEpID09IG51bGwgPyB2b2lkIDAgOiB1Lm1hcCgoZSkgPT4gZVsobyA9PSBudWxsID8gdm9pZCAwIDogby5uYW1lKSB8fCBcIlwiXSB8fCBcIk5vIHZhbHVlXCIpKVxuICAgIF07XG4gICAgaWYgKCFwIHx8IHQubGVuZ3RoIDw9IHAgfHwgcCA8IDEpXG4gICAgICByZXR1cm4gdDtcbiAgICBjb25zdCBuID0ge307XG4gICAgKGYgPSByID09IG51bGwgPyB2b2lkIDAgOiByLmRhdGEpID09IG51bGwgfHwgZi5mb3JFYWNoKFxuICAgICAgKGUpID0+IG5bZVsobyA9PSBudWxsID8gdm9pZCAwIDogby5uYW1lKSB8fCBcIlwiXV0gPSAobltlWyhvID09IG51bGwgPyB2b2lkIDAgOiBvLm5hbWUpIHx8IFwiXCJdXSB8fCAwKSArIHBhcnNlSW50KGVbKGQgPT0gbnVsbCA/IHZvaWQgMCA6IGQubmFtZSkgfHwgXCJcIl0pXG4gICAgKTtcbiAgICBjb25zdCBzID0gT2JqZWN0LmtleXMobikubWFwKChlKSA9PiAoe1xuICAgICAgbmFtZTogZSxcbiAgICAgIHZhbHVlOiBuW2VdXG4gICAgfSkpLnNvcnQoKGUsIEQpID0+IEQudmFsdWUgLSBlLnZhbHVlKS5zbGljZSgwLCBwKS5tYXAoKGUpID0+IGUubmFtZSk7XG4gICAgcmV0dXJuIHMucHVzaChcIk90aGVyXCIpLCBzO1xuICB9XG59XG5leHBvcnQge1xuICBxIGFzIGdcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRTdGFja2VkQ2hhcnREYXRhLURtV25JSlhQLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk4iXSwibWFwcGluZ3MiOiI7QUFDQSxTQUFTLEVBQUUsR0FBRyxHQUFHLEdBQUc7QUFDbEIsTUFBSSxHQUFHLEdBQUc7QUFDVixRQUFNO0FBQUEsSUFDSixxQkFBcUI7QUFBQSxJQUNyQixhQUFhO0FBQUEsSUFDYixhQUFhO0FBQUEsSUFDYixRQUFRO0FBQUEsSUFDUixTQUFTO0FBQUEsSUFDVCxTQUFTO0FBQUEsSUFDVCxZQUFZO0FBQUEsSUFDWixPQUFPO0FBQUEsSUFDUCxRQUFRO0FBQUEsSUFDUixxQkFBcUI7QUFBQSxJQUNyQixPQUFPO0FBQUEsRUFDWCxJQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLElBQUksS0FBSyxPQUFPLFNBQVMsRUFBRSxTQUFTLE9BQU8sU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxPQUFPLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUMsR0FBSSxJQUFJLENBQUEsR0FBSSxLQUFLLEtBQUssT0FBTyxTQUFTLEVBQUUsZUFBZSxxQkFBcUIsSUFBSTtBQUN6TixJQUFFLFFBQVEsQ0FBQyxNQUFNO0FBQ2YsVUFBTSxJQUFJLENBQUE7QUFDVixNQUFFLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSTtBQUFBLEVBQ3JDLENBQUMsSUFBSSxJQUFJLEtBQUssT0FBTyxTQUFTLEVBQUUsU0FBUyxRQUFRLEVBQUUsUUFBUSxDQUFDLE1BQU07QUFDaEUsVUFBTSxJQUFJLEdBQUcsS0FBSyxPQUFPLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLEdBQUcsS0FBSyxPQUFPLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLEdBQUcsS0FBSyxPQUFPLFNBQVMsRUFBRSxTQUFTLEVBQUU7QUFDdkksTUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxTQUFTLEtBQUssV0FBVyxDQUFDO0FBQUEsRUFDekYsQ0FBQztBQUNELE1BQUk7QUFDSixTQUFPLEtBQUssSUFBSSxJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUksRUFBRSxlQUFlLFdBQVcsS0FBSyxFQUFFLFlBQVksQ0FBQyxJQUFJLElBQUksRUFBRSxZQUFZLENBQUMsS0FBSyxJQUFJLEtBQUssT0FBTyxTQUFTLEVBQUUsV0FBVyxRQUFRLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxPQUFPLFdBQVcsTUFBTSxJQUFJLEVBQUUsWUFBWSxFQUFFLE9BQU8sV0FBVyxLQUFLO0FBQUEsSUFDblEsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNQSxHQUFFLEdBQUcsRUFBRSxNQUFNLEtBQUssT0FBTyxTQUFTLEVBQUUsTUFBTSxZQUFZLEVBQUMsQ0FBRSxDQUFDO0FBQUEsSUFDL0UsVUFBVSxFQUFFLElBQUksQ0FBQyxHQUFHLE9BQU87QUFBQSxNQUN6QixHQUFHO0FBQUEsTUFDSCxpQkFBaUIsRUFBRSxPQUFPLE9BQU8sSUFBSSxFQUFFLE9BQU8sT0FBTyxNQUFNO0FBQUEsTUFDM0QsYUFBYSxFQUFFLE9BQU8sT0FBTyxJQUFJLEVBQUUsT0FBTyxPQUFPLE1BQU07QUFBQSxNQUN2RCxPQUFPO0FBQUE7QUFBQSxNQUVQLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtBQUNqQixjQUFNLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNoQixlQUFPLEtBQUssS0FBSyxNQUFNLFNBQVMsRUFBRSxDQUFDLEVBQUUsY0FBYyxJQUFJLEtBQUssTUFBTSxPQUFPO0FBQUEsVUFDdkUsR0FBRyxJQUFJLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxPQUFPLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQUEsUUFDaEYsSUFBWTtBQUFBLE1BQ04sQ0FBQztBQUFBLE1BQ0QsWUFBWTtBQUFBLE1BQ1osUUFBUTtBQUFBLElBQ2QsRUFBTTtBQUFBLEVBQ047QUFDRSxXQUFTLElBQUk7QUFDWCxRQUFJLEdBQUc7QUFDUCxVQUFNLElBQUk7QUFBQSxNQUNSLEdBQUcsSUFBSSxLQUFLLElBQUksS0FBSyxPQUFPLFNBQVMsRUFBRSxTQUFTLE9BQU8sU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxPQUFPLFNBQVMsRUFBRSxTQUFTLEVBQUUsS0FBSyxVQUFVLENBQUM7QUFBQSxJQUN4STtBQUNJLFFBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxLQUFLLElBQUk7QUFDN0IsYUFBTztBQUNULFVBQU0sSUFBSSxDQUFBO0FBQ1YsS0FBQyxJQUFJLEtBQUssT0FBTyxTQUFTLEVBQUUsU0FBUyxRQUFRLEVBQUU7QUFBQSxNQUM3QyxDQUFDLE1BQU0sRUFBRSxHQUFHLEtBQUssT0FBTyxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsS0FBSyxPQUFPLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxHQUFHLEtBQUssT0FBTyxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUM7QUFBQSxJQUMzSjtBQUNJLFVBQU0sSUFBSSxPQUFPLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPO0FBQUEsTUFDbkMsTUFBTTtBQUFBLE1BQ04sT0FBTyxFQUFFLENBQUM7QUFBQSxJQUNoQixFQUFNLEVBQUUsS0FBSyxDQUFDLEdBQUcsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUk7QUFDbkUsV0FBTyxFQUFFLEtBQUssT0FBTyxHQUFHO0FBQUEsRUFDMUI7QUFDRjsiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMF19
