import { e as ee } from "./Spinner-BeNoTciJ-DsMN3-m0.js";
import { d as defineComponent } from "./index.esm-CVE60fla.js";
import { j } from "./jsx-runtime-CjQXaSqQ-CjMA1-fF.js";
import { R } from "./MultiSelector-B-FnhZ4g-DZ3NmSFU.js";
import { s, n } from "./Selector.utils-cEIYEuKn-DO9PZ0p4.js";
const d = (e) => {
  const a = (t) => {
    const n2 = e.options.filter((o) => t.includes(o.name));
    e.onChange(n2);
  };
  return /* @__PURE__ */ j.jsx(
    R,
    {
      title: e.title,
      options: n(e.options),
      defaultValue: s(e.defaultValue, e.options),
      unclearable: !e.allowNoValue,
      onChange: a
    }
  );
}, c = {
  name: "MultiSelectorDimensionOrMeasure",
  label: "Dimensions and measures multi-select",
  defaultWidth: 300,
  defaultHeight: 80,
  classNames: ["on-top"],
  category: "Controls: measures and dimensions",
  inputs: [
    {
      name: "ds",
      type: "dataset",
      label: "Dataset",
      description: "Dataset",
      category: "Dropdown values"
    },
    {
      name: "options",
      array: true,
      type: "dimensionOrMeasure",
      label: "Choices",
      config: {
        dataset: "ds"
      },
      category: "Dropdown values",
      inputs: [
        {
          name: "overrideName",
          type: "string",
          label: "Override name",
          description: "Overrides the default name shown"
        }
      ]
    },
    {
      name: "defaultValue",
      type: "dimensionOrMeasure",
      array: true,
      label: "Default value",
      category: "Pre-configured variables",
      config: {
        dataset: "ds"
      }
    },
    {
      name: "title",
      type: "string",
      label: "Title",
      category: "Settings"
    },
    {
      name: "allowNoValue",
      type: "boolean",
      label: "Allow no value",
      category: "Settings",
      defaultValue: false
    }
  ],
  events: [
    {
      name: "onChange",
      label: "Change",
      properties: [
        {
          name: "value",
          type: "dimensionOrMeasure",
          array: true
        }
      ]
    }
  ],
  variables: [
    {
      name: "Dimension or measure multi choice",
      type: "dimensionOrMeasure",
      array: true,
      inputs: ["defaultValue"],
      events: [{ name: "onChange", property: "value" }]
    }
  ]
}, b = defineComponent(d, c, {
  props: (e, [a]) => e.ds ? {
    ...e,
    options: e.options || []
  } : {
    ...e,
    options: []
  },
  events: {
    onChange: (e) => ({
      value: e || ee.noFilter()
    })
  }
});
export {
  b as default,
  c as meta
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXVsdGlTZWxlY3RvckRpbWVuc2lvbk9yTWVhc3VyZS1CaS1SVDAxUC5qcyIsInNvdXJjZXMiOlsiL1VzZXJzL2NocmlzdG9waGVyY2FybHNvbi9mbHVpZC9kcm9wbGV0LWVtYmVkZGFibGUvYXBwL2Zyb250ZW5kL2VtYmVkZGFibGUvbm9kZV9tb2R1bGVzL0BlbWJlZGRhYmxlLmNvbS92YW5pbGxhLWNvbXBvbmVudHMvZGlzdC9NdWx0aVNlbGVjdG9yRGltZW5zaW9uT3JNZWFzdXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFYgYXMgbCB9IGZyb20gXCIuL2luZGV4LmVzbS1KQWhfSzFWRy5qc1wiO1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IGFzIHIgfSBmcm9tIFwiQGVtYmVkZGFibGUuY29tL3JlYWN0XCI7XG5pbXBvcnQgeyBqIGFzIHMgfSBmcm9tIFwiLi9qc3gtcnVudGltZS1DalFYYVNxUS5qc1wiO1xuaW1wb3J0IHsgTSBhcyBpIH0gZnJvbSBcIi4vTXVsdGlTZWxlY3Rvci1CLUZuaFo0Zy5qc1wiO1xuaW1wb3J0IHsgZyBhcyB1LCBhIGFzIG0gfSBmcm9tIFwiLi9TZWxlY3Rvci51dGlscy1jRUlZRXVLbi5qc1wiO1xuY29uc3QgZCA9IChlKSA9PiB7XG4gIGNvbnN0IGEgPSAodCkgPT4ge1xuICAgIGNvbnN0IG4gPSBlLm9wdGlvbnMuZmlsdGVyKChvKSA9PiB0LmluY2x1ZGVzKG8ubmFtZSkpO1xuICAgIGUub25DaGFuZ2Uobik7XG4gIH07XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gcy5qc3goXG4gICAgaSxcbiAgICB7XG4gICAgICB0aXRsZTogZS50aXRsZSxcbiAgICAgIG9wdGlvbnM6IG0oZS5vcHRpb25zKSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogdShlLmRlZmF1bHRWYWx1ZSwgZS5vcHRpb25zKSxcbiAgICAgIHVuY2xlYXJhYmxlOiAhZS5hbGxvd05vVmFsdWUsXG4gICAgICBvbkNoYW5nZTogYVxuICAgIH1cbiAgKTtcbn0sIGMgPSB7XG4gIG5hbWU6IFwiTXVsdGlTZWxlY3RvckRpbWVuc2lvbk9yTWVhc3VyZVwiLFxuICBsYWJlbDogXCJEaW1lbnNpb25zIGFuZCBtZWFzdXJlcyBtdWx0aS1zZWxlY3RcIixcbiAgZGVmYXVsdFdpZHRoOiAzMDAsXG4gIGRlZmF1bHRIZWlnaHQ6IDgwLFxuICBjbGFzc05hbWVzOiBbXCJvbi10b3BcIl0sXG4gIGNhdGVnb3J5OiBcIkNvbnRyb2xzOiBtZWFzdXJlcyBhbmQgZGltZW5zaW9uc1wiLFxuICBpbnB1dHM6IFtcbiAgICB7XG4gICAgICBuYW1lOiBcImRzXCIsXG4gICAgICB0eXBlOiBcImRhdGFzZXRcIixcbiAgICAgIGxhYmVsOiBcIkRhdGFzZXRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkRhdGFzZXRcIixcbiAgICAgIGNhdGVnb3J5OiBcIkRyb3Bkb3duIHZhbHVlc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcIm9wdGlvbnNcIixcbiAgICAgIGFycmF5OiAhMCxcbiAgICAgIHR5cGU6IFwiZGltZW5zaW9uT3JNZWFzdXJlXCIsXG4gICAgICBsYWJlbDogXCJDaG9pY2VzXCIsXG4gICAgICBjb25maWc6IHtcbiAgICAgICAgZGF0YXNldDogXCJkc1wiXG4gICAgICB9LFxuICAgICAgY2F0ZWdvcnk6IFwiRHJvcGRvd24gdmFsdWVzXCIsXG4gICAgICBpbnB1dHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IFwib3ZlcnJpZGVOYW1lXCIsXG4gICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICBsYWJlbDogXCJPdmVycmlkZSBuYW1lXCIsXG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiT3ZlcnJpZGVzIHRoZSBkZWZhdWx0IG5hbWUgc2hvd25cIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcImRlZmF1bHRWYWx1ZVwiLFxuICAgICAgdHlwZTogXCJkaW1lbnNpb25Pck1lYXN1cmVcIixcbiAgICAgIGFycmF5OiAhMCxcbiAgICAgIGxhYmVsOiBcIkRlZmF1bHQgdmFsdWVcIixcbiAgICAgIGNhdGVnb3J5OiBcIlByZS1jb25maWd1cmVkIHZhcmlhYmxlc1wiLFxuICAgICAgY29uZmlnOiB7XG4gICAgICAgIGRhdGFzZXQ6IFwiZHNcIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJ0aXRsZVwiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGxhYmVsOiBcIlRpdGxlXCIsXG4gICAgICBjYXRlZ29yeTogXCJTZXR0aW5nc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcImFsbG93Tm9WYWx1ZVwiLFxuICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICBsYWJlbDogXCJBbGxvdyBubyB2YWx1ZVwiLFxuICAgICAgY2F0ZWdvcnk6IFwiU2V0dGluZ3NcIixcbiAgICAgIGRlZmF1bHRWYWx1ZTogITFcbiAgICB9XG4gIF0sXG4gIGV2ZW50czogW1xuICAgIHtcbiAgICAgIG5hbWU6IFwib25DaGFuZ2VcIixcbiAgICAgIGxhYmVsOiBcIkNoYW5nZVwiLFxuICAgICAgcHJvcGVydGllczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogXCJ2YWx1ZVwiLFxuICAgICAgICAgIHR5cGU6IFwiZGltZW5zaW9uT3JNZWFzdXJlXCIsXG4gICAgICAgICAgYXJyYXk6ICEwXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIF0sXG4gIHZhcmlhYmxlczogW1xuICAgIHtcbiAgICAgIG5hbWU6IFwiRGltZW5zaW9uIG9yIG1lYXN1cmUgbXVsdGkgY2hvaWNlXCIsXG4gICAgICB0eXBlOiBcImRpbWVuc2lvbk9yTWVhc3VyZVwiLFxuICAgICAgYXJyYXk6ICEwLFxuICAgICAgaW5wdXRzOiBbXCJkZWZhdWx0VmFsdWVcIl0sXG4gICAgICBldmVudHM6IFt7IG5hbWU6IFwib25DaGFuZ2VcIiwgcHJvcGVydHk6IFwidmFsdWVcIiB9XVxuICAgIH1cbiAgXVxufSwgYiA9IHIoZCwgYywge1xuICBwcm9wczogKGUsIFthXSkgPT4gZS5kcyA/IHtcbiAgICAuLi5lLFxuICAgIG9wdGlvbnM6IGUub3B0aW9ucyB8fCBbXVxuICB9IDoge1xuICAgIC4uLmUsXG4gICAgb3B0aW9uczogW11cbiAgfSxcbiAgZXZlbnRzOiB7XG4gICAgb25DaGFuZ2U6IChlKSA9PiAoe1xuICAgICAgdmFsdWU6IGUgfHwgbC5ub0ZpbHRlcigpXG4gICAgfSlcbiAgfVxufSk7XG5leHBvcnQge1xuICBiIGFzIGRlZmF1bHQsXG4gIGMgYXMgbWV0YVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU11bHRpU2VsZWN0b3JEaW1lbnNpb25Pck1lYXN1cmUuanMubWFwXG4iXSwibmFtZXMiOlsibiIsInMiLCJpIiwibSIsInUiLCJyIiwibCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLSyxNQUFDLElBQUksQ0FBQyxNQUFNO0FBQ2YsUUFBTSxJQUFJLENBQUMsTUFBTTtBQUNmLFVBQU1BLEtBQUksRUFBRSxRQUFRLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQztBQUNwRCxNQUFFLFNBQVNBLEVBQUM7QUFBQSxFQUNkO0FBQ0EsU0FBdUJDLGtCQUFFO0FBQUEsSUFDdkJDO0FBQUFBLElBQ0E7QUFBQSxNQUNFLE9BQU8sRUFBRTtBQUFBLE1BQ1QsU0FBU0MsRUFBRSxFQUFFLE9BQU87QUFBQSxNQUNwQixjQUFjQyxFQUFFLEVBQUUsY0FBYyxFQUFFLE9BQU87QUFBQSxNQUN6QyxhQUFhLENBQUMsRUFBRTtBQUFBLE1BQ2hCLFVBQVU7QUFBQSxJQUNoQjtBQUFBLEVBQ0E7QUFDQSxHQUFHLElBQUk7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLGNBQWM7QUFBQSxFQUNkLGVBQWU7QUFBQSxFQUNmLFlBQVksQ0FBQyxRQUFRO0FBQUEsRUFDckIsVUFBVTtBQUFBLEVBQ1YsUUFBUTtBQUFBLElBQ047QUFBQSxNQUNFLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLE9BQU87QUFBQSxNQUNQLGFBQWE7QUFBQSxNQUNiLFVBQVU7QUFBQSxJQUNoQjtBQUFBLElBQ0k7QUFBQSxNQUNFLE1BQU07QUFBQSxNQUNOLE9BQU87QUFBQSxNQUNQLE1BQU07QUFBQSxNQUNOLE9BQU87QUFBQSxNQUNQLFFBQVE7QUFBQSxRQUNOLFNBQVM7QUFBQSxNQUNqQjtBQUFBLE1BQ00sVUFBVTtBQUFBLE1BQ1YsUUFBUTtBQUFBLFFBQ047QUFBQSxVQUNFLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLGFBQWE7QUFBQSxRQUN2QjtBQUFBLE1BQ0E7QUFBQSxJQUNBO0FBQUEsSUFDSTtBQUFBLE1BQ0UsTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sT0FBTztBQUFBLE1BQ1AsT0FBTztBQUFBLE1BQ1AsVUFBVTtBQUFBLE1BQ1YsUUFBUTtBQUFBLFFBQ04sU0FBUztBQUFBLE1BQ2pCO0FBQUEsSUFDQTtBQUFBLElBQ0k7QUFBQSxNQUNFLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLE9BQU87QUFBQSxNQUNQLFVBQVU7QUFBQSxJQUNoQjtBQUFBLElBQ0k7QUFBQSxNQUNFLE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLE9BQU87QUFBQSxNQUNQLFVBQVU7QUFBQSxNQUNWLGNBQWM7QUFBQSxJQUNwQjtBQUFBLEVBQ0E7QUFBQSxFQUNFLFFBQVE7QUFBQSxJQUNOO0FBQUEsTUFDRSxNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxZQUFZO0FBQUEsUUFDVjtBQUFBLFVBQ0UsTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFVBQ04sT0FBTztBQUFBLFFBQ2pCO0FBQUEsTUFDQTtBQUFBLElBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDRSxXQUFXO0FBQUEsSUFDVDtBQUFBLE1BQ0UsTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sT0FBTztBQUFBLE1BQ1AsUUFBUSxDQUFDLGNBQWM7QUFBQSxNQUN2QixRQUFRLENBQUMsRUFBRSxNQUFNLFlBQVksVUFBVSxRQUFPLENBQUU7QUFBQSxJQUN0RDtBQUFBLEVBQ0E7QUFDQSxHQUFHLElBQUlDLGdCQUFFLEdBQUcsR0FBRztBQUFBLEVBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLO0FBQUEsSUFDeEIsR0FBRztBQUFBLElBQ0gsU0FBUyxFQUFFLFdBQVcsQ0FBQTtBQUFBLEVBQzFCLElBQU07QUFBQSxJQUNGLEdBQUc7QUFBQSxJQUNILFNBQVMsQ0FBQTtBQUFBLEVBQ2I7QUFBQSxFQUNFLFFBQVE7QUFBQSxJQUNOLFVBQVUsQ0FBQyxPQUFPO0FBQUEsTUFDaEIsT0FBTyxLQUFLQyxHQUFFLFNBQVE7QUFBQSxJQUM1QjtBQUFBLEVBQ0E7QUFDQSxDQUFDOyIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswXX0=
