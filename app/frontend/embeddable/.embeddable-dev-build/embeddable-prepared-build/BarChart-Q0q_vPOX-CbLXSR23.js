import { j } from "./jsx-runtime-CjQXaSqQ-CjMA1-fF.js";
import { M as Mt, Y as Yi, X as Xi, a as Me, k as ke, S as St, P as Ph, I as Ih, w as wh, x as xh, F as Fd, O as Od, $ as $d } from "./common-Badpcggq-Batnw2Ed.js";
import { c as ce } from "./format-TjzP8gQX-Cs7Vwno2.js";
import { K } from "./getBarChartOptions-B4IGPfRT-Q4fKI4Ki.js";
Mt.register(
  Yi,
  Xi,
  Me,
  ke,
  St,
  Ph,
  Ih,
  wh,
  xh,
  Fd
);
function q({ ...l }) {
  return /* @__PURE__ */ j.jsx(
    Od,
    {
      type: "bar",
      height: "100%",
      options: K({ ...l, stacked: false }),
      data: J(l)
    }
  );
}
function J(l) {
  var b, g;
  const { results: t, xAxis: a, metrics: s, lineMetrics: c, showSecondYAxis: u, theme: e } = l, d = (b = a == null ? void 0 : a.inputs) == null ? void 0 : b.granularity, {
    charts: { colors: f },
    dateFormats: h
  } = e;
  $d(e);
  let r = f;
  e.charts.bar.colors && (r = e.charts.bar.colors);
  const C = (a == null ? void 0 : a.nativeType) === "time";
  let m;
  d && d in h && (m = h[d]);
  const y = [
    ...new Set(
      (g = t == null ? void 0 : t.data) == null ? void 0 : g.map((o) => {
        const n = o[a == null ? void 0 : a.name];
        return ce(n ?? "", {
          meta: a == null ? void 0 : a.meta,
          ...C ? { dateFormat: m } : {}
        });
      })
    )
  ], k = (s == null ? void 0 : s.map((o, n) => {
    var i;
    return {
      backgroundColor: r[n % r.length],
      barPercentage: 0.8,
      barThickness: "flex",
      borderRadius: e.charts.bar.borderRadius,
      borderSkipped: e.charts.bar.borderSkipped,
      borderWidth: e.charts.bar.borderWidth,
      data: ((i = t == null ? void 0 : t.data) == null ? void 0 : i.map((p) => parseFloat(p[o.name] || 0))) || [],
      label: o.title,
      maxBarThickness: 50,
      minBarLength: 0,
      order: 1
    };
  })) || [], B = (c == null ? void 0 : c.map((o, n) => {
    var i;
    return {
      backgroundColor: r[s.length + n % r.length],
      borderColor: r[s.length + n % r.length],
      cubicInterpolationMode: e.charts.bar.cubicInterpolationMode,
      data: ((i = t == null ? void 0 : t.data) == null ? void 0 : i.map((p) => parseFloat(p[o.name] || 0))) || [],
      label: o.title,
      order: 0,
      pointHoverRadius: 3,
      pointRadius: 2,
      tension: e.charts.bar.lineTension,
      type: "line",
      yAxisID: u ? "y1" : "y"
    };
  })) || [];
  return {
    labels: y,
    datasets: [...k, ...B]
  };
}
export {
  q
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFyQ2hhcnQtUTBxX3ZQT1gtQ2JMWFNSMjMuanMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jaHJpc3RvcGhlcmNhcmxzb24vZmx1aWQvZHJvcGxldC1lbWJlZGRhYmxlL2FwcC9mcm9udGVuZC9lbWJlZGRhYmxlL25vZGVfbW9kdWxlcy9AZW1iZWRkYWJsZS5jb20vdmFuaWxsYS1jb21wb25lbnRzL2Rpc3QvQmFyQ2hhcnQtUTBxX3ZQT1guanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaiBhcyBTIH0gZnJvbSBcIi4vanN4LXJ1bnRpbWUtQ2pRWGFTcVEuanNcIjtcbmltcG9ydCB7IEMgYXMgRCwgYSBhcyBSLCBMIGFzIFQsIFAgYXMgRSwgQiBhcyBGLCBiIGFzIEwsIHAgYXMgaiwgYyBhcyB2LCBkIGFzIEksIGkgYXMgUCwgZSBhcyBfLCBmIGFzIHcsIHMgYXMgTSB9IGZyb20gXCIuL2NvbW1vbi1CYWRwY2dncS5qc1wiO1xuaW1wb3J0IHsgZiBhcyBXIH0gZnJvbSBcIi4vZm9ybWF0LVRqelA4Z1FYLmpzXCI7XG5pbXBvcnQgeyBnIGFzIEggfSBmcm9tIFwiLi9nZXRCYXJDaGFydE9wdGlvbnMtQjRJR1BmUlQuanNcIjtcbkQucmVnaXN0ZXIoXG4gIFIsXG4gIFQsXG4gIEUsXG4gIEYsXG4gIEwsXG4gIGosXG4gIHYsXG4gIEksXG4gIFAsXG4gIF9cbik7XG5mdW5jdGlvbiBxKHsgLi4ubCB9KSB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUy5qc3goXG4gICAgdyxcbiAgICB7XG4gICAgICB0eXBlOiBcImJhclwiLFxuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIG9wdGlvbnM6IEgoeyAuLi5sLCBzdGFja2VkOiAhMSB9KSxcbiAgICAgIGRhdGE6IEoobClcbiAgICB9XG4gICk7XG59XG5mdW5jdGlvbiBKKGwpIHtcbiAgdmFyIGIsIGc7XG4gIGNvbnN0IHsgcmVzdWx0czogdCwgeEF4aXM6IGEsIG1ldHJpY3M6IHMsIGxpbmVNZXRyaWNzOiBjLCBzaG93U2Vjb25kWUF4aXM6IHUsIHRoZW1lOiBlIH0gPSBsLCBkID0gKGIgPSBhID09IG51bGwgPyB2b2lkIDAgOiBhLmlucHV0cykgPT0gbnVsbCA/IHZvaWQgMCA6IGIuZ3JhbnVsYXJpdHksIHtcbiAgICBjaGFydHM6IHsgY29sb3JzOiBmIH0sXG4gICAgZGF0ZUZvcm1hdHM6IGhcbiAgfSA9IGU7XG4gIE0oZSk7XG4gIGxldCByID0gZjtcbiAgZS5jaGFydHMuYmFyLmNvbG9ycyAmJiAociA9IGUuY2hhcnRzLmJhci5jb2xvcnMpO1xuICBjb25zdCBDID0gKGEgPT0gbnVsbCA/IHZvaWQgMCA6IGEubmF0aXZlVHlwZSkgPT09IFwidGltZVwiO1xuICBsZXQgbTtcbiAgZCAmJiBkIGluIGggJiYgKG0gPSBoW2RdKTtcbiAgY29uc3QgeSA9IFtcbiAgICAuLi5uZXcgU2V0KFxuICAgICAgKGcgPSB0ID09IG51bGwgPyB2b2lkIDAgOiB0LmRhdGEpID09IG51bGwgPyB2b2lkIDAgOiBnLm1hcCgobykgPT4ge1xuICAgICAgICBjb25zdCBuID0gb1thID09IG51bGwgPyB2b2lkIDAgOiBhLm5hbWVdO1xuICAgICAgICByZXR1cm4gVyhuID8/IFwiXCIsIHtcbiAgICAgICAgICBtZXRhOiBhID09IG51bGwgPyB2b2lkIDAgOiBhLm1ldGEsXG4gICAgICAgICAgLi4uQyA/IHsgZGF0ZUZvcm1hdDogbSB9IDoge31cbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgIClcbiAgXSwgayA9IChzID09IG51bGwgPyB2b2lkIDAgOiBzLm1hcCgobywgbikgPT4ge1xuICAgIHZhciBpO1xuICAgIHJldHVybiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHJbbiAlIHIubGVuZ3RoXSxcbiAgICAgIGJhclBlcmNlbnRhZ2U6IDAuOCxcbiAgICAgIGJhclRoaWNrbmVzczogXCJmbGV4XCIsXG4gICAgICBib3JkZXJSYWRpdXM6IGUuY2hhcnRzLmJhci5ib3JkZXJSYWRpdXMsXG4gICAgICBib3JkZXJTa2lwcGVkOiBlLmNoYXJ0cy5iYXIuYm9yZGVyU2tpcHBlZCxcbiAgICAgIGJvcmRlcldpZHRoOiBlLmNoYXJ0cy5iYXIuYm9yZGVyV2lkdGgsXG4gICAgICBkYXRhOiAoKGkgPSB0ID09IG51bGwgPyB2b2lkIDAgOiB0LmRhdGEpID09IG51bGwgPyB2b2lkIDAgOiBpLm1hcCgocCkgPT4gcGFyc2VGbG9hdChwW28ubmFtZV0gfHwgMCkpKSB8fCBbXSxcbiAgICAgIGxhYmVsOiBvLnRpdGxlLFxuICAgICAgbWF4QmFyVGhpY2tuZXNzOiA1MCxcbiAgICAgIG1pbkJhckxlbmd0aDogMCxcbiAgICAgIG9yZGVyOiAxXG4gICAgfTtcbiAgfSkpIHx8IFtdLCBCID0gKGMgPT0gbnVsbCA/IHZvaWQgMCA6IGMubWFwKChvLCBuKSA9PiB7XG4gICAgdmFyIGk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogcltzLmxlbmd0aCArIG4gJSByLmxlbmd0aF0sXG4gICAgICBib3JkZXJDb2xvcjogcltzLmxlbmd0aCArIG4gJSByLmxlbmd0aF0sXG4gICAgICBjdWJpY0ludGVycG9sYXRpb25Nb2RlOiBlLmNoYXJ0cy5iYXIuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSxcbiAgICAgIGRhdGE6ICgoaSA9IHQgPT0gbnVsbCA/IHZvaWQgMCA6IHQuZGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IGkubWFwKChwKSA9PiBwYXJzZUZsb2F0KHBbby5uYW1lXSB8fCAwKSkpIHx8IFtdLFxuICAgICAgbGFiZWw6IG8udGl0bGUsXG4gICAgICBvcmRlcjogMCxcbiAgICAgIHBvaW50SG92ZXJSYWRpdXM6IDMsXG4gICAgICBwb2ludFJhZGl1czogMixcbiAgICAgIHRlbnNpb246IGUuY2hhcnRzLmJhci5saW5lVGVuc2lvbixcbiAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgICAgeUF4aXNJRDogdSA/IFwieTFcIiA6IFwieVwiXG4gICAgfTtcbiAgfSkpIHx8IFtdO1xuICByZXR1cm4ge1xuICAgIGxhYmVsczogeSxcbiAgICBkYXRhc2V0czogWy4uLmssIC4uLkJdXG4gIH07XG59XG5leHBvcnQge1xuICBxIGFzIEJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXJDaGFydC1RMHFfdlBPWC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJEIiwiUiIsIlQiLCJFIiwiRiIsIkwiLCJqIiwidiIsIkkiLCJQIiwiXyIsIlMiLCJ3IiwiSCIsIk0iLCJXIl0sIm1hcHBpbmdzIjoiOzs7O0FBSUFBLEdBQUU7QUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUFBQSxFQUNBQztBQUNGO0FBQ0EsU0FBUyxFQUFFLEVBQUUsR0FBRyxLQUFLO0FBQ25CLFNBQXVCQyxrQkFBRTtBQUFBLElBQ3ZCQztBQUFBQSxJQUNBO0FBQUEsTUFDRSxNQUFNO0FBQUEsTUFDTixRQUFRO0FBQUEsTUFDUixTQUFTQyxFQUFFLEVBQUUsR0FBRyxHQUFHLFNBQVMsT0FBSTtBQUFBLE1BQ2hDLE1BQU0sRUFBRSxDQUFDO0FBQUEsSUFDZjtBQUFBLEVBQ0E7QUFDQTtBQUNBLFNBQVMsRUFBRSxHQUFHO0FBQ1osTUFBSSxHQUFHO0FBQ1AsUUFBTSxFQUFFLFNBQVMsR0FBRyxPQUFPLEdBQUcsU0FBUyxHQUFHLGFBQWEsR0FBRyxpQkFBaUIsR0FBRyxPQUFPLEVBQUMsSUFBSyxHQUFHLEtBQUssSUFBSSxLQUFLLE9BQU8sU0FBUyxFQUFFLFdBQVcsT0FBTyxTQUFTLEVBQUUsYUFBYTtBQUFBLElBQ3RLLFFBQVEsRUFBRSxRQUFRLEVBQUM7QUFBQSxJQUNuQixhQUFhO0FBQUEsRUFDakIsSUFBTTtBQUNKQyxLQUFFLENBQUM7QUFDSCxNQUFJLElBQUk7QUFDUixJQUFFLE9BQU8sSUFBSSxXQUFXLElBQUksRUFBRSxPQUFPLElBQUk7QUFDekMsUUFBTSxLQUFLLEtBQUssT0FBTyxTQUFTLEVBQUUsZ0JBQWdCO0FBQ2xELE1BQUk7QUFDSixPQUFLLEtBQUssTUFBTSxJQUFJLEVBQUUsQ0FBQztBQUN2QixRQUFNLElBQUk7QUFBQSxJQUNSLEdBQUcsSUFBSTtBQUFBLE9BQ0osSUFBSSxLQUFLLE9BQU8sU0FBUyxFQUFFLFNBQVMsT0FBTyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU07QUFDaEUsY0FBTSxJQUFJLEVBQUUsS0FBSyxPQUFPLFNBQVMsRUFBRSxJQUFJO0FBQ3ZDLGVBQU9DLEdBQUUsS0FBSyxJQUFJO0FBQUEsVUFDaEIsTUFBTSxLQUFLLE9BQU8sU0FBUyxFQUFFO0FBQUEsVUFDN0IsR0FBRyxJQUFJLEVBQUUsWUFBWSxNQUFNLENBQUE7QUFBQSxRQUNyQyxDQUFTO0FBQUEsTUFDSCxDQUFDO0FBQUEsSUFDUDtBQUFBLEVBQ0EsR0FBSyxLQUFLLEtBQUssT0FBTyxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsTUFBTTtBQUMzQyxRQUFJO0FBQ0osV0FBTztBQUFBLE1BQ0wsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLE1BQU07QUFBQSxNQUMvQixlQUFlO0FBQUEsTUFDZixjQUFjO0FBQUEsTUFDZCxjQUFjLEVBQUUsT0FBTyxJQUFJO0FBQUEsTUFDM0IsZUFBZSxFQUFFLE9BQU8sSUFBSTtBQUFBLE1BQzVCLGFBQWEsRUFBRSxPQUFPLElBQUk7QUFBQSxNQUMxQixRQUFRLElBQUksS0FBSyxPQUFPLFNBQVMsRUFBRSxTQUFTLE9BQU8sU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLFdBQVcsRUFBRSxFQUFFLElBQUksS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQUEsTUFDekcsT0FBTyxFQUFFO0FBQUEsTUFDVCxpQkFBaUI7QUFBQSxNQUNqQixjQUFjO0FBQUEsTUFDZCxPQUFPO0FBQUEsSUFDYjtBQUFBLEVBQ0UsQ0FBQyxNQUFNLENBQUEsR0FBSSxLQUFLLEtBQUssT0FBTyxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsTUFBTTtBQUNuRCxRQUFJO0FBQ0osV0FBTztBQUFBLE1BQ0wsaUJBQWlCLEVBQUUsRUFBRSxTQUFTLElBQUksRUFBRSxNQUFNO0FBQUEsTUFDMUMsYUFBYSxFQUFFLEVBQUUsU0FBUyxJQUFJLEVBQUUsTUFBTTtBQUFBLE1BQ3RDLHdCQUF3QixFQUFFLE9BQU8sSUFBSTtBQUFBLE1BQ3JDLFFBQVEsSUFBSSxLQUFLLE9BQU8sU0FBUyxFQUFFLFNBQVMsT0FBTyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sV0FBVyxFQUFFLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFBQSxNQUN6RyxPQUFPLEVBQUU7QUFBQSxNQUNULE9BQU87QUFBQSxNQUNQLGtCQUFrQjtBQUFBLE1BQ2xCLGFBQWE7QUFBQSxNQUNiLFNBQVMsRUFBRSxPQUFPLElBQUk7QUFBQSxNQUN0QixNQUFNO0FBQUEsTUFDTixTQUFTLElBQUksT0FBTztBQUFBLElBQzFCO0FBQUEsRUFDRSxDQUFDLE1BQU0sQ0FBQTtBQUNQLFNBQU87QUFBQSxJQUNMLFFBQVE7QUFBQSxJQUNSLFVBQVUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQUEsRUFDekI7QUFDQTsiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMF19
