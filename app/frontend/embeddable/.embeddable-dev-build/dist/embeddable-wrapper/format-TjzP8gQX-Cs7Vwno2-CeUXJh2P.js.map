{"version":3,"file":"format-TjzP8gQX-Cs7Vwno2-CeUXJh2P.js","sources":["../../../node_modules/@embeddable.com/vanilla-components/src/components/util/format.ts","../../../node_modules/@embeddable.com/vanilla-components/src/components/util/timezone.ts","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/subMinutes.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/parseJSON.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/format.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/toDate.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/_lib/protectedTokens.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/_lib/format/longFormatters.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/_lib/format/formatters.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/_lib/format/lightFormatters.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/_lib/addLeadingZeros.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/getWeek.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/startOfWeekYear.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/getWeekYear.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/getISOWeek.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/getDayOfYear.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/locale/en-US.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/locale/en-US/_lib/match.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/locale/_lib/buildMatchFn.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/locale/en-US/_lib/localize.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/locale/en-US/_lib/formatLong.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/startOfYear.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/isValid.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/isDate.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/addMinutes.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/startOfISOWeekYear.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/differenceInCalendarDays.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/startOfDay.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/getISOWeekYear.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/startOfISOWeek.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/startOfWeek.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/_lib/defaultOptions.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/constants.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/addMilliseconds.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/constructFrom.mjs"],"sourcesContent":["import { format as formatDate } from 'date-fns';\n\nimport { parseTime } from '../util/timezone';\n\ntype Type = 'number' | 'date' | 'string';\n\ntype Options = {\n  type?: Type;\n  truncate?: number;\n  dateFormat?: string;\n  meta?: { pretext?: string; posttext?: string };\n  dps?: number;\n};\n\nfunction numberFormatter(dps: number | undefined | null) {\n  const fallback = dps == null || dps < 0;\n  return new Intl.NumberFormat(undefined, {\n    minimumFractionDigits: fallback ? 0 : dps, // Minimum number of digits after the decimal\n    maximumFractionDigits: fallback ? 2 : dps, // Maximum number of digits after the decimal\n  });\n}\n\nconst dateFormatter = new Intl.DateTimeFormat();\n\n/**\n * Formats a value according to the specified options\n * \n * Runtime assumptions:\n * - Metrics are always numeric and should be formatted as numbers\n * - Date strings should be in ISO format or end with 'T00:00:00.000'\n * - DateFormat should be pre-calculated based on granularity and theme before calling this function\n * - Meta objects may contain pretext/posttext for value wrapping\n * \n * Note: Granularity-based formatting is handled at the component level where theme is available.\n * This function expects the dateFormat to be pre-calculated and passed in the options.\n * \n * @param str - The string value to format\n * @param opt - Formatting options or type\n * @returns The formatted value as a string\n */\nexport default function formatValue(str: string = '', opt: Type | Options = 'string') {\n  if (str === null) return null;\n\n  const { type, dateFormat, meta, truncate, dps }: Options =\n    typeof opt === 'string' ? { type: opt } : opt;\n\n  if (type === 'number') return wrap(numberFormatter(dps).format(parseFloat(str)));\n\n  if (type === 'date' && str.endsWith('T00:00:00.000')) {\n    return wrap(dateFormatter.format(new Date(str)));\n  }\n\n  if (type === 'date') return wrap(new Date(str).toLocaleString());\n\n  if (truncate) {\n    return str?.length > truncate\n      ? `${meta?.pretext || ''}${str.substring(0, truncate)}...`\n      : wrap(str);\n  }\n\n  if (dateFormat && str) return wrap(formatDate(parseTime(str), dateFormat));\n\n  return str;\n\n  function wrap(v: string) {\n    return `${meta?.pretext || ''}${v}${meta?.posttext || ''}`;\n  }\n}\n\nexport const detectAndReturnLinks = (text: string) => {\n  if (!text) {\n    return { linkText: null, linkUrl: null };\n  }\n  const linkData = /\\[(.*)\\]\\((.*)\\)/.exec(text);\n  return { linkText: linkData?.[1], linkUrl: encodeURI(linkData?.[2] || '') };\n};\n","import { TimeRange } from '@embeddable.com/core';\nimport { addMinutes, subMinutes } from 'date-fns';\nimport {\n  parseJSON\n} from 'date-fns';\n\nexport function parseTime(dateStr: string): number {\n  const d: Date = parseJSON(dateStr);\n  return d.valueOf() + d.getTimezoneOffset() * 60000;\n}\n\n\nexport function timeRangeToUTC(range?: TimeRange) {\n  if (!range?.to || !range?.from) return range;\n\n  return {\n    ...range,\n    to: toUTC(range.to),\n    from: toUTC(range.from)\n  };\n}\n\nexport function timeRangeToLocal(range?: TimeRange) {\n  if (!range?.to || !range?.from) return range;\n\n  return {\n    ...range,\n    to: toLocal(range.to),\n    from: toLocal(range.from)\n  };\n}\n\nexport function toUTC(date: string | Date): Date | undefined {\n  if (!date) {\n    return undefined;\n  }\n\n  if (date instanceof Date) {\n    return subMinutes(date, date.getTimezoneOffset());\n  }\n\n  const t = new Date(date);\n\n  if (!t) {\n    return undefined;\n  }\n\n  return subMinutes(t, t.getTimezoneOffset());\n}\n\nexport function toLocal(date: string | Date): Date | undefined {\n  if (!date) {\n    return undefined;\n  }\n\n  if (date instanceof Date) {\n    return addMinutes(date, date.getTimezoneOffset());\n  }\n\n  const t = new Date(date);\n\n  if (!t) {\n    return undefined;\n  }\n\n  return addMinutes(t, t.getTimezoneOffset());\n}\n","import { addMinutes } from \"./addMinutes.mjs\";\n\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be subtracted.\n *\n * @returns The new date with the minutes subtracted\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * const result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\nexport function subMinutes(date, amount) {\n  return addMinutes(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subMinutes;\n","/**\n * @name parseJSON\n * @category Common Helpers\n * @summary Parse a JSON date string\n *\n * @description\n * Converts a complete ISO date string in UTC time, the typical format for transmitting\n * a date in JSON, to a JavaScript `Date` instance.\n *\n * This is a minimal implementation for converting dates retrieved from a JSON API to\n * a `Date` instance which can be used with other functions in the `date-fns` library.\n * The following formats are supported:\n *\n * - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`\n * - `2000-03-15T05:20:10Z`: Without milliseconds\n * - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages\n * - `2000-03-15T05:20:10+05:45`: With a positive or negative offset, the default JSON encoded format in some other languages\n * - `2000-03-15T05:20:10+0000`: With a zero offset without a colon\n * - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol\n * - `2000-03-15T05:20:10.1234567`: Up to 7 digits in milliseconds field. Only first 3 are taken into account since JS does not allow fractional milliseconds\n * - `2000-03-15 05:20:10`: With a space instead of a 'T' separator for APIs returning a SQL date without reformatting\n *\n * For convenience and ease of use these other input types are also supported\n * via [toDate](https://date-fns.org/docs/toDate):\n *\n * - A `Date` instance will be cloned\n * - A `number` will be treated as a timestamp\n *\n * Any other input type or invalid date strings will return an `Invalid Date`.\n *\n * @param dateStr - A fully formed ISO8601 date string to convert\n *\n * @returns The parsed date in the local time zone\n */\nexport function parseJSON(dateStr) {\n  const parts = dateStr.match(\n    /(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{0,7}))?(?:Z|(.)(\\d{2}):?(\\d{2})?)?/,\n  );\n  if (parts) {\n    // Group 8 matches the sign\n    return new Date(\n      Date.UTC(\n        +parts[1],\n        +parts[2] - 1,\n        +parts[3],\n        +parts[4] - (+parts[9] || 0) * (parts[8] == \"-\" ? -1 : 1),\n        +parts[5] - (+parts[10] || 0) * (parts[8] == \"-\" ? -1 : 1),\n        +parts[6],\n        +((parts[7] || \"0\") + \"00\").substring(0, 3),\n      ),\n    );\n  }\n  return new Date(NaN);\n}\n\n// Fallback for modularized imports:\nexport default parseJSON;\n","import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date) {\n  const _date = toDate(date);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\nimport { millisecondsInMinute } from \"./constants.mjs\";\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be added.\n *\n * @returns The new date with the minutes added\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nexport function addMinutes(date, amount) {\n  return addMilliseconds(date, amount * millisecondsInMinute);\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;\n","import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date) {\n  const year = getISOWeekYear(date);\n  const fourthOfJanuary = constructFrom(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"../toDate.mjs\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date) {\n  return startOfWeek(date, { weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount) {\n  const timestamp = +toDate(date);\n  return constructFrom(date, timestamp + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;\n","/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n"],"names":["linkData","text","detectAndReturnLinks","meta","v","wrap","str","dateFormat","formatDate","parseTime","truncate","type","dateFormatter","numberFormatter","dps","opt","formatValue","fallback","addMinutes","t","date","toLocal","subMinutes","toUTC","range","timeRangeToLocal","timeRangeToUTC","d","parseJSON","dateStr","amount","parts","matched","doubleQuoteRegExp","input","escapedStringRegExp","cleanEscapedString","formatter","originalDate","token","locale","formatterOptions","formatters","options","isProtectedWeekYearToken","isProtectedDayOfYearToken","warnOrThrowProtectedError","formatStr","part","weekStartsOn","firstWeekContainsDate","substring","firstCharacter","unescapedLatinCharacterRegExp","formattingTokensRegExp","longFormatter","longFormatters","longFormattingTokensRegExp","isValid","defaultOptions","getDefaultOptions","defaultLocale","_b","_a","_d","_c","_f","_e","_h","_g","toDate","format","subject","message","_message","throwTokens","weekYearTokenRE","dayOfYearTokenRE","timeLongFormatter","dateTimeLongFormatter","dateTimeFormat","dateLongFormatter","datePattern","formatLong","timePattern","pattern","matchResult","sign","hours","delimiter","minutes","offset","absOffset","addLeadingZeros","formatTimezone","formatTimezoneWithOptionalMinutes","formatTimezoneShort","timestamp","_localize","timezoneOffset","lightFormatters","localize","dayPeriodEnumValue","dayPeriodEnum","dayOfWeek","isoDayOfWeek","localDayOfWeek","dayOfYear","getDayOfYear","isoWeek","getISOWeek","week","getWeek","month","quarter","year","isoWeekYear","getISOWeekYear","weekYear","twoDigitYear","signedWeekYear","getWeekYear","signedYear","era","fractionalSeconds","milliseconds","numberOfDigits","output","number","targetLength","diff","millisecondsInWeek","_date","startOfWeek","startOfWeekYear","firstWeek","constructFrom","startOfNextYear","startOfThisYear","firstWeekOfThisYear","firstWeekOfNextYear","startOfISOWeek","startOfISOWeekYear","differenceInCalendarDays","startOfYear","match","formatRelative","formatDistance","enUS","parseDayPeriodPatterns","matchDayPeriodPatterns","buildMatchFn","parseDayPatterns","matchDayPatterns","parseMonthPatterns","matchMonthPatterns","index","parseQuarterPatterns","matchQuarterPatterns","parseEraPatterns","matchEraPatterns","parseOrdinalNumberPattern","value","matchOrdinalNumberPattern","buildMatchPatternFn","rest","string","matchedString","args","parseResult","key","predicate","array","findIndex","object","findKey","parsePatterns","width","matchPattern","formattingDayPeriodValues","dayPeriodValues","buildLocalizeFn","dayValues","monthValues","quarterValues","eraValues","ordinalNumber","rem100","dirtyNumber","_options","valuesArray","defaultWidth","context","_baseDate","formatRelativeLocale","dateTimeFormats","buildFormatLongFn","timeFormats","dateFormats","tokenValue","result","count","formatDistanceLocale","cleanDate","isDate","addMilliseconds","millisecondsInMinute","fourthOfJanuary","timestampLeft","timestampRight","millisecondsInDay","startOfDayLeft","startOfDay","dateLeft","startOfDayRight","dateRight","getTimezoneOffsetInMilliseconds","utcDate","fourthOfJanuaryOfThisYear","fourthOfJanuaryOfNextYear","day","millisecondsInHour","millisecondsInSecond","argument","argStr"],"mappings":"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"}