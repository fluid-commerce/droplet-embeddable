{"version":3,"file":"getStackedChartData-DmWnIJXP-Ji_he_TH-CTtJMDP0.js","sources":["../../../node_modules/@embeddable.com/vanilla-components/src/components/util/getStackedChartData.ts"],"sourcesContent":["import { DataResponse, Dataset, Dimension, Granularity, Measure } from '@embeddable.com/core';\nimport { ChartData } from 'chart.js';\n\nimport formatValue from '../util/format';\nimport { Theme } from '../../themes/theme';\n\ntype DatasetsMeta = {\n  [key: string]: boolean | string | number;\n};\n\nexport type Props = {\n  displayAsPercentage?: boolean;\n  displayHorizontally?: boolean;\n  dps?: number;\n  ds?: Dataset;\n  granularity?: Granularity;\n  isTSGroupedBarChart?: boolean;\n  maxSegments?: number;\n  metric: Measure;\n  results: DataResponse;\n  segment: Dimension;\n  showLabels?: boolean;\n  showLegend?: boolean;\n  showTotals?: boolean;\n  title?: string;\n  totals?: { [key: string]: { total: number; lastSegment: number | null } };\n  useCustomDateFormat?: boolean;\n  xAxis: Dimension;\n  xAxisTitle?: string;\n  yAxisMin?: number;\n  yAxisTitle?: string;\n  isGroupedBar?: boolean;\n  stackBars?: boolean;\n};\nexport type PropsWithRequiredTheme = Props & { theme: Theme };\n\ntype Options = {\n  chartType?: string;\n};\n\ntype LabelRef = {\n  [key: string]: number | null;\n};\n\nexport default function getStackedChartData(\n  props: PropsWithRequiredTheme,\n  datasetsMeta: DatasetsMeta,\n  options?: Options,\n): ChartData<'line' | 'bar', (number | null)[], unknown> {\n  const {\n    displayAsPercentage,\n    granularity,\n    maxSegments,\n    metric,\n    results,\n    segment,\n    showTotals,\n    theme,\n    totals,\n    useCustomDateFormat,\n    xAxis,\n  } = props;\n  const labels = [...new Set(results?.data?.map((d: Record) => d[xAxis?.name || '']))] as string[];\n  const segments = segmentsToInclude();\n  const resultMap: { [key: string]: LabelRef } = {};\n\n  // Populate a reference object like so:\n  // {\n  //   label1: {\n  //     segment1: metric,\n  //     segment2: metric, etc\n  //   }\n  // }\n\n  const defaultSegmentValue = options?.chartType === 'stackedAreaChart' ? 0 : null; // Default is null not 0, to avoid unwanted chart elements\n\n  labels.forEach((label) => {\n    const labelRef: LabelRef = {};\n\n    segments.forEach((s) => (labelRef[s] = defaultSegmentValue));\n\n    resultMap[label] = labelRef;\n  });\n\n  results?.data?.forEach((d) => {\n    const seg = d[segment?.name || ''];\n    const axis = d[xAxis?.name || ''];\n    const met = d[metric?.name || ''];\n\n    if (segments.includes(seg)) {\n      resultMap[axis][seg] = parseFloat(met);\n    } else {\n      resultMap[axis]['Other'] = (resultMap[axis]['Other'] || 0) + parseFloat(met);\n    }\n  });\n\n  let dateFormat: string | undefined = undefined;\n  if (useCustomDateFormat && granularity) {\n    dateFormat = theme.dateFormats[granularity];\n  }\n  else if (xAxis.nativeType === 'time') {\n    if (granularity && theme.dateFormats[granularity]) {\n      dateFormat = theme.dateFormats[granularity];\n    } else if (xAxis?.inputs?.granularity && theme.dateFormats[xAxis.inputs.granularity as Granularity]) {\n      dateFormat = theme.dateFormats[xAxis.inputs.granularity as Granularity];\n    }\n  }\n\n  return {\n    labels: labels.map((l) => formatValue(l, { meta: xAxis?.meta, dateFormat: dateFormat })),\n    datasets: segments.map((s, i) => {\n      const dataset = {\n        ...datasetsMeta,\n        backgroundColor: theme.charts.colors[i % theme.charts.colors.length],\n        borderColor: theme.charts.colors[i % theme.charts.colors.length],\n        label: s, // this is actually segment name, not label, but chart.js wants \"label\" here\n        data: labels.map((label) => {\n          const segmentValue = resultMap[label][s];\n          if (showTotals && totals && segmentValue !== null) {\n            totals[label].lastSegment = i;\n          }\n          return displayAsPercentage && segmentValue !== null //skip null values\n            ? parseFloat(\n                `${\n                  (segmentValue * 100) /\n                  segments.reduce((accumulator, segment) => {\n                    if (resultMap[label][segment] === null) {\n                      return accumulator;\n                    }\n                    return resultMap[label][segment] + accumulator;\n                  }, 0)\n                }`,\n              )\n            : segmentValue;\n        }),\n        xAxisNames: labels,\n        totals,\n      };\n      return dataset;\n    }),\n  };\n\n  type Record = { [p: string]: string };\n\n  function segmentsToInclude(): string[] {\n    const uniqueSegments = [\n      ...new Set(results?.data?.map((d: Record) => d[segment?.name || ''] || 'No value')),\n    ] as string[];\n\n    if (!maxSegments || uniqueSegments.length <= maxSegments || maxSegments < 1) {\n      return uniqueSegments;\n    }\n\n    // Reduce to maxSegments, comprising the segments with the highest total and an 'Other' segment merging the longtail segments.\n    const segmentTotals: { [key: string]: number } = {};\n\n    results?.data?.forEach(\n      (d) =>\n        (segmentTotals[d[segment?.name || '']] =\n          (segmentTotals[d[segment?.name || '']] || 0) + parseInt(d[metric?.name || ''])),\n    );\n\n    const summedSegments = Object.keys(segmentTotals)\n      .map((item) => {\n        return {\n          name: item,\n          value: segmentTotals[item],\n        };\n      })\n      .sort((a, b) => b.value - a.value);\n\n    const segmentsToInclude = summedSegments.slice(0, maxSegments).map((s) => s.name);\n\n    segmentsToInclude.push('Other');\n\n    return segmentsToInclude;\n  }\n}\n"],"names":["segmentsToInclude","a","b","maxSegments","s","item","segmentTotals","d","segment","metric","_b","results","uniqueSegments","_a","totals","labels","segmentValue","segments","accumulator","resultMap","label","showTotals","i","displayAsPercentage","theme","datasetsMeta","l","formatValue","xAxis","dateFormat","useCustomDateFormat","granularity","_c","seg","axis","met","labelRef","defaultSegmentValue","props","options","getStackedChartData"],"mappings":"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"}