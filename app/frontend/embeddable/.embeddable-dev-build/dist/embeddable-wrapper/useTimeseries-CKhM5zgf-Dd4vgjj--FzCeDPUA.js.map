{"version":3,"file":"useTimeseries-CKhM5zgf-Dd4vgjj--FzCeDPUA.js","sources":["../../../node_modules/@embeddable.com/vanilla-components/src/components/hooks/useTimeseries.ts","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/subWeeks.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/subSeconds.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/subHours.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/addWeeks.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/addSeconds.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/addHours.mjs"],"sourcesContent":["import { Dimension, Granularity } from '@embeddable.com/core';\nimport {\n  addDays,\n  addHours,\n  addMinutes,\n  addMonths,\n  addQuarters,\n  addSeconds,\n  addWeeks,\n  addYears,\n  parseJSON,\n  subDays,\n  subHours,\n  subMinutes,\n  subMonths,\n  subQuarters,\n  subSeconds,\n  subWeeks,\n  subYears,\n} from 'date-fns';\nimport { useCallback } from 'react';\n\ntype Record = { [p: string]: string };\n\nconst addTime: { [granularity: string]: (date: Date | number, amount: number) => Date } = {\n  second: addSeconds,\n  minute: addMinutes,\n  hour: addHours,\n  day: addDays,\n  week: addWeeks,\n  month: addMonths,\n  quarter: addQuarters,\n  year: addYears,\n};\n\nconst subTime: { [granularity: string]: (date: Date | number, amount: number) => Date } = {\n  second: subSeconds,\n  minute: subMinutes,\n  hour: subHours,\n  day: subDays,\n  week: subWeeks,\n  month: subMonths,\n  quarter: subQuarters,\n  year: subYears,\n};\n\nconst unitsInSeconds = {\n  second: 1,\n  minute: 60,\n  hour: 3600,\n  day: 86400,\n  week: 604800,\n  month: 2629800, // Roughly 30.44 days\n  quarter: 7889400, // Roughly 91.31 days\n  year: 31557600, // Based on a typical Gregorian year\n};\n\ntype Props = {\n  xAxis: Dimension;\n  granularity?: Granularity;\n};\n\n/**\n * Hook for handling time-series data with gap filling\n * \n * Runtime assumptions:\n * - Time dimensions should be sorted in ascending or descending order\n * - Missing dates should be filled based on granularity\n * - Date values should be in ISO format for proper parsing\n * - Granularity determines the time unit for gap filling\n * \n * @param props - Component props containing time-series configuration\n * @param sortOrder - Sort order for the time series ('asc' or 'desc')\n * @returns Object with fillGaps function for processing time-series data\n */\nexport default (props: Props, sortOrder: string = 'asc') => {\n  const { xAxis, granularity } = props;\n\n  const fillGaps = useCallback(\n    (memo: Record[], record: Record) => {\n      const prevRecord = memo[memo.length - 1]; // Get the last processed record\n      const xAxisValue = record[xAxis?.name || '']; // Current record's x-axis value\n\n      // Exclude records where the x-axis value is null or undefined\n      if (xAxisValue === null || xAxisValue === undefined) {\n        return memo;\n      }\n\n      // If there is no previous record, add the current record and return\n      if (!prevRecord) {\n        return [...memo, record];\n      }\n\n      const prevDate = prevRecord[xAxis?.name || '']; // Previous record's x-axis value\n\n      // If the previous date is missing, add the current record and return\n      if (!prevDate) {\n        return [...memo, record];\n      }\n\n      // Calculate the next expected date based on granularity and sort order\n      const seqDate =\n        sortOrder === 'asc'\n          ? addTime[granularity || 'day'](parseJSON(prevDate), 1)\n          : subTime[granularity || 'day'](parseJSON(prevDate), 1);\n\n      const dateSince1970 = parseJSON(xAxisValue).getTime(); // Timestamp of the current date\n      const seqDateSince1970 = seqDate.getTime(); // Timestamp of the expected sequence date\n\n      // If the current date is within the expected range, add it directly\n      if (\n        (sortOrder === 'asc'\n          ? dateSince1970 <= seqDateSince1970\n          : dateSince1970 >= seqDateSince1970) ||\n        Math.abs(seqDateSince1970 - dateSince1970) < unitsInSeconds[granularity || 'day'] * 1000\n      ) {\n        return [...memo, record];\n      }\n\n      // Add the expected sequence date to fill the gap\n      memo.push({\n        [xAxis?.name || '']: seqDate.toISOString().split('Z')[0], // Format to ISO string without timezone\n      });\n\n      // Recursive call to continue checking gaps\n      return fillGaps(memo, record);\n    },\n    [xAxis, granularity, sortOrder], // Dependencies for useCallback\n  );\n\n  return { fillGaps };\n};\n","import { addWeeks } from \"./addWeeks.mjs\";\n\n/**\n * @name subWeeks\n * @category Week Helpers\n * @summary Subtract the specified number of weeks from the given date.\n *\n * @description\n * Subtract the specified number of weeks from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of weeks to be subtracted.\n *\n * @returns The new date with the weeks subtracted\n *\n * @example\n * // Subtract 4 weeks from 1 September 2014:\n * const result = subWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Aug 04 2014 00:00:00\n */\nexport function subWeeks(date, amount) {\n  return addWeeks(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subWeeks;\n","import { addSeconds } from \"./addSeconds.mjs\";\n\n/**\n * @name subSeconds\n * @category Second Helpers\n * @summary Subtract the specified number of seconds from the given date.\n *\n * @description\n * Subtract the specified number of seconds from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of seconds to be subtracted.\n *\n * @returns The new date with the seconds subtracted\n *\n * @example\n * // Subtract 30 seconds from 10 July 2014 12:45:00:\n * const result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:44:30\n */\nexport function subSeconds(date, amount) {\n  return addSeconds(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subSeconds;\n","import { addHours } from \"./addHours.mjs\";\n\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be subtracted.\n *\n * @returns The new date with the hours subtracted\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\nexport function subHours(date, amount) {\n  return addHours(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subHours;\n","import { addDays } from \"./addDays.mjs\";\n\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of weeks to be added.\n *\n * @returns The new date with the weeks added\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\nexport function addWeeks(date, amount) {\n  const days = amount * 7;\n  return addDays(date, days);\n}\n\n// Fallback for modularized imports:\nexport default addWeeks;\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\n\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of seconds to be added.\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\nexport function addSeconds(date, amount) {\n  return addMilliseconds(date, amount * 1000);\n}\n\n// Fallback for modularized imports:\nexport default addSeconds;\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\nimport { millisecondsInHour } from \"./constants.mjs\";\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added.\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount) {\n  return addMilliseconds(date, amount * millisecondsInHour);\n}\n\n// Fallback for modularized imports:\nexport default addHours;\n"],"names":["fillGaps","xAxis","granularity","sortOrder","memo","record","seqDate","dateSince1970","seqDateSince1970","unitsInSeconds","addTime","parseJSON","prevDate","subTime","xAxisValue","prevRecord","useCallback","g","props","useTimeseries","subQuarters","T","subYears","subMonths","v","subWeeks","subDays","w","subHours","subMinutes","Q","subSeconds","addQuarters","M","addYears","addMonths","q","addWeeks","addDays","y","addHours","addMinutes","I","addSeconds","date","amount","days","addMilliseconds","millisecondsInHour"],"mappings":"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"}