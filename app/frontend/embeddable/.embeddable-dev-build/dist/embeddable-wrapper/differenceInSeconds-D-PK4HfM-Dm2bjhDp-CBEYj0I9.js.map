{"version":3,"file":"differenceInSeconds-D-PK4HfM-Dm2bjhDp-CBEYj0I9.js","sources":["../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/differenceInSeconds.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/endOfDay.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/differenceInMilliseconds.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/_lib/getRoundingMethod.mjs"],"sourcesContent":["import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(dateLeft, dateRight, options) {\n  const diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(dateLeft, dateRight) {\n  return +toDate(dateLeft) - +toDate(dateRight);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n"],"names":["getRoundingMethod","options","diff","differenceInMilliseconds","dateLeft","dateRight","differenceInSeconds","_date","toDate","date","endOfDay","result","method","number"],"mappings":";;AGAO,SAASA,CAAhB,CAAkCY,CAAlC,EAA0C;AAC1C,EAAA,OAAS,CAACC,CAAV,KAAqB;AAErB,IAAA,MAAUF,CAAV,GAAA,CADkBC,CAClB,GAD2B,IAC3B,CADgCA,CAAM,CACtC,GAD0C,IAC1C,CAD+C,KAC/C,EAAyBC,CAAM,CAA/B;AAEA,IAAA,OAAWF,CAAX,KAAsB,CAAtB,GAA0B,CAA1B,GAA8BA,CAA9B;AAA8BA,GAA9B;AAEA;ADmBO,SAASR,CAAhB,CAAyCC,CAAzC,EAAmDC,CAAnD,EAA8D;AAC9D,EAAA,OAAS,CAACG,CAAV,CAAiBJ,CAAQ,CAAzB,GAA6B,CAACI,CAA9B,CAAqCH,CAAS,CAA9C;AACA;ADNO,SAASK,CAAhB,CAAyBD,CAAzB,EAA+B;AAC/B,EAAA,MAAQF,CAAR,GAAgBC,CAAhB,CAAuBC,CAAI,CAA3B;AACA,EAAA,OAAEF,CAAF,CAAQ,QAAR,CAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,GAAG,CAAhC,EACSA,CADT;AAEA;ADMO,SAASD,CAAhB,CAAoCF,CAApC,EAA8CC,CAA9C,EAAyDJ,CAAzD,EAAkE;AAClE,EAAA,MAAQC,CAAR,GAAeC,CAAf,CAAwCC,CAAxC,EAAkDC,CAAS,CAA3D,GAA+D,GAA/D;AACA,EAAA,OAASL,CAAT,CAA2BC,CAA3B,IAA2B,IAA3B,GAAA,KAAA,CAAA,GAA2BA,CAA3B,CAAoC,cAAc,CAAlD,CAAoDC,CAAI,CAAxD;AACA;;;;"}