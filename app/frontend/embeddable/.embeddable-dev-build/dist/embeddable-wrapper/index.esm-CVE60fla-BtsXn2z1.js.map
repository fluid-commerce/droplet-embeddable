{"version":3,"file":"index.esm-CVE60fla-BtsXn2z1.js","sources":["../embeddable-prepared-build/index.esm-CVE60fla.js"],"sourcesContent":["import { n as nt, r as reactExports } from \"./embeddable-entry-point-DfzYO-OW.js\";\n/*!\n * mergician\n * v2.0.2\n * https://jhildenbiddle.github.io/mergician/\n * (c) 2022-2024 John Hildenbiddle\n * MIT license\n */\nfunction countOccurrences(...arrays) {\n  const countObj = {};\n  arrays.forEach((array) => {\n    array.forEach((v) => {\n      countObj[v] = v in countObj ? ++countObj[v] : 1;\n    });\n  });\n  return countObj;\n}\nfunction getInAll(...arrays) {\n  return arrays.reduce(\n    (acc, curr) => acc.filter(Set.prototype.has, new Set(curr))\n  );\n}\nfunction getInMultiple(...arrays) {\n  const countObj = countOccurrences(...arrays);\n  return Object.keys(countObj).filter((v) => countObj[v] > 1);\n}\nfunction getNotInAll(...arrays) {\n  const countObj = countOccurrences(...arrays);\n  return Object.keys(countObj).filter((v) => countObj[v] < arrays.length);\n}\nfunction getNotInMultiple(...arrays) {\n  const countObj = countOccurrences(...arrays);\n  return Object.keys(countObj).filter((v) => countObj[v] === 1);\n}\nfunction getObjectKeys(obj, hoistEnumerable = false) {\n  const keys = Object.getOwnPropertyNames(obj);\n  if (hoistEnumerable) {\n    for (const key in obj) {\n      !keys.includes(key) && keys.push(key);\n    }\n  }\n  return keys;\n}\nfunction isObject(value) {\n  return typeof value === \"object\" && value !== null && !Array.isArray(value);\n}\nfunction isPropDescriptor(obj) {\n  if (!isObject(obj)) {\n    return false;\n  }\n  const hasFlagKey = [\"writable\", \"enumerable\", \"configurable\"].some(\n    (key) => key in obj\n  );\n  const hasMethod = [\"get\", \"set\"].some((key) => typeof obj[key] === \"function\");\n  const hasMethodKeys = [\"get\", \"set\"].every((key) => key in obj);\n  let isDescriptor = \"value\" in obj && hasFlagKey || hasMethod && (hasMethodKeys || hasFlagKey);\n  if (isDescriptor) {\n    const validKeys = [\n      \"configurable\",\n      \"get\",\n      \"set\",\n      \"enumerable\",\n      \"value\",\n      \"writable\"\n    ];\n    isDescriptor = Object.keys(obj).some((key) => !(key in validKeys));\n  }\n  return isDescriptor;\n}\n/**\n * @typedef {Object} MergicianOptions\n * @property {string[]} [onlyKeys] - Exclusive array of keys to be merged\n * (others are skipped)\n * @property {string[]} [skipKeys] - Array of keys to skip (others are\n * merged)\n * @property {boolean} [onlyCommonKeys=false] - Merge only keys found\n * in multiple objects (ignore single occurrence keys)\n * @property {boolean} [onlyUniversalKeys=false] - Merge only keys\n * found in all objects\n * @property {boolean} [skipCommonKeys=false] - Skip keys found in\n * multiple objects (merge only single occurrence keys)\n * @property {boolean} [skipUniversalKeys=false] - Skip keys found in\n * all objects (merge only common keys)\n * @property {boolean} [invokeGetters=false] - Invoke \"getter\" methods\n * and merge returned values\n * @property {boolean} [skipSetters=false] - Skip \"setter\" methods\n * during merge\n * @property {boolean} [appendArrays=false] - Merge array values at\n * the end of existing arrays\n * @property {boolean} [prependArrays=false] - Merge array values at\n * the beginning of existing arrays\n * @property {boolean} [dedupArrays=false] - Remove duplicate array\n * values in new merged object\n * @property {boolean|function} [sortArrays=false] - Sort array values\n * in new merged object\n * @property {boolean} [hoistEnumerable=false] - Merge enumerable\n * prototype properties as direct properties of merged object\n * @property {boolean} [hoistProto=false] - Merge custom prototype\n * properties as direct properties of merged object\n * @property {boolean} [skipProto=false] - Skip merging of custom\n * prototype properties\n * @property {filterCallback} [filter] - Callback used to conditionally merge\n * or skip a property. Return a \"truthy\" value to merge or a \"falsy\" value to\n * skip. Return no value to proceed according to other option values.\n * @property {beforeEachCallback} [beforeEach] - Callback used for\n * inspecting/modifying properties before merge. Return value is used as value\n * to merge.\n * @property {afterEachCallback} [afterEach] - Callback used for\n * inspecting/modifying properties after merge. Return value is used as merged\n * value.\n * @property {onCircularCallback} [onCircular] - Callback used for handling\n * circular object references during merge\n * @preserve\n */\n/**\n * @callback filterCallback\n * @param {callbackData} callbackData\n * @preserve\n */\n/**\n * @callback beforeEachCallback\n * @param {callbackData} callbackData\n * @preserve\n */\n/**\n * @callback afterEachCallback\n * @param {afterEachCallbackData} callbackData\n * @preserve\n */\n/**\n * @callback onCircularCallback\n * @param {callbackData} callbackData\n * @preserve\n */\n/**\n * @typedef {Object} callbackData\n * @property {number} depth - Nesting level of the key being processed\n * @property {string} key - Object key being processed\n * @property {object} srcObj - Object containing the source value\n * @property {any} srcVal - Source object’s property value\n * @property {object} targetObj - New merged object\n * @property {any} targetVal - New merged object’s current property value\n * @preserve\n */\n/**\n * @typedef {Object} afterEachCallbackData\n * @property {number} depth - Nesting level of the key being processed\n * @property {string} key - Object key being processed\n * @property {any} mergeVal - New merged value\n * @property {object} srcObj - Object containing the source value\n * @property {object} targetObj - New merged object\n * @preserve\n */\nvar defaults = {\n  // Keys\n  onlyKeys: [],\n  skipKeys: [],\n  onlyCommonKeys: false,\n  onlyUniversalKeys: false,\n  skipCommonKeys: false,\n  skipUniversalKeys: false,\n  // Values\n  invokeGetters: false,\n  skipSetters: false,\n  // Arrays\n  appendArrays: false,\n  prependArrays: false,\n  dedupArrays: false,\n  sortArrays: false,\n  // Prototype\n  hoistEnumerable: false,\n  hoistProto: false,\n  skipProto: false,\n  // Callbacks\n  filter: Function.prototype,\n  beforeEach: Function.prototype,\n  afterEach: Function.prototype,\n  onCircular: Function.prototype\n};\n/**\n * @description Deep (recursive) object merging with support for descriptor\n * values, accessor functions, custom prototypes, and advanced options for\n * customizing the merge process.\n *\n * @example\n * // Custom merge options\n * const mergedObj = mergician({\n *   // Options\n * })(obj1, obj2, obj3);\n *\n * // Custom merge function\n * const customMerge = mergician({\n *   // Options\n * });\n * const customMergeObj = customMerge(obj1, obj2, obj3);\n *\n * @overload\n * @param {MergicianOptions} options\n * @returns {function} New merge function with options set as defaults\n * @preserve\n */\n/**\n * @description Deep (recursive) object merging with support for descriptor\n * values, accessor functions, custom prototypes, and advanced options for\n * customizing the merge process.\n *\n * @example\n * // Clone with default options\n * const clonedObj = mergician({}, obj1);\n *\n * // Merge with default options\n * const mergedObj = mergician(obj1, obj2, obj3);\n *\n * @overload\n * @param {...object} objects\n * @returns {object} New merged object\n * @preserve\n */\n/**\n * @description Deep (recursive) object merging with support for descriptor\n * values, accessor functions, custom prototypes, and advanced options for\n * customizing the merge process.\n *\n * @example\n * // Clone with default options\n * const clonedObj = mergician({}, obj1);\n *\n * // Merge with default options\n * const mergedObj = mergician(obj1, obj2, obj3);\n *\n * @example\n * // Custom merge options\n * const mergedObj = mergician({\n *   // Options\n * })(obj1, obj2, obj3);\n *\n * // Custom merge function\n * const customMerge = mergician({\n *   // Options\n * });\n * const customMergeObj = customMerge(obj1, obj2, obj3);\n *\n * @param {MergicianOptions} optionsOrObject\n * @param {...object} [objects]\n * @returns {function|object} New merge function with options set as defaults\n * (single argument) or new merged object (multiple arguments)\n * @preserve\n */\nfunction mergician(optionsOrObject, ...objects) {\n  const options = arguments.length === 1 ? arguments[0] : {};\n  const settings = { ...defaults, ...options };\n  const dedupArrayMap = /* @__PURE__ */ new Map();\n  const sortArrayMap = /* @__PURE__ */ new Map();\n  const sortArrayFn = typeof settings.sortArrays === \"function\" ? settings.sortArrays : void 0;\n  const circularRefs = /* @__PURE__ */ new WeakMap();\n  let mergeDepth = 0;\n  function _getObjectKeys(obj) {\n    return getObjectKeys(obj, settings.hoistEnumerable);\n  }\n  function _mergician(...objects2) {\n    let mergeKeyList;\n    if (objects2.length > 1) {\n      if (settings.onlyCommonKeys) {\n        mergeKeyList = getInMultiple(\n          ...objects2.map((obj) => _getObjectKeys(obj))\n        );\n      } else if (settings.onlyUniversalKeys) {\n        mergeKeyList = getInAll(...objects2.map((obj) => _getObjectKeys(obj)));\n      } else if (settings.skipCommonKeys) {\n        mergeKeyList = getNotInMultiple(\n          ...objects2.map((obj) => _getObjectKeys(obj))\n        );\n      } else if (settings.skipUniversalKeys) {\n        mergeKeyList = getNotInAll(...objects2.map((obj) => _getObjectKeys(obj)));\n      }\n    }\n    if (!mergeKeyList && settings.onlyKeys.length) {\n      mergeKeyList = settings.onlyKeys;\n    }\n    if (mergeKeyList && mergeKeyList !== settings.onlyKeys && settings.onlyKeys.length) {\n      mergeKeyList = mergeKeyList.filter(\n        (key) => settings.onlyKeys.includes(key)\n      );\n    }\n    const newObjProps = objects2.reduce((targetObj, srcObj) => {\n      circularRefs.set(srcObj, targetObj);\n      let keys = mergeKeyList || _getObjectKeys(srcObj);\n      if (settings.skipKeys.length) {\n        keys = keys.filter((key) => settings.skipKeys.indexOf(key) === -1);\n      }\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const targetVal = targetObj[key];\n        const mergeDescriptor = {\n          configurable: true,\n          enumerable: true\n        };\n        if (key in srcObj === false) {\n          continue;\n        }\n        let isReturnVal = false;\n        let mergeVal = srcObj[key];\n        const srcDescriptor = Object.getOwnPropertyDescriptor(srcObj, key);\n        const isSetterOnly = srcDescriptor && typeof srcDescriptor.set === \"function\" && typeof srcDescriptor.get !== \"function\";\n        if (isSetterOnly) {\n          if (!settings.skipSetters) {\n            Object.defineProperty(targetObj, key, srcDescriptor);\n          }\n          continue;\n        }\n        if (settings.filter !== defaults.filter) {\n          const returnVal = settings.filter({\n            depth: mergeDepth,\n            key,\n            srcObj,\n            srcVal: mergeVal,\n            targetObj,\n            targetVal\n          });\n          if (returnVal !== void 0 && !returnVal) {\n            continue;\n          }\n        }\n        if (settings.beforeEach !== defaults.beforeEach) {\n          const returnVal = settings.beforeEach({\n            depth: mergeDepth,\n            key,\n            srcObj,\n            srcVal: mergeVal,\n            targetObj,\n            targetVal\n          });\n          if (returnVal !== void 0) {\n            isReturnVal = true;\n            mergeVal = returnVal;\n          }\n        }\n        if (typeof mergeVal === \"object\" && mergeVal !== null) {\n          if (circularRefs.has(srcObj[key])) {\n            const returnVal = settings.onCircular({\n              depth: mergeDepth,\n              key,\n              srcObj,\n              srcVal: srcObj[key],\n              targetObj,\n              targetVal\n            });\n            if (returnVal === void 0) {\n              mergeVal = circularRefs.get(srcObj[key]);\n              targetObj[key] = mergeVal;\n              continue;\n            }\n            isReturnVal = true;\n            mergeVal = returnVal;\n          }\n        }\n        if (Array.isArray(mergeVal)) {\n          mergeVal = [...mergeVal];\n          if (Array.isArray(targetVal)) {\n            if (settings.appendArrays) {\n              mergeVal = [...targetVal, ...mergeVal];\n            } else if (settings.prependArrays) {\n              mergeVal = [...mergeVal, ...targetVal];\n            }\n          }\n          if (settings.dedupArrays) {\n            if (settings.afterEach !== defaults.afterEach) {\n              mergeVal = [...new Set(mergeVal)];\n            } else {\n              const keyArray = dedupArrayMap.get(targetObj);\n              if (keyArray && !keyArray.includes(key)) {\n                keyArray.push(key);\n              } else {\n                dedupArrayMap.set(targetObj, [key]);\n              }\n            }\n          }\n          if (settings.sortArrays) {\n            if (settings.afterEach !== defaults.afterEach) {\n              mergeVal = mergeVal.sort(sortArrayFn);\n            } else {\n              const keyArray = sortArrayMap.get(targetObj);\n              if (keyArray && !keyArray.includes(key)) {\n                keyArray.push(key);\n              } else {\n                sortArrayMap.set(targetObj, [key]);\n              }\n            }\n          }\n        } else if (mergeVal instanceof Date) {\n          mergeVal = new Date(mergeVal);\n        } else if (isObject(mergeVal) && (!isReturnVal || !isPropDescriptor(mergeVal))) {\n          mergeDepth++;\n          if (isObject(targetVal)) {\n            mergeVal = _mergician(targetVal, mergeVal);\n          } else {\n            mergeVal = _mergician(mergeVal);\n          }\n          mergeDepth--;\n        }\n        if (settings.afterEach !== defaults.afterEach) {\n          const returnVal = settings.afterEach({\n            depth: mergeDepth,\n            key,\n            mergeVal,\n            srcObj,\n            targetObj\n          });\n          if (returnVal !== void 0) {\n            isReturnVal = true;\n            mergeVal = returnVal;\n          }\n        }\n        if (isReturnVal) {\n          const returnDescriptor = isPropDescriptor(mergeVal) ? mergeVal : {\n            configurable: true,\n            enumerable: true,\n            value: mergeVal,\n            writable: true\n          };\n          Object.defineProperty(targetObj, key, returnDescriptor);\n          continue;\n        }\n        if (srcDescriptor) {\n          const { configurable, enumerable, get, set, writable } = srcDescriptor;\n          Object.assign(mergeDescriptor, {\n            configurable,\n            enumerable\n          });\n          if (typeof get === \"function\") {\n            if (settings.invokeGetters) {\n              mergeDescriptor.value = mergeVal;\n            } else {\n              mergeDescriptor.get = get;\n            }\n          }\n          if (!settings.skipSetters && typeof set === \"function\" && !Object.hasOwnProperty.call(mergeDescriptor, \"value\")) {\n            mergeDescriptor.set = set;\n          }\n          if (!mergeDescriptor.get && !mergeDescriptor.set) {\n            mergeDescriptor.writable = Boolean(writable);\n          }\n        }\n        if (!mergeDescriptor.get && !mergeDescriptor.set && !(\"value\" in mergeDescriptor)) {\n          mergeDescriptor.value = mergeVal;\n          mergeDescriptor.writable = srcDescriptor && \"writable\" in srcDescriptor ? srcDescriptor.writable : true;\n        }\n        Object.defineProperty(targetObj, key, mergeDescriptor);\n      }\n      return targetObj;\n    }, {});\n    for (const [obj, keyArray] of dedupArrayMap.entries()) {\n      for (const key of keyArray) {\n        const propDescriptor = Object.getOwnPropertyDescriptor(obj, key);\n        const { configurable, enumerable, writable } = propDescriptor;\n        Object.defineProperty(obj, key, {\n          configurable,\n          enumerable,\n          value: [...new Set(obj[key])],\n          writable: writable !== void 0 ? writable : true\n        });\n      }\n    }\n    for (const [obj, keyArray] of sortArrayMap.entries()) {\n      for (const key of keyArray) {\n        obj[key].sort(sortArrayFn);\n      }\n    }\n    let newObj = newObjProps;\n    if (!settings.skipProto) {\n      const customProtos = objects2.reduce((protosArr, obj) => {\n        const proto = Object.getPrototypeOf(obj);\n        if (proto && proto !== Object.prototype) {\n          protosArr.push(proto);\n        }\n        return protosArr;\n      }, []);\n      if (customProtos.length) {\n        const newObjProto = _mergician(...customProtos);\n        if (settings.hoistProto) {\n          newObj = _mergician(newObjProto, newObjProps);\n        } else {\n          newObj = Object.create(\n            newObjProto,\n            Object.getOwnPropertyDescriptors(newObjProps)\n          );\n        }\n      }\n    }\n    return newObj;\n  }\n  if (arguments.length === 1) {\n    return function(...objects2) {\n      if (arguments.length === 1) {\n        return mergician({ ...settings, ...objects2[0] });\n      } else {\n        return _mergician(...objects2);\n      }\n    };\n  } else {\n    return _mergician(...arguments);\n  }\n}\nconst DEFAULT_LOCALE = \"en-US\";\nconst normalizeEntities = (entities, { mapFn = (x) => x, filterFn = Boolean }) => {\n  if (!entities)\n    return void 0;\n  const filtered = entities.filter(filterFn);\n  if (filtered.length === 0)\n    return void 0;\n  return filtered.map(mapFn);\n};\nconst getName = (x) => x.name;\nconst checkTimeDimension = (timeDimension) => Boolean(timeDimension && timeDimension.dimension && (timeDimension.granularity || timeDimension.dateRange));\nconst validateOrderBy = (orderByParam, dimensions, measures, timeDimensions) => {\n  const unknownDimensionsOrMeasures = [];\n  const dimensionAndMeasureNames = [\n    ...[...measures, ...dimensions].filter(Boolean).map((x) => x.name),\n    ...timeDimensions.filter(Boolean).map((x) => x.dimension).filter(Boolean)\n  ];\n  for (const orderBy of orderByParam) {\n    const { name } = orderBy.property;\n    if (dimensionAndMeasureNames.includes(name))\n      continue;\n    unknownDimensionsOrMeasures.push(name);\n  }\n  return unknownDimensionsOrMeasures;\n};\nconst createBuiltInType = (name, typeConfig = {}) => ({\n  __embeddableType: \"built-in\",\n  toString: () => name,\n  typeConfig: {\n    label: name,\n    optionLabel: () => name,\n    ...typeConfig\n  }\n});\nconst validateFilter = (filter) => {\n  if (!filter.property)\n    return \"filter property must be set\";\n  if (!filter.operator)\n    return \"filter operator must be set\";\n};\nconst convertFilterValue = (value) => {\n  if (value == null || typeof value === \"string\" || typeof value === \"boolean\" || typeof value === \"number\" || value instanceof Date || Array.isArray(value)) {\n    return value;\n  }\n  if (value == null ? void 0 : value.relativeTimeString)\n    return value == null ? void 0 : value.relativeTimeString;\n  if (Object.hasOwn(value, \"date\"))\n    return value == null ? void 0 : value.date;\n  if (Object.hasOwn(value, \"from\") || Object.hasOwn(value, \"to\")) {\n    const timeRange = value;\n    return [timeRange == null ? void 0 : timeRange.from, timeRange == null ? void 0 : timeRange.to].filter(Boolean);\n  }\n};\nfunction deduplicateEntitiesByName(entities) {\n  if (!entities || entities.length === 0)\n    return [];\n  const seen = /* @__PURE__ */ new Set();\n  return entities.filter((entity) => {\n    if (seen.has(entity.name)) {\n      return false;\n    }\n    seen.add(entity.name);\n    return true;\n  });\n}\nconst DIMENSION_TYPE = \"dimension\";\nconst MEASURE_TYPE = \"measure\";\nconst deepFlattenSelect = (input) => {\n  if (Array.isArray(input)) {\n    return input.flatMap(deepFlattenSelect);\n  }\n  return [input];\n};\nconst processSelectParam = (selectParam) => {\n  var _a;\n  const result = {\n    dimensions: [],\n    measures: [],\n    timeDimensions: []\n  };\n  if (!selectParam) {\n    return result;\n  }\n  const flat = deepFlattenSelect(selectParam).filter(Boolean);\n  if (!flat.length) {\n    result.error = \"select must not be empty\";\n    return result;\n  }\n  for (const ent of flat) {\n    const isValidEntity = typeof ent === \"object\" && (isDimensionOrMeasure(ent) || isTimeDimension(ent));\n    if (!isValidEntity) {\n      result.error = \"select must only contain Dimension, Measure or TimeDimension objects\";\n      return result;\n    }\n    if (isTimeDimension(ent)) {\n      result.timeDimensions.push(ent);\n    } else if (isDimension(ent)) {\n      const dimension = ent;\n      const granularity = (_a = dimension.inputs) == null ? void 0 : _a.granularity;\n      if (dimension.nativeType === \"time\" && granularity) {\n        result.timeDimensions.push({\n          dimension: dimension.name,\n          granularity,\n          title: dimension.title\n        });\n      } else {\n        result.dimensions.push(dimension);\n      }\n    } else if (isMeasure(ent)) {\n      result.measures.push(ent);\n    } else {\n      const type = \"__type__\" in ent ? ent.__type__ : typeof ent;\n      result.error = `Unknown __type__ in select: ${type}`;\n      return result;\n    }\n  }\n  return result;\n};\nfunction validateLegacyFields(request) {\n  var _a, _b;\n  if (((_a = request.measures) == null ? void 0 : _a.length) > 0 && request.measures.some((m) => (m == null ? void 0 : m.__type__) !== MEASURE_TYPE)) {\n    return \"Unexpected type passed to `measures` in loadData function.  Expected an array of type Measure.\";\n  }\n  if (((_b = request.dimensions) == null ? void 0 : _b.length) > 0 && request.dimensions.some((m) => (m == null ? void 0 : m.__type__) !== DIMENSION_TYPE)) {\n    return \"Unexpected type passed to `dimensions` in loadData function.  Expected an array of type Dimension.\";\n  }\n  return null;\n}\nfunction processApiSelection(request) {\n  const result = {\n    dimensions: [],\n    measures: [],\n    timeDimensions: [],\n    usingSelect: false\n  };\n  if (request.select) {\n    result.usingSelect = true;\n    const selectResult = processSelectParam(request.select);\n    if (selectResult.error) {\n      result.error = selectResult.error;\n      return result;\n    }\n    result.dimensions = selectResult.dimensions;\n    result.measures = selectResult.measures;\n    result.timeDimensions = selectResult.timeDimensions;\n  } else {\n    const legacyError = validateLegacyFields(request);\n    if (legacyError) {\n      result.error = legacyError;\n      return result;\n    }\n    result.dimensions = normalizeEntities(request.dimensions, { mapFn: (x) => x }) ?? [];\n    result.measures = normalizeEntities(request.measures, { mapFn: (x) => x }) ?? [];\n    result.timeDimensions = normalizeEntities(request.timeDimensions, { filterFn: Boolean }) ?? [];\n  }\n  result.dimensions = deduplicateEntitiesByName(result.dimensions);\n  result.measures = deduplicateEntitiesByName(result.measures);\n  return result;\n}\nfunction validateOrderByLogic(orderBy, dimensions, measures, timeDimensions) {\n  const unknownDimensionsOrMeasures = validateOrderBy(orderBy ?? [], dimensions, measures, timeDimensions);\n  if (unknownDimensionsOrMeasures.length > 0) {\n    return `Cannot order by ${unknownDimensionsOrMeasures.join(\", \")} as no such ${unknownDimensionsOrMeasures.length === 1 ? \"property\" : \"properties\"} has been loaded.`;\n  }\n  return null;\n}\nfunction validateFiltersLogic(filters) {\n  if (filters) {\n    const errors = filters.map((f, index) => ({\n      index,\n      message: validateFilter(f)\n    })).filter((e) => !!e.message);\n    if (errors.length) {\n      return errors.map((e) => `filter[${e.index}] is not valid: ${e.message}`).join(\"\\n\");\n    }\n  }\n  return null;\n}\nfunction buildQueryObject(request, dimensions, measures, timeDimensions, order) {\n  var _a;\n  return {\n    inputName: request.from.inputName,\n    datasetId: request.from.datasetId,\n    embeddableId: request.from.embeddableId,\n    dimensions: normalizeEntities(dimensions, { mapFn: getName }) ?? [],\n    measures: normalizeEntities(measures, { mapFn: getName }) ?? [],\n    order,\n    timeDimensions: normalizeEntities(timeDimensions, { filterFn: checkTimeDimension }) ?? [],\n    offset: request.offset,\n    limit: request.limit,\n    variableValues: request.from.variableValues,\n    filters: (_a = request.filters) == null ? void 0 : _a.map((f) => ({\n      member: f.property.name,\n      operator: f.operator,\n      values: convertFilterValue(f.value)\n    }))\n  };\n}\nconst LOAD_DATA_EVENT = \"embeddable-event:load-data\";\nconst FilterOperator = {\n  equals: \"equals\",\n  notEquals: \"notEquals\",\n  contains: \"contains\",\n  notContains: \"notContains\",\n  startsWith: \"startsWith\",\n  endsWith: \"endsWith\",\n  gt: \"gt\",\n  gte: \"gte\",\n  lt: \"lt\",\n  lte: \"lte\",\n  notNull: \"set\",\n  isNull: \"notSet\",\n  inDateRange: \"inDateRange\",\n  notInDateRange: \"notInDateRange\",\n  beforeDate: \"beforeDate\",\n  afterDate: \"afterDate\",\n  measureFilter: \"measureFilter\"\n};\nconst isLoadDataParams = (ldp) => typeof ldp === \"object\" && ldp && \"requestParams\" in ldp && \"dataLoader\" in ldp;\nconst executeDataRequest = (triggerElement, request, componentId, propertyName) => {\n  if (!request.from)\n    return \"No dataset selected\";\n  if (request.select && (request.dimensions || request.measures || request.timeDimensions)) {\n    return \"loadData expects you to use either dimensions, timeDimensions and measures, or select. You cannot use both together.\";\n  }\n  const apiResult = processApiSelection(request);\n  if (apiResult.error) {\n    return apiResult.error;\n  }\n  const { dimensions, measures, timeDimensions } = apiResult;\n  const dimensionsOrMeasuresDefined = dimensions.length || measures.length || timeDimensions.length;\n  if (!dimensionsOrMeasuresDefined) {\n    return \"At least a dimension or a measure should be selected.\";\n  }\n  const orderByError = validateOrderByLogic(request.orderBy, dimensions, measures, timeDimensions);\n  if (orderByError) {\n    return orderByError;\n  }\n  const filterError = validateFiltersLogic(request.filters);\n  if (filterError) {\n    return filterError;\n  }\n  const order = normalizeEntities(request.orderBy, {\n    mapFn: (o) => [o.property.name, o.direction]\n  });\n  const query = buildQueryObject(request, dimensions, measures, timeDimensions, order);\n  triggerElement.dispatchEvent(new CustomEvent(LOAD_DATA_EVENT, {\n    bubbles: true,\n    composed: true,\n    detail: {\n      query,\n      componentId,\n      propertyName\n    }\n  }));\n};\nconst loadData = (requestParams) => ({\n  requestParams,\n  dataLoader: executeDataRequest\n});\nconst isDimension = (dimensionOrMeasure) => (dimensionOrMeasure == null ? void 0 : dimensionOrMeasure.__type__) === DIMENSION_TYPE;\nconst isMeasure = (dimensionOrMeasure) => (dimensionOrMeasure == null ? void 0 : dimensionOrMeasure.__type__) === MEASURE_TYPE;\nconst isTimeDimension = (dimensionOrMeasure) => \"dimension\" in (dimensionOrMeasure ?? {}) && !(\"__type__\" in dimensionOrMeasure);\nconst isDimensionOrMeasure = (dimensionOrMeasure) => isDimension(dimensionOrMeasure) || isMeasure(dimensionOrMeasure);\nconst getOperationObject = (operation, value) => ({\n  operation,\n  value: value ?? null,\n  __embeddableVariableMeta: true\n});\nconst Value = {\n  noFilter: () => getOperationObject(\"NO_FILTER\"),\n  of: (value) => getOperationObject(\"VALUE\", value)\n};\nconst UPDATE_VALUE_EVENT = \"embeddable:value:changed\";\nconst setValue = (triggerElement, value, componentId, eventName) => {\n  const event = new CustomEvent(UPDATE_VALUE_EVENT, {\n    bubbles: true,\n    composed: true,\n    detail: {\n      componentId,\n      value,\n      eventName\n    }\n  });\n  triggerElement.dispatchEvent(event);\n};\nconst getBundleHash$1 = () => globalThis.__EMBEDDABLE_BUNDLE_HASH__ ?? null;\nconst defineType = (typeName, typeConfig) => {\n  if (ALL_NATIVE_TYPES.includes(typeName)) {\n    throw new Error(`Type ${typeName} is part of the nativeTypes and cannot be defined`, { cause: \"sdk\" });\n  }\n  const type = {\n    __embeddableType: \"custom\",\n    toString: () => typeName,\n    typeConfig\n  };\n  const bundleHash = getBundleHash$1();\n  globalThis.__EMBEDDABLE__ = globalThis.__EMBEDDABLE__ || {};\n  const embeddable = bundleHash ? globalThis.__EMBEDDABLE__[bundleHash] = globalThis.__EMBEDDABLE__[bundleHash] || {} : globalThis.__EMBEDDABLE__;\n  embeddable.types = embeddable.types || {};\n  embeddable.types = {\n    ...embeddable.types,\n    [typeName]: {\n      name: typeName,\n      ...typeConfig\n    }\n  };\n  return type;\n};\nconst STRING = \"string\";\nconst NUMBER = \"number\";\nconst BOOLEAN = \"boolean\";\nconst TIME = \"time\";\nconst TIME_RANGE = \"timeRange\";\nconst GRANULARITY = \"granularity\";\nconst DATASET = \"dataset\";\nconst MEASURE = \"measure\";\nconst DIMENSION = \"dimension\";\nconst DIMENSION_OR_MEASURE = \"dimensionOrMeasure\";\nconst DEFAULT_NATIVE_TYPES = [\n  STRING,\n  NUMBER,\n  BOOLEAN,\n  TIME,\n  TIME_RANGE,\n  GRANULARITY\n];\nconst ALL_NATIVE_TYPES = [\n  ...DEFAULT_NATIVE_TYPES,\n  DATASET,\n  MEASURE,\n  DIMENSION,\n  DIMENSION_OR_MEASURE\n];\nconst MEASURE_TYPE_STRING = \"string\";\nconst MEASURE_TYPE_TIME = \"time\";\nconst MEASURE_TYPE_BOOLEAN = \"boolean\";\nconst MEASURE_TYPE_NUMBER = \"number\";\nconst MEASURE_TYPE_COUNT = \"count\";\nconst MEASURE_TYPE_COUNT_DISTINCT = \"count_distinct\";\nconst MEASURE_TYPE_COUNT_DISTINCT_APPROX = \"count_distinct_approx\";\nconst MEASURE_TYPE_SUM = \"sum\";\nconst MEASURE_TYPE_AVG = \"avg\";\nconst MEASURE_TYPE_MIN = \"min\";\nconst MEASURE_TYPE_MAX = \"max\";\nconst MEASURE_TYPES = [\n  MEASURE_TYPE_STRING,\n  MEASURE_TYPE_TIME,\n  MEASURE_TYPE_BOOLEAN,\n  MEASURE_TYPE_NUMBER,\n  MEASURE_TYPE_COUNT,\n  MEASURE_TYPE_COUNT_DISTINCT,\n  MEASURE_TYPE_COUNT_DISTINCT_APPROX,\n  MEASURE_TYPE_SUM,\n  MEASURE_TYPE_AVG,\n  MEASURE_TYPE_MIN,\n  MEASURE_TYPE_MAX\n];\nconst DIMENSION_TYPE_STRING = \"string\";\nconst DIMENSION_TYPE_NUMBER = \"number\";\nconst DIMENSION_TYPE_BOOLEAN = \"boolean\";\nconst DIMENSION_TYPE_GEO = \"geo\";\nconst DIMENSION_TYPE_TIME = \"time\";\nconst DIMENSION_TYPES = [\n  DIMENSION_TYPE_STRING,\n  DIMENSION_TYPE_NUMBER,\n  DIMENSION_TYPE_BOOLEAN,\n  DIMENSION_TYPE_GEO,\n  DIMENSION_TYPE_TIME\n];\nconst DIMENSION_OR_MEASURE_TYPES = [\n  ...DIMENSION_TYPES,\n  ...MEASURE_TYPES\n];\nconst getBundleHash = () => globalThis.__EMBEDDABLE_BUNDLE_HASH__ ?? null;\nconst defineOption = (type, option) => {\n  var _a, _b, _c, _d;\n  const bundleHash = getBundleHash();\n  globalThis.__EMBEDDABLE__ ?? (globalThis.__EMBEDDABLE__ = {});\n  const embeddable = bundleHash ? (_a = globalThis.__EMBEDDABLE__)[bundleHash] ?? (_a[bundleHash] = {}) : globalThis.__EMBEDDABLE__;\n  if (typeof type === \"string\") {\n    embeddable.nativeTypes = embeddable.nativeTypes || {};\n    embeddable.nativeTypes[type] = embeddable.nativeTypes[type] || {};\n    (_b = embeddable.nativeTypes[type]).options ?? (_b.options = []);\n    embeddable.nativeTypes[type].options.push(option);\n  } else {\n    const typeName = type.toString();\n    if (!((_c = embeddable == null ? void 0 : embeddable.types) == null ? void 0 : _c[typeName]))\n      return;\n    (_d = embeddable.types[typeName]).options ?? (_d.options = []);\n    embeddable.types[typeName].options.push(option);\n  }\n};\nconst StringType = createBuiltInType(\"string\", {\n  transform: (value) => value,\n  optionLabel: (value) => Array.isArray(value) ? `[${value.map((v) => `\"${v}\"`).join(\",\")}]` : `\"${value}\"`\n});\nconst NumberType = createBuiltInType(\"number\", {\n  transform: (value) => Array.isArray(value) ? value : value ? Number(value) : value,\n  optionLabel: (value) => Array.isArray(value) ? `[${value.join(\",\")}]` : (value == null ? void 0 : value.toLocaleString(DEFAULT_LOCALE)) ?? \"\"\n});\nconst BooleanType = createBuiltInType(\"boolean\", {\n  transform: (value) => value === \"true\" || value === true,\n  optionLabel: (value) => value ? \"true\" : \"false\"\n});\nconst TimeType = createBuiltInType(\"time\", {\n  transform: (value) => {\n    const date = (value == null ? void 0 : value.date) ? new Date(value.date) : void 0;\n    const isValid = date && date.toString() !== \"Invalid Date\";\n    return {\n      date: isValid ? date : void 0,\n      relativeTimeString: value == null ? void 0 : value.relativeTimeString\n    };\n  },\n  optionLabel: (value) => {\n    var _a;\n    if (!value)\n      return \"\";\n    if (value == null ? void 0 : value.date) {\n      return ((_a = value.date) == null ? void 0 : _a.toLocaleDateString(DEFAULT_LOCALE)) ?? value.date.toLocaleString();\n    }\n    return value.relativeTimeString;\n  }\n});\nconst TimeRangeType = createBuiltInType(\"timeRange\", {\n  transform: (value) => {\n    if (!value)\n      return void 0;\n    const [from, to] = [value == null ? void 0 : value.from, value == null ? void 0 : value.to];\n    const fromDate = new Date(from);\n    const toDate = new Date(to);\n    return {\n      from: fromDate.toString() !== \"Invalid Date\" ? fromDate : void 0,\n      to: toDate.toString() !== \"Invalid Date\" ? toDate : void 0,\n      relativeTimeString: value == null ? void 0 : value.relativeTimeString\n    };\n  },\n  optionLabel: (value) => {\n    var _a, _b, _c, _d;\n    if (!value)\n      return \"\";\n    if ((value == null ? void 0 : value.from) && (value == null ? void 0 : value.to)) {\n      return `${((_a = value.from) == null ? void 0 : _a.toLocaleDateString(DEFAULT_LOCALE)) ?? ((_b = value.from) == null ? void 0 : _b.toLocaleString())},${((_c = value.to) == null ? void 0 : _c.toLocaleDateString(DEFAULT_LOCALE)) ?? ((_d = value.to) == null ? void 0 : _d.toLocaleString())}`;\n    }\n    return value == null ? void 0 : value.relativeTimeString;\n  }\n});\nconst GranularityType = createBuiltInType(\"granularity\", {\n  transform: (value) => value,\n  optionLabel: (value) => value\n});\nconst DatasetType = createBuiltInType(\"dataset\");\nconst MeasureType = createBuiltInType(\"measure\");\nconst DimensionType = createBuiltInType(\"dimension\");\nconst DimensionOrMeasureType = createBuiltInType(\"dimensionOrMeasure\");\nvar nativeTypes = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  BooleanType,\n  DatasetType,\n  DimensionOrMeasureType,\n  DimensionType,\n  GranularityType,\n  MeasureType,\n  NumberType,\n  StringType,\n  TimeRangeType,\n  TimeType\n});\nconst defineTheme = (parentTheme, childTheme) => {\n  return mergician(parentTheme, childTheme);\n};\nconst EmbeddableStateContext = nt.createContext({});\nconst useEmbeddableState = (initialState = {}) => {\n  const ctx = nt.useContext(EmbeddableStateContext);\n  nt.useEffect(() => {\n    if (Array.isArray(ctx) && typeof ctx[1] === \"function\") {\n      ctx[1](initialState);\n    }\n  }, [JSON.stringify(initialState)]);\n  return ctx;\n};\nconst EmbeddableThemeContext = nt.createContext({});\nconst useTheme = () => {\n  return nt.useContext(EmbeddableThemeContext);\n};\nfunction cleanInputsWithGranularity(obj) {\n  if (!obj || !(\"inputs\" in obj))\n    return obj;\n  const { inputs, ...rest } = obj;\n  if (typeof inputs === \"object\" && \"granularity\" in inputs) {\n    return { ...rest, inputs: { granularity: inputs.granularity } };\n  }\n  return rest;\n}\nconst cleanupRequestParams = (requestParams) => {\n  return {\n    ...requestParams,\n    dimensions: Array.isArray(requestParams.dimensions) ? requestParams.dimensions.map(cleanInputsWithGranularity) : requestParams.dimensions,\n    measures: Array.isArray(requestParams.measures) ? requestParams.measures.map(cleanInputsWithGranularity) : requestParams.measures,\n    select: Array.isArray(requestParams.select) ? requestParams.select.map((item) => Array.isArray(item) ? item.map(cleanInputsWithGranularity) : cleanInputsWithGranularity(item)) : requestParams.select,\n    orderBy: Array.isArray(requestParams.orderBy) ? requestParams.orderBy.map((item) => ({\n      ...item,\n      property: cleanInputsWithGranularity(item.property)\n    })) : requestParams.orderBy,\n    filters: Array.isArray(requestParams.filters) ? requestParams.filters.map((filter) => ({\n      ...filter,\n      property: cleanInputsWithGranularity(filter.property)\n    })) : requestParams.filters\n  };\n};\nconst UPDATE_CLIENT_CONTEXT_EVENT_NAME = \"embeddable-event:update-client-context\";\nconst UPDATE_PROPS_EVENT_NAME = \"embeddable-event:update-props\";\nconst RELOAD_DATASET_EVENT_NAME = \"embeddable-event:reload-dataset\";\nconst LOAD_DATA_RESULT_EVENT_NAME = \"embeddable-event:load-data-result\";\nconst UPDATE_THEME_EVENT_NAME = \"embeddable-event:update-theme\";\nconst ReducerActionTypes = {\n  loading: \"loading\",\n  error: \"error\",\n  data: \"data\"\n};\nconst reducer = (state, action) => {\n  var _a;\n  switch (action.type) {\n    case ReducerActionTypes.loading: {\n      return {\n        ...state,\n        [action.inputName]: {\n          data: (_a = state[action.inputName]) == null ? void 0 : _a.data,\n          isLoading: true\n        }\n      };\n    }\n    case ReducerActionTypes.data: {\n      return {\n        ...state,\n        [action.inputName]: { isLoading: false, data: action.payload }\n      };\n    }\n    case ReducerActionTypes.error: {\n      return {\n        ...state,\n        [action.inputName]: {\n          isLoading: false,\n          error: action.payload.message || action.payload\n        }\n      };\n    }\n  }\n  return state;\n};\nconst createInitialLoadersState = (dataLoaders) => Object.keys(dataLoaders).reduce((loaderState, loaderKey) => ({\n  ...loaderState,\n  [loaderKey]: { isLoading: true }\n}), {});\nconst deserializeProps = (props, meta) => Object.fromEntries(Object.entries(props).map(([propName, propValue]) => {\n  var _a, _b, _c, _d, _e;\n  const inputPropConfig = (_a = meta.inputs) == null ? void 0 : _a.find((config) => config.name === propName);\n  const deserialize = typeof (inputPropConfig == null ? void 0 : inputPropConfig.type) === \"string\" ? (_c = (_b = Object.values(nativeTypes).find((type) => type.toString() === (inputPropConfig == null ? void 0 : inputPropConfig.type))) == null ? void 0 : _b.typeConfig) == null ? void 0 : _c.transform : (_e = (_d = inputPropConfig == null ? void 0 : inputPropConfig.type) == null ? void 0 : _d.typeConfig) == null ? void 0 : _e.transform;\n  return [propName, (deserialize == null ? void 0 : deserialize(propValue)) ?? propValue];\n}));\nconst getInputValuesFromMeta = (meta) => {\n  let inputValues = {};\n  (meta.inputs || []).forEach((input) => {\n    inputValues = {\n      ...inputValues,\n      [input.name]: input.defaultValue ?? null\n    };\n  });\n  return inputValues;\n};\nfunction defineComponent(InnerComponent, meta, config = {}) {\n  function EmbeddableWrapper({ propsUpdateListener, clientContext, embeddableTheme, ...props }) {\n    const [propsProxy, setPropsProxy] = reactExports.useState(props);\n    const [clientContextProxy, setClientContextProxy] = reactExports.useState(clientContext);\n    const embeddableState = reactExports.useState();\n    const [calculatedOverridableProps, setCalculatedOverridableProps] = reactExports.useState(embeddableTheme ?? {});\n    const { componentId } = props;\n    const loadDataResultEventName = `${LOAD_DATA_RESULT_EVENT_NAME}:${componentId}`;\n    const propsUpdateEventHandler = ({ detail }) => setPropsProxy(detail);\n    const clientContextUpdateEventHandler = ({ detail }) => setClientContextProxy(detail);\n    const themeUpdateEventHandler = ({ detail }) => setCalculatedOverridableProps(detail);\n    reactExports.useEffect(() => {\n      const notifyDevtoolListener = ({ detail }) => {\n        var _a;\n        (_a = window.__EMBEDDABLE_DEVTOOLS__) == null ? void 0 : _a.notifyPropsUpdated(componentId, meta, propsProxy, detail);\n      };\n      propsUpdateListener.addEventListener(UPDATE_PROPS_EVENT_NAME, notifyDevtoolListener);\n      return () => propsUpdateListener.removeEventListener(UPDATE_PROPS_EVENT_NAME, notifyDevtoolListener);\n    }, [propsProxy]);\n    reactExports.useEffect(() => {\n      propsUpdateListener.addEventListener(UPDATE_CLIENT_CONTEXT_EVENT_NAME, clientContextUpdateEventHandler);\n      propsUpdateListener.addEventListener(UPDATE_PROPS_EVENT_NAME, propsUpdateEventHandler);\n      propsUpdateListener.addEventListener(UPDATE_THEME_EVENT_NAME, themeUpdateEventHandler);\n      const updatePropsEvent = new CustomEvent(\"embeddable-event:update-props-listen\", {\n        detail: { componentId }\n      });\n      window.dispatchEvent(updatePropsEvent);\n      const updateClientContextEvent = new CustomEvent(\"embeddable-event:update-client-context-listen\", {\n        detail: { componentId }\n      });\n      window.dispatchEvent(updateClientContextEvent);\n      return () => {\n        propsUpdateListener.removeEventListener(UPDATE_CLIENT_CONTEXT_EVENT_NAME, clientContextUpdateEventHandler);\n        propsUpdateListener.removeEventListener(UPDATE_PROPS_EVENT_NAME, propsUpdateEventHandler);\n      };\n    }, []);\n    const { extendedProps, dataLoaders } = reactExports.useMemo(() => {\n      var _a;\n      return Object.entries({\n        ...getInputValuesFromMeta(meta),\n        ...(_a = config == null ? void 0 : config.props) == null ? void 0 : _a.call(config, deserializeProps(propsProxy, meta), embeddableState, clientContextProxy)\n      }).reduce((acc, [key, value]) => {\n        if (isLoadDataParams(value)) {\n          acc.dataLoaders[key] = value;\n        } else {\n          acc.extendedProps[key] = value;\n        }\n        return acc;\n      }, { extendedProps: {}, dataLoaders: {} });\n    }, [propsProxy, config == null ? void 0 : config.props, embeddableState[0], clientContextProxy]);\n    const [loadersState, dispatch] = reactExports.useReducer(reducer, dataLoaders, createInitialLoadersState);\n    const handleDataLoaded = (inputName, data) => dispatch({ type: ReducerActionTypes.data, inputName, payload: data });\n    const handleError = (inputName, error) => dispatch({ type: ReducerActionTypes.error, inputName, payload: error });\n    const reloadDataset = (inputName, params) => {\n      dispatch({ type: ReducerActionTypes.loading, inputName });\n      const error = params.dataLoader(propsUpdateListener, params.requestParams, componentId, inputName);\n      if (error)\n        handleError(inputName, error);\n    };\n    const handleLoadDataResult = (ev) => {\n      var _a;\n      (_a = window.__EMBEDDABLE_DEVTOOLS__) == null ? void 0 : _a.notifyDataLoaded(componentId, meta, ev.detail);\n      if (ev.detail.isSuccess) {\n        handleDataLoaded(ev.detail.propertyName, ev.detail.data);\n      } else {\n        handleError(ev.detail.propertyName, ev.detail.error);\n      }\n    };\n    const variableChangedEventHandler = ({ detail }) => {\n      var _a;\n      const dataLoadersEntries = Object.entries(dataLoaders).filter(([_, params]) => params.requestParams.from.datasetId === detail.datasetId);\n      (_a = window.__EMBEDDABLE_DEVTOOLS__) == null ? void 0 : _a.notifyVariableUpdated(componentId, meta, detail, Object.fromEntries(dataLoadersEntries));\n      dataLoadersEntries.forEach(([inputName, params]) => reloadDataset(inputName, params));\n    };\n    reactExports.useEffect(() => {\n      Object.entries(dataLoaders).forEach(([inputName, params]) => reloadDataset(inputName, params));\n      window.addEventListener(RELOAD_DATASET_EVENT_NAME, variableChangedEventHandler);\n      propsUpdateListener.addEventListener(loadDataResultEventName, handleLoadDataResult);\n      return () => {\n        window.removeEventListener(RELOAD_DATASET_EVENT_NAME, variableChangedEventHandler);\n        propsUpdateListener.removeEventListener(loadDataResultEventName, handleLoadDataResult);\n      };\n    }, [\n      JSON.stringify(Object.values(dataLoaders).map((loader) => cleanupRequestParams(loader.requestParams)))\n    ]);\n    const createEvent = (value, eventName) => setValue(propsUpdateListener, value, componentId, eventName);\n    const events = config == null ? void 0 : config.events;\n    const eventProps = {};\n    if (events) {\n      for (const event in events) {\n        if (events.hasOwnProperty(event)) {\n          let eventFunction = events[event];\n          eventProps[event] = (value) => createEvent(eventFunction(value), event);\n        }\n      }\n    }\n    return reactExports.createElement(\n      EmbeddableStateContext.Provider,\n      { value: embeddableState },\n      reactExports.createElement(\n        EmbeddableThemeContext.Provider,\n        { value: calculatedOverridableProps },\n        reactExports.createElement(InnerComponent, { ...extendedProps, ...eventProps, ...loadersState })\n      )\n    );\n  }\n  EmbeddableWrapper.displayName = `embedded(${InnerComponent.displayName ?? meta.name})`;\n  return EmbeddableWrapper;\n}\nconst isOperation = (value) => (value == null ? void 0 : value.operation) && (value == null ? void 0 : value.__embeddableVariableMeta);\nfunction defineEditor(InnerComponent, meta, config) {\n  function EmbeddableWrapper(props) {\n    var _a;\n    const { componentId, initialValue, propsUpdateListener } = props;\n    const { type: { typeConfig: { transform } } } = meta;\n    const [componentState, setComponentState] = reactExports.useState(initialValue);\n    const setter = (value) => {\n      setComponentState(isOperation(value) ? value.value : value);\n      setValue(propsUpdateListener, value, componentId);\n    };\n    return reactExports.createElement(InnerComponent, { ...config.inputs((transform == null ? void 0 : transform(componentState)) || componentState, setter, meta.config), ...((_a = config.mapProps) == null ? void 0 : _a.call(config, props)) ?? {} });\n  }\n  EmbeddableWrapper.displayName = `embedded(${InnerComponent.displayName ?? meta.name})`;\n  return EmbeddableWrapper;\n}\nexport {\n  Value as V,\n  useEmbeddableState as a,\n  defineComponent as d,\n  loadData as l,\n  useTheme as u\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"names":[],"mappings":"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AAY;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,QAAQ,GAAG;AACf;AACA,EAAE,QAAQ,EAAE,EAAE;AACd,EAAE,QAAQ,EAAE,EAAE;AACd,EAAE,cAAc,EAAE,KAAK;AACvB,EAAE,iBAAiB,EAAE,KAAK;AAC1B,EAAE,cAAc,EAAE,KAAK;AACvB,EAAE,iBAAiB,EAAE,KAAK;AAC1B;AACA,EAAE,aAAa,EAAE,KAAK;AACtB,EAAE,WAAW,EAAE,KAAK;AACpB;AACA,EAAE,YAAY,EAAE,KAAK;AACrB,EAAE,aAAa,EAAE,KAAK;AACtB,EAAE,WAAW,EAAE,KAAK;AACpB,EAAE,UAAU,EAAE,KAAK;AACnB;AACA,EAAE,eAAe,EAAE,KAAK;AACxB,EAAE,UAAU,EAAE,KAAK;AACnB,EAAE,SAAS,EAAE,KAAK;AAClB;AACA,EAAE,MAAM,EAAE,QAAQ,CAAC,SAAS;AAC5B,EAAE,UAAU,EAAE,QAAQ,CAAC,SAAS;AAChC,EAAE,SAAS,EAAE,QAAQ,CAAC,SAAS;AAC/B,EAAE,UAAU,EAAE,QAAQ,CAAC;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"}