{"version":3,"file":"PivotTable-DkM4SODC-DqH2C3oQ.js","sources":["../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/PivotTable.emb.ts","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/index.tsx","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/PivotTable.tsx","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/core/usePivotTable.ts","../../../node_modules/@embeddable.com/vanilla-components/src/components/util/sortFn.ts","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/core/useTableColumns.ts","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/core/Column.ts","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/core/RowModel.ts","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/core/Row.ts","../../../node_modules/@embeddable.com/vanilla-components/node_modules/uuid/dist/esm-browser/v4.js","../../../node_modules/@embeddable.com/vanilla-components/node_modules/uuid/dist/esm-browser/native.js","../../../node_modules/@embeddable.com/vanilla-components/node_modules/uuid/dist/esm-browser/rng.js","../../../node_modules/@embeddable.com/vanilla-components/node_modules/uuid/dist/esm-browser/stringify.js","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/utils/key.ts","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/components/TableRow.tsx","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/components/TableCell.tsx","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/components/TableHead.tsx","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/enums/MeasureVisualizationFormat.ts","../../../node_modules/@embeddable.com/vanilla-components/src/components/vanilla/charts/PivotTable/enums/ColumnType.ts"],"sourcesContent":["import {\n  Dimension,\n  EmbeddableType,\n  Measure,\n  NativeType,\n  OrderBy,\n  OrderDirection,\n  isDimension,\n  isMeasure,\n  loadData,\n} from '@embeddable.com/core';\nimport { EmbeddedComponentMeta, Inputs, defineComponent } from '@embeddable.com/react';\n\nimport { SortDirection } from '../../../../enums/SortDirection';\nimport SortDirectionType from '../../../../types/SortDirection.type.emb';\nimport { MeasureVisualizationFormat } from './enums/MeasureVisualizationFormat';\nimport Component from './index';\n\nexport const meta = {\n  name: 'PivotTable',\n  label: 'Pivot table',\n  classNames: ['inside-card'],\n  category: 'Charts: essentials',\n  inputs: [\n    {\n      name: 'ds',\n      type: 'dataset',\n      label: 'Dataset to display',\n      category: 'Chart data',\n    },\n    {\n      name: 'metrics',\n      type: 'measure',\n      label: 'Metrics',\n      array: true,\n      config: {\n        dataset: 'ds',\n      },\n      category: 'Chart data',\n    },\n    {\n      name: 'rowValues',\n      type: 'dimension',\n      label: 'Row Values',\n      array: true,\n      config: {\n        dataset: 'ds',\n        hideGranularity: true,\n      },\n      category: 'Chart data',\n    },\n    {\n      name: 'columnValues',\n      type: 'dimension',\n      label: 'Column Values',\n      array: true,\n      config: {\n        dataset: 'ds',\n        hideGranularity: true,\n      },\n      category: 'Chart data',\n    },\n    // Variables to configure\n    {\n      name: 'granularity',\n      type: 'granularity',\n      label: 'Granularity (for dates)',\n      defaultValue: 'week',\n      category: 'Variables to configure',\n    },\n    // Table settings\n    {\n      name: 'title',\n      type: 'string',\n      label: 'Title',\n      description: 'The title for the chart',\n      category: 'Chart settings',\n    },\n    {\n      name: 'description',\n      type: 'string',\n      label: 'Description',\n      description: 'The description for the chart',\n      category: 'Chart settings',\n    },\n    // {\n    //     name: 'measureVisualizationFormat',\n    //     type: MeasureVisualizationFormatType,\n    //     label: 'Metrics visualization format',\n    //     defaultValue: { value: MeasureVisualizationFormat.NUMERIC_VALUES_ONLY },\n    //     category: 'Chart settings'\n    // },\n    {\n      name: 'nullValueCharacter',\n      type: 'string',\n      label: 'Null value character',\n      description: 'Character that should be displayed if value does not exist',\n      defaultValue: 'âˆ…',\n      category: 'Chart settings',\n    },\n    {\n      name: 'isRowGroupDefaultExpanded',\n      type: 'boolean',\n      label: 'Row group expanded by default',\n      defaultValue: false,\n      category: 'Chart settings',\n    },\n    {\n      name: 'columnSortingEnabled',\n      type: 'boolean',\n      label: 'Enable column sorting',\n      defaultValue: true,\n      category: 'Chart settings',\n    },\n    {\n      name: 'rowSortDirection',\n      type: SortDirectionType,\n      defaultValue: { value: SortDirection.ASCENDING },\n      label: 'Default Row Sort Direction',\n      category: 'Chart settings',\n    },\n    {\n      name: 'columnSortDirection',\n      type: SortDirectionType,\n      defaultValue: { value: SortDirection.ASCENDING },\n      label: 'Default Column Sort Direction',\n      category: 'Chart settings',\n    },\n\n    // Table styling\n    {\n      name: 'minColumnWidth',\n      type: 'number',\n      label: 'Minimum metric column width in pixels',\n      defaultValue: 150,\n      category: 'Chart styling',\n    },\n    {\n      name: 'minRowDimensionColumnWidth',\n      type: 'number',\n      label: 'Minimum row value width in pixels',\n      defaultValue: 200,\n      category: 'Chart styling',\n    },\n    {\n      name: 'fontSize',\n      type: 'number',\n      label: 'Font size in pixels',\n      category: 'Chart styling',\n    },\n  ],\n} as const satisfies EmbeddedComponentMeta;\n\nconst aggregateRowDimensions = true; // This is unfinished functionality to disable aggregation rows and show row dimension in separate column\n\nexport default defineComponent(Component, meta, {\n  props: (inputs: Inputs<typeof meta>, [state]) => {\n    // This is necessary for backward compatibility with previous version of Pivot Table\n    const rowValuesInputData = Array.isArray(inputs.rowValues)\n      ? inputs.rowValues\n      : [inputs.rowValues];\n    const columnValuesInputData = Array.isArray(inputs.columnValues)\n      ? inputs.columnValues\n      : [inputs.columnValues];\n\n    const rowDimensions = (rowValuesInputData || []).filter((input) =>\n      isDimension(input),\n    ) as Dimension[];\n    const columnDimensions = (columnValuesInputData || []).filter((input) =>\n      isDimension(input),\n    ) as Dimension[];\n    const measures = inputs.metrics?.filter((metric) => isMeasure(metric)) as Measure[];\n\n    const filteredRowDimensions: Dimension[] = rowDimensions.filter(\n      (dimension) => dimension && isDimension(dimension),\n    );\n\n    const sort: OrderBy[] = filteredRowDimensions.map((rowDimension) => ({\n      property: rowDimension,\n      // @ts-expect-error - value is set by defineComponent, may need to adjust typing in that module\n      direction: (inputs.rowSortDirection?.value === SortDirection.ASCENDING\n        ? 'asc'\n        : 'desc') as OrderDirection,\n    }));\n\n    // Fetch data for each row dimension level\n    const dataResults =\n      rowDimensions?.length && aggregateRowDimensions\n        ? rowDimensions.reduce((resultSet, dimension, index, dimensions) => {\n            const dimensionsToFetch = [\n              ...filteredRowDimensions.slice(0, index + 1),\n              ...columnDimensions,\n            ];\n\n            return {\n              ...resultSet,\n              [`resultsDimension${index}`]: loadData({\n                from: inputs.ds,\n                select: [\n                  ...dimensionsToFetch.filter(\n                    (dimension) => dimension.nativeType !== 'time',\n                  ),\n                  ...dimensionsToFetch.filter((dimension) => dimension.nativeType === 'time')\n                  .map((timeDimension) => ({\n                    dimension: timeDimension.name,\n                    granularity: inputs.granularity,\n                  })),\n                  ...measures,\n                ],\n                orderBy: sort.slice(0, index + 1),\n                limit: 10_000,\n              }),\n            };\n          }, {})\n        : {\n            resultsDimension0: loadData({\n              from: inputs.ds,\n              select: [\n                {\n                  ...[...(filteredRowDimensions || []), ...columnDimensions]\n                  .filter((dimension) => dimension.nativeType === 'time')\n                  .map((timeDimension) => ({\n                    dimension: timeDimension.name,\n                    granularity: inputs.granularity,\n                  })),\n                },\n                ...measures,\n              ],\n              limit: 10_000,\n            }),\n          };\n\n    return {\n      ...inputs,\n      rowValues: rowValuesInputData,\n      columnValues: columnDimensions,\n      // @ts-expect-error - value is set by defineComponent, may need to adjust typing in that module\n      rowSortDirection: inputs.rowSortDirection?.value,\n      // @ts-expect-error - value is set by defineComponent, may need to adjust typing in that module\n      columnSortDirection: inputs.columnSortDirection?.value,\n      // measureVisualizationFormat: inputs.measureVisualizationFormat?.value, // Enable this after Bars mode will be fixed\n      measureVisualizationFormat: MeasureVisualizationFormat.NUMERIC_VALUES_ONLY,\n      aggregateRowDimensions,\n      fontSize: inputs.fontSize,\n      ...dataResults,\n    };\n  },\n});\n","import { DataResponse, Dimension, Measure, isDimension } from '@embeddable.com/core';\nimport React from 'react';\n\nimport { SortDirection } from '../../../../enums/SortDirection';\nimport Container from '../../Container';\nimport PivotTable from './PivotTable';\nimport { MeasureVisualizationFormat } from './enums/MeasureVisualizationFormat';\n\ntype DynamicDimensionsData = {\n  [key in `resultsDimension${number}`]: DataResponse;\n};\n\ntype Props = {\n  title: string;\n  description?: string;\n  rowValues?: Dimension[];\n  columnValues?: Dimension[];\n  metrics: Measure[];\n  minColumnWidth?: number;\n  minRowDimensionColumnWidth?: number;\n  rowSortDirection?: SortDirection;\n  columnSortDirection?: SortDirection;\n  nullValueCharacter?: string;\n  isRowGroupDefaultExpanded?: boolean;\n  measureVisualizationFormat: MeasureVisualizationFormat;\n  fontSize?: number;\n  aggregateRowDimensions?: boolean;\n} & DynamicDimensionsData;\n\nexport default ({ rowValues, columnValues, metrics, ...props }: Props) => {\n  const results: DataResponse[] = [];\n\n  if (rowValues?.length && props.aggregateRowDimensions) {\n    rowValues?.forEach((rowDimension, index) => {\n      if (props[`resultsDimension${index}`]) {\n        results.push(props[`resultsDimension${index}`]);\n      }\n    });\n  } else {\n    results.push(props.resultsDimension0);\n  }\n\n  return (\n    <Container\n      title={props.title}\n      results={results}\n      description={props.description}\n      className=\"overflow-auto\"\n    >\n      {results.every((result) => result && !result.isLoading && !result.error) && (\n        <PivotTable\n          {...props}\n          data={results.map((result) => result.data!)}\n          columnDimensions={columnValues}\n          defaultColumnDimensionSortDirection={props.columnSortDirection}\n          rowDimensions={rowValues?.filter((metric) => isDimension(metric)) as Dimension[]}\n          defaultRowDimensionSortDirection={props.rowSortDirection}\n          measures={metrics}\n          fontSize={props.fontSize ? `${props.fontSize}px` : undefined}\n        />\n      )}\n    </Container>\n  );\n};\n","import React, { useState, useMemo } from 'react';\nimport { Dimension, Measure } from '@embeddable.com/core';\nimport TableHead from './components/TableHead';\nimport TableRow from './components/TableRow';\nimport { SortDirection } from '../../../../enums/SortDirection';\nimport formatValue from '../../../util/format';\nimport { usePivotTable } from './core/usePivotTable';\nimport { multisortFn, SortCriteria } from '../../../util/sortFn';\nimport { Row } from './core/Row';\nimport { Theme } from '../../../../themes/theme';\nimport { useTheme } from '@embeddable.com/react';\n\ntype Props<T> = {\n  aggregateRowDimensions?: boolean;\n  columnDimensions?: Dimension[];\n  columnSortingEnabled?: boolean;\n  data: T[][];\n  defaultColumnDimensionSortDirection?: SortDirection;\n  defaultRowDimensionSortDirection?: SortDirection;\n  fontSize?: string;\n  granularity?: string;\n  isRowGroupDefaultExpanded?: boolean;\n  measures: Measure[];\n  minColumnWidth?: number;\n  minRowDimensionColumnWidth?: number;\n  nullValueCharacter?: string;\n  rowDimensions?: Dimension[];\n};\n\nconst PivotTable = <T,>({\n  aggregateRowDimensions = true,\n  columnDimensions,\n  columnSortingEnabled = true,\n  data,\n  defaultColumnDimensionSortDirection,\n  defaultRowDimensionSortDirection,\n  fontSize = '14px',\n  granularity,\n  isRowGroupDefaultExpanded = true,\n  measures,\n  minColumnWidth,\n  minRowDimensionColumnWidth,\n  nullValueCharacter = '',\n  rowDimensions,\n}: Props<T>) => {\n  const theme: Theme = useTheme() as Theme;\n  fontSize = theme.font.size;\n\n  const [sortCriteria, setSortCriteria] = useState<SortCriteria<any>[]>(() => {\n    if (!rowDimensions || !defaultRowDimensionSortDirection) {\n      return [];\n    }\n\n    return [\n      {\n        key: rowDimensions.length === 1 ? rowDimensions[0].name : '__group.key',\n        direction: defaultRowDimensionSortDirection,\n      },\n    ];\n  });\n\n  const { rows, columns, getLeafColumns } = usePivotTable<T>(\n    data,\n    measures,\n    rowDimensions,\n    columnDimensions,\n    {\n      aggregateRowDimensions,\n      defaultColumnsSort: defaultColumnDimensionSortDirection,\n      granularity,\n    },\n  );\n\n  const sortRows = (rows: Row[], sortCriteria: SortCriteria<any>[]): Row[] => {\n    const sortedRows = [...rows];\n    sortedRows.sort(multisortFn(sortCriteria));\n\n    sortedRows.forEach((row) => {\n      if (row.children?.length) {\n        row.children = sortRows(row.children, sortCriteria);\n      }\n    });\n\n    return sortedRows;\n  };\n\n  const sortCriteriaWithDataAccessor = useMemo<SortCriteria<any>[]>(() => {\n    const nullValueCharacterAsNumber = parseInt(nullValueCharacter, 10);\n\n    return sortCriteria.map((sortCriterion) => ({\n      ...sortCriterion,\n      key: (row: Row) =>\n        row.data[sortCriterion.key as string] ||\n        (isNaN(nullValueCharacterAsNumber) ? null : nullValueCharacterAsNumber),\n    }));\n  }, [sortCriteria]);\n\n  const sortedRows = useMemo<Row[]>(() => {\n    return sortRows(rows, sortCriteriaWithDataAccessor);\n  }, [rows, sortCriteriaWithDataAccessor]);\n\n  const getMeasureByLabel = useMemo(\n    () => (label: string) => {\n      return measures.find((measure) => measure.title === label);\n    },\n    [measures],\n  );\n\n  return (\n    <table className=\"min-w-full border-separate border-spacing-0 table-fixed\">\n      <thead\n        className={`\n        embeddable-table-header\n        sticky\n        top-0\n        z-20\n        bg-[color:--embeddable-controls-backgrounds-colors-soft]\n      `}\n      >\n        <TableHead\n          columns={columns}\n          minColumnWidth={`${minColumnWidth}px`}\n          minHeaderColumnWidth={`${minRowDimensionColumnWidth}px`}\n          enableSorting={columnSortingEnabled}\n          sortCriteria={sortCriteria}\n          onSortingChange={(columnKey, sortDirection) => {\n            setSortCriteria([\n              {\n                key: columnKey,\n                direction: sortDirection,\n              },\n            ]);\n          }}\n          fontSize={fontSize}\n        />\n      </thead>\n\n      <tbody className=\"overflow-y-auto\">\n        {sortedRows.map((row) => (\n          <TableRow\n            key={row.id}\n            columns={getLeafColumns()}\n            row={row}\n            isRowGroupDefaultExpanded={isRowGroupDefaultExpanded}\n            renderCell={(rowRecord, column) => {\n              const cellValue = rowRecord[column.key];\n              // Check if it's a boolean and if so just return the string representation\n              if (typeof cellValue === 'boolean') {\n                return <span style={{ fontSize }}>{cellValue ? 'True' : 'False'}</span>;\n              }\n\n              return (\n                <span style={{ fontSize }}>\n                  {cellValue === undefined || cellValue === null\n                    ? nullValueCharacter\n                    : formatValue(cellValue, {\n                        //format date columns\n                        ...(granularity && column.dataType === 'time'\n                          ? {\n                              dateFormat:\n                                theme.dateFormats[granularity as keyof typeof theme.dateFormats],\n                            }\n                          : {}),\n                        //format measures\n                        ...(getMeasureByLabel(column.label)\n                          ? { meta: getMeasureByLabel(column.label)?.meta, type: 'number' }\n                          : {}),\n                      })}\n                </span>\n              );\n            }}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default PivotTable;\n","import { useMemo } from 'react';\nimport { Dimension, Measure } from '@embeddable.com/core';\nimport RowModel from './RowModel';\nimport { useTableColumns } from './useTableColumns';\nimport { SortDirection } from '../../../../../enums/SortDirection';\nimport { Column } from './Column';\nimport { Row } from './Row';\nimport { basicSortFn } from '../../../../util/sortFn';\n\ntype PivotTableHook = {\n  rows: Row[],\n  columns: Column[],\n  getLeafColumns: () => Column[]\n};\n\nexport const usePivotTable = <T>(\n  dimensionalData: T[][],\n  measures: Measure[],\n  rowDimensions: Dimension[] = [],\n  columnDimensions: Dimension[] = [],\n  config: {\n    aggregateRowDimensions?: boolean;\n    defaultColumnsSort?: SortDirection;\n    granularity?: string,\n  } = {}\n): PivotTableHook => {\n  const rowModel = useMemo(() => new RowModel(\n    dimensionalData as Record<string, string>[][],\n    measures,\n    rowDimensions,\n    columnDimensions,\n    config.aggregateRowDimensions\n  ), [dimensionalData, measures, rowDimensions, columnDimensions, config.aggregateRowDimensions]);\n\n  const columnDimensionsValues = useMemo(() => columnDimensions.reduce((acc, columnDimension) => ({\n    ...acc,\n    [columnDimension.name]: rowModel.getColumnDimensionValues(columnDimension.name).sort((a, b) => basicSortFn(a, b, config.defaultColumnsSort ?? SortDirection.ASCENDING))\n  }), {}), [columnDimensions, rowModel, config.defaultColumnsSort]);\n\n  const { columns, getLeafColumns } = useTableColumns(\n    columnDimensions,\n    rowDimensions,\n    measures,\n    columnDimensionsValues,\n    {\n      aggregateRowDimensions: config.aggregateRowDimensions,\n      granularity: config.granularity\n    }\n  );\n\n  return {\n    rows: rowModel.rows,\n    columns,\n    getLeafColumns,\n  };\n};","import { SortDirection } from '../../enums/SortDirection';\n\nexport type SortCriteria<T> = {\n  key: keyof T | ((item: T) => string);\n  direction: SortDirection;\n}\n\nfunction getValue<T>(item: T, key: keyof T | ((item: T) => any)): any {\n  return typeof key === 'function' ? key(item) : item[key];\n}\n\nfunction isNumber(num: any): boolean {\n  return !isNaN(num);\n}\n\nexport const multisortFn = <T>(criteria: SortCriteria<T>[]): (a: T, b: T) => number => {\n  return (a: T, b: T): number => {\n    for (const { key, direction } of criteria) {\n      const aValue = getValue(a, key) || 0;\n      const bValue = getValue(b, key) || 0;\n\n      const result = basicSortFn(aValue, bValue, direction);\n      if (result !== 0) {\n        return result;\n      }\n    }\n    return 0;\n  };\n}\n\nexport const basicSortFn = (a: any, b: any, sortDirection: SortDirection): number => {\n  if (isNumber(a) && isNumber(b)) {\n    const valA = parseInt(a, 10);\n    const valB = parseInt(b, 10);\n\n    return (valA - valB) * (sortDirection === SortDirection.ASCENDING ? 1 : -1);\n    \n  } else if (typeof a === 'string' && typeof b === 'string') {\n    return a.localeCompare(b, undefined, {\n      sensitivity: 'base',\n      numeric: true,\n    }) * (sortDirection === SortDirection.ASCENDING ? 1 : -1);\n  } else if (typeof a === 'number') {\n    return -1; // Numbers come before strings\n  } else {\n    return 1; // Strings come after numbers\n  }\n}","import { useMemo } from 'react';\nimport { Dimension, Measure } from '@embeddable.com/core';\nimport { Column } from './Column';\nimport { ColumnType } from '../enums/ColumnType';\nimport { createColumnKey } from '../utils/key';\nimport formatValue from '../../../../util/format';\nimport { Theme } from '../../../../../themes/theme';\nimport { useTheme } from '@embeddable.com/react';\n\ntype TableColumnHook = {\n  columns: Column[];\n  getLeafColumns: () => Column[];\n};\n\nexport const useTableColumns = (\n  columnDimensions: Dimension[],\n  rowDimensions: Dimension[],\n  measures: Measure[],\n  columnDimensionValues: Record<string, string[]>,\n  config: {\n    aggregateRowDimensions?: boolean;\n    granularity?: string;\n  } = {},\n): TableColumnHook => {\n  const theme: Theme = useTheme() as Theme;\n\n  function getRowDimensionColumns(\n    aggregateRowDimensions: boolean = false,\n    parent: Column | null = null,\n  ): Column[] {\n    const rowDimensionCols = rowDimensions.map(\n      (rowDimension) =>\n        new Column({\n          label: rowDimension.title,\n          key: rowDimension.name,\n          depth: columnDimensions.length,\n          type: ColumnType.ROW_HEADER,\n          dataType: rowDimension.nativeType,\n          parent,\n        }),\n    );\n\n    if (aggregateRowDimensions) {\n      return [\n        new Column({\n          label: rowDimensions.map((rowDimension) => rowDimension.title).join(' â†’ '),\n          key: '__group.key',\n          depth: columnDimensions.length,\n          type: ColumnType.ROW_HEADER_GROUP,\n          group: rowDimensionCols,\n          parent,\n        }),\n      ];\n    } else {\n      return rowDimensionCols;\n    }\n  }\n\n  function createRowDimensionsColumn(\n    columnDimensions: Dimension[],\n    depth: number = 0,\n    parent: Column | null = null,\n  ): Column[] {\n    if (!columnDimensions.length) {\n      return getRowDimensionColumns(\n        config.aggregateRowDimensions && rowDimensions.length > 1,\n        parent,\n      );\n    }\n\n    const [currentColumnDimension, ...restColumnDimensions] = columnDimensions;\n\n    const rowDimensionColumn = new Column({\n      label: currentColumnDimension.title,\n      key: currentColumnDimension.name,\n      depth,\n      type: ColumnType.DIMENSION,\n      dataType: currentColumnDimension.nativeType,\n      parent,\n    });\n\n    const children = createRowDimensionsColumn(restColumnDimensions, depth + 1, rowDimensionColumn);\n    rowDimensionColumn.addChildren(children);\n\n    return [rowDimensionColumn];\n  }\n\n  function createMeasureColumns(\n    columnDimensions: Dimension[],\n    depth = 0,\n    parent: Column | null = null,\n    dimensionValuesInARow: string[] = [],\n  ): Column[] {\n    if (!columnDimensions.length) {\n      return measures.map(\n        (measure) =>\n          new Column({\n            label: measure.title,\n            key: createColumnKey([...dimensionValuesInARow, measure.name]),\n            depth,\n            type: ColumnType.MEASURE,\n            dataType: measure.nativeType,\n            parent: parent || null,\n          }),\n      );\n    }\n\n    const [currentColumnDimension, ...restColumnDimensions] = columnDimensions;\n\n    return columnDimensionValues[currentColumnDimension.name].map((dimensionValue) => {\n      const column = new Column({\n        label:\n          formatValue(dimensionValue, {\n            // type: currentColumnDimension.nativeType === 'time' ? 'date' : currentColumnDimension.nativeType as any,\n            ...(config.granularity && currentColumnDimension.nativeType === 'time' && dimensionValue\n              ? {\n                  dateFormat:\n                    theme.dateFormats[config.granularity as keyof typeof theme.dateFormats],\n                }\n              : {}),\n          }) ?? '-',\n        key: createColumnKey([...dimensionValuesInARow, dimensionValue]),\n        depth,\n        type: ColumnType.DIMENSION,\n        dataType: currentColumnDimension.nativeType,\n        parent: parent,\n      });\n\n      const children = createMeasureColumns(restColumnDimensions, depth + 1, column, [\n        ...dimensionValuesInARow,\n        dimensionValue,\n      ]);\n      column.addChildren(children);\n\n      return column;\n    });\n  }\n\n  const columns: Column[] = useMemo(\n    () => [\n      ...(rowDimensions.length ? createRowDimensionsColumn(columnDimensions) : []),\n      ...createMeasureColumns(columnDimensions),\n    ],\n    [\n      columnDimensions,\n      rowDimensions,\n      measures,\n      columnDimensionValues,\n      config.aggregateRowDimensions,\n    ],\n  );\n\n  const leafColumns: Column[] = useMemo(\n    () => columns.map((column) => column.getLeafColumns()).flat(),\n    [columns],\n  );\n\n  return {\n    columns,\n    getLeafColumns: () => leafColumns,\n  };\n};\n","import { NativeDataType } from '@embeddable.com/core';\nimport { ColumnType } from '../enums/ColumnType';\n\nexport type ColumnConfig = {\n  label: string;\n  key: string;\n  type: ColumnType;\n  dataType?: NativeDataType;\n  depth: number;\n  parent?: Column | null;\n  children?: Column[];\n  group?: Column[];\n};\n\n/**\n * Class that represents a single column of the table and can have nested children columns\n * @class\n */\nexport class Column {\n  /**\n   * Column label that will be displayed in the table\n   * @type {string}\n   * @required\n   */\n  label: string;\n\n  /**\n   * Column key that serves as an accessor for the value and should be unique among all columns\n   * @type {string}\n   * @required\n   */\n  key: string;\n\n  /**\n   * Column type\n   * @type {ColumnType}\n   * @required\n   */\n  type: ColumnType;\n\n  /**\n   * Column data type that will be used for formatting of the value\n   * @type {NativeDataType | null}\n   * @required\n   */\n  dataType: NativeDataType | null;\n\n  /**\n   * Column depth in the column hierarchy\n   * @type {number}\n   * @optional\n   */\n  depth: number;\n\n  /**\n   * Column children that are nested under this column\n   * @type {Column[]}\n   * @optional\n   */\n  children: Column[] | null;\n\n  /**\n   * Reference to parent column that this column is nested under\n   * @type {Column}\n   * @optional\n   */\n  parent: Column | null;\n\n  /**\n   * Reference to columns that create single grouped column.\n   * This is used when there are multiple row dimensions and values from all of them should be displayed in a single column.\n   * @type {Column[]}\n   * @optional\n   */\n  group: Column[] | null;\n\n  /**\n   * @constructor\n   * @param {ColumnConfig} config\n   *\n   * @param {string} config.label - Column label that will be displayed in the table\n   * @param {string} config.key - Column key that serves as an accessor for the value and should be unique among all columns\n   * @param {ColumnType} config.type - Column type\n   * @param {NativeDataType} config.dataType - Column data type that will be used for formatting of the value\n   * @param {number} config.depth - Column depth in the column hierarchy\n   * @param {Column[]} config.children - Column children that are nested under this column\n   * @param {Column} config.parent - Reference to parent column that this column is nested under\n   */\n  constructor({\n    label,\n    key,\n    type,\n    dataType,\n    depth = 0,\n    children,\n    parent,\n    group\n  }: ColumnConfig) {\n    this.label = label;\n    this.key = key;\n    this.type = type;\n    this.dataType = dataType ?? null;\n    this.depth = depth;\n    this.parent = parent ?? null;\n    this.children = children ?? null;\n    this.group = group ?? null;\n  }\n\n  /**\n   * Add children columns to this column\n   * @param {Column[]} childColumns\n   * @returns {Column[]} all children columns\n   * @public\n   */\n  public addChildren(childColumns: Column[]): Column[] {\n    this.children = [\n      ...this.children || [],\n      ...childColumns\n    ];\n\n    return this.children;\n  }\n\n  /**\n   * Get all leaf columns that are nested under this column\n   * @returns {Column[]}\n   * @public\n   */\n  public getLeafColumns(): Column[] {\n    if (!this.children?.length) {\n      return [this];\n    }\n\n    return this.children.reduce<Column[]>((acc, child) => {\n      return [...acc, ...child.getLeafColumns()];\n    }, []);\n  }\n}","import { Dimension, Measure } from '@embeddable.com/core';\nimport { createColumnKey, createGeneralKey } from '../utils/key';\nimport { Row } from './Row';\n\ntype RowRecordMap = {\n  data: Record<string, string>;\n  children: Map<string, RowRecordMap>;\n}\n\nclass RowModel {\n  readonly #dimensionalData: Record<string, string>[][];\n  readonly #measures: Measure[];\n  readonly #rowDimensions: Dimension[];\n  readonly #columnDimensions: Dimension[];\n  readonly #parsedTableData: RowRecordMap;\n  readonly #aggregateRowDimensions: boolean;\n  #rows: Row[] | null;\n  #columnDimensionValues: Record<string, Set<string>> = {};\n\n  constructor(\n    dimensionalData: Record<string, string>[][],\n    measures: Measure[],\n    rowDimensions: Dimension[] = [],\n    columnDimensions: Dimension[] = [],\n    aggregateRowDimensions = true\n  ) {\n    this.#dimensionalData = dimensionalData;\n    this.#measures = measures;\n    this.#rowDimensions = rowDimensions || [];\n    this.#columnDimensions = columnDimensions;\n    this.#aggregateRowDimensions = aggregateRowDimensions;\n\n    this.#parsedTableData = this.#dimensionalData.reduce((tableData, dimensionData, dimensionDataIndex) => {\n      const appropriateRowDimensions = this.#aggregateRowDimensions ? this.#rowDimensions.slice(0, dimensionDataIndex + 1) : this.#rowDimensions;\n\n      dimensionData.forEach(record => {\n        const rowDataPath = this.#getDimensionValues(record, appropriateRowDimensions);\n        const rowData: Record<string, any> = {\n          ...this.#getRowDataKeyedByColumnDimensions(record),\n          ...appropriateRowDimensions.reduce((acc, rowDimension) => ({\n            ...acc,\n            [rowDimension.name]: record[rowDimension.name]\n          }), {}),\n        };\n\n        // If there is more than one row dimension, add the last row dimension as a group key for simpler rendering of collapsible rows\n        if (appropriateRowDimensions.length && this.#rowDimensions.length > 1) {\n          rowData['__group.key'] = record[appropriateRowDimensions.at(-1)!.name];\n        }\n\n        this.#insertDataToPath(tableData, rowDataPath, rowData);\n      });\n\n      return tableData;\n    }, { data: {}, children: new Map() });\n\n    // If there are no row dimensions, calculate col dimension values separately\n    if (!this.#rowDimensions.length && this.#columnDimensions.length) {\n      this.#dimensionalData.forEach((dimensionData) => {\n        dimensionData.forEach(record => this.#getDimensionValues(record, this.#columnDimensions));\n      });\n    }\n\n    this.#rows = null;\n  }\n\n  #getDimensionValues = (record: Record<string, string>, dimensions: Dimension[]) => {\n    return dimensions?.map((dimension: Dimension) => {\n      if (!this.#columnDimensionValues[dimension.name]) {\n        this.#columnDimensionValues[dimension.name] = new Set();\n      }\n      this.#columnDimensionValues[dimension.name].add(record[dimension.name]);\n\n      return record[dimension.name];\n    });\n  }\n\n  #getRowDataKeyedByColumnDimensions = (record: Record<string, string>) => (\n    this.#measures.reduce((rowData, measure) => ({\n      ...rowData,\n      [createColumnKey([...this.#getDimensionValues(record, this.#columnDimensions), measure.name])]: record[measure.name]\n    }), {})\n  )\n\n  #insertDataToPath = (levelData: RowRecordMap, path: string[], data: Record<string, string>) => {\n    if (!path.length) {\n      levelData.data = { ...levelData.data, ...data };\n      return;\n    }\n\n    const currentKey = createGeneralKey(path[0]);\n\n    // Ensure the current level has the node for the key\n    if (!levelData.children.has(currentKey)) {\n      levelData.children.set(currentKey, {\n        data: {},\n        children: new Map()\n      });\n    }\n\n    this.#insertDataToPath(levelData.children.get(currentKey)!, path.slice(1), data);\n  }\n\n  #getRowsFromParsedTableData = (tableDataRecord: RowRecordMap, depth = 0): Row[] => {\n    const rows: Row[] = [];\n\n    if (this.#rowDimensions.length) {\n      for (const [, value] of tableDataRecord.children) {\n        rows.push(new Row(\n          value.data,\n          this.#getRowsFromParsedTableData(value, depth + 1),\n          depth\n        ));\n      }\n    } else {\n      rows.push(new Row(tableDataRecord.data));\n    }\n\n    return rows;\n  }\n\n  get rows() {\n    if (!this.#rows) {\n      this.#rows = this.#getRowsFromParsedTableData(this.#parsedTableData);\n    }\n    return this.#rows;\n  }\n\n  public getColumnDimensionValues(dimensionName: string) {\n    return [...this.#columnDimensionValues[dimensionName]];\n  }\n}\n\nexport default RowModel;","import { v4 as uuid } from 'uuid';\n\nexport class Row {\n  readonly #id: string;\n  #data: Record<string, any>;\n  #children: Row[];\n  readonly #depth: number;\n\n  constructor(data: Record<string, any>, children: Row[] = [], depth: number = 0) {\n    this.#id = uuid();\n    this.#data = data;\n    this.#children = children;\n    this.#depth = depth;\n  }\n\n  get id(): string {\n    return this.#id;\n  }\n\n  get data(): Record<string, any> {\n    return this.#data;\n  }\n\n  set data(data: Record<string, any>) {\n    this.#data = data;\n  }\n\n  get children(): Row[] {\n    return this.#children;\n  }\n\n  set children(children: Row[]) {\n    this.#children = children;\n  }\n\n  get depth(): number {\n    return this.#depth;\n  }\n\n  public getLeafRows(): Row[] {\n    if (!this.children.length) {\n      return [this];\n    }\n\n    return this.children.reduce<Row[]>((acc, child) => {\n      return [...acc, ...child.getLeafRows()];\n    }, []);\n  }\n}","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","const DIMENSION_KEY_SEPARATOR = '-->';\n\nexport const createGeneralKey = (value: string | number | boolean) => {\n  if (value === null || value === undefined) {\n    return '';\n  }\n\n  return value.toString().replaceAll(' ', '_').toLowerCase();\n}\n\nexport const createColumnKey = (dimensionValues: string[]) => {\n  return [\n    ...dimensionValues.map(dimensionValue => createGeneralKey(dimensionValue)),\n  ].join(DIMENSION_KEY_SEPARATOR);\n}","import React, { ReactElement, useState } from 'react';\nimport { Column } from '../core/Column';\nimport cn from '../../../../util/cn';\nimport TableCell from './TableCell';\nimport { Row } from '../core/Row';\nimport { ColumnType } from '../enums/ColumnType';\nimport { ChevronDown } from '../../../icons';\n\ntype Props = {\n  columns: Column[];\n  row: Row;\n  renderCell?: (row: Record<string, any>, column: Column) => ReactElement;\n  level?: number;\n  isRowGroupDefaultExpanded?: boolean;\n};\n\nconst TableRow = ({ columns, row, renderCell, level = 0, isRowGroupDefaultExpanded }: Props) => {\n  const [isExpanded, setIsExpanded] = useState<boolean>(isRowGroupDefaultExpanded ?? true);\n\n  const toggleExpand = () => {\n    setIsExpanded((expanded) => !expanded);\n  };\n\n  const getTableCell = (column: Column, rowData: Record<string, any>): ReactElement => {\n    const isRowHeader = column.type === ColumnType.ROW_HEADER;\n\n    return (\n      <TableCell\n        key={`${row.id}-${column.key}`}\n        isHeader={isRowHeader}\n        className={cn('border-b', {\n          'border-r':\n            !column.parent || column.parent?.children?.at(-1)?.key === column.key || isRowHeader,\n        })}\n      >\n        <div\n          className=\"flex items-center\"\n          style={{ marginLeft: isRowHeader ? `${level * 30}px` : 0 }}\n        >\n          {row.children?.length && isRowHeader ? (\n            <ChevronDown\n              className={cn('w-4 h-4 mr-1 cursor-pointer transform', {\n                '-rotate-90': !isExpanded,\n              })}\n              onClick={toggleExpand}\n            />\n          ) : null}\n          {renderCell?.(rowData, column) || rowData[column.key]}\n        </div>\n      </TableCell>\n    );\n  };\n\n  const renderColumns = (columns: Column[], rowData: Record<string, any>): ReactElement[] =>\n    columns.map((column: Column) =>\n      column.type === ColumnType.ROW_HEADER_GROUP && column.group?.length\n        ? getTableCell(column.group[level], rowData)\n        : getTableCell(column, rowData),\n    );\n\n  return (\n    <>\n      <tr\n        className=\"\n        bg-[color:--embeddable-controls-backgrounds-colors-soft]\n        hover:bg-[color:--embeddable-controls-backgrounds-colors-normal]\"\n      >\n        {renderColumns(columns, row.data)}\n      </tr>\n      {isExpanded &&\n        row.children?.map((subRow) => (\n          <TableRow\n            key={subRow.id}\n            columns={columns}\n            row={subRow}\n            renderCell={renderCell}\n            level={level + 1}\n          />\n        ))}\n    </>\n  );\n};\n\nexport default TableRow;\n","import React, { PropsWithChildren } from 'react';\nimport cn from '../../../../util/cn';\n\ntype Props = {\n  isHeader?: boolean;\n  className?: string;\n}\n\nexport default function TableCell({ isHeader, className, children }: PropsWithChildren<Props>) {\n  const Cell = isHeader ? 'th' : 'td';\n\n  return (\n    <Cell\n      className={cn('px-2 py-1.5 font-normal first:border-l bg-inherit', {\n        'lg:z-10 lg:sticky lg:left-0 text-left': isHeader,\n      }, className)}\n    >\n      { children }\n    </Cell>\n  )\n}","import React, { ReactElement } from 'react';\nimport cn from '../../../../util/cn';\nimport { ColumnType } from '../enums/ColumnType';\nimport { Column } from '../core/Column';\nimport { SortCriteria } from '../../../../util/sortFn';\nimport { SortDirection } from '../../../../../enums/SortDirection';\nimport { SortDown, SortUp } from '../../../icons';\nimport { Theme } from '../../../../../themes/theme';\nimport { useTheme } from '@embeddable.com/react';\n\ntype Props = {\n  columns: Column[];\n  onSortingChange?: (columnKey: string, sortDirection: SortDirection) => void;\n  fontSize?: string;\n  minColumnWidth?: string;\n  minHeaderColumnWidth?: string;\n  enableSorting?: boolean;\n  sortCriteria?: SortCriteria<any>[];\n};\n\nexport default function TableHead({\n  columns,\n  fontSize = '16px',\n  minColumnWidth,\n  minHeaderColumnWidth,\n  enableSorting = true,\n  sortCriteria,\n  onSortingChange,\n}: Props) {\n  const theme: Theme = useTheme() as Theme;\n  fontSize = theme.font.size;\n  const fontColor = theme.font.colorNormal;\n\n  const renderColumn = (column: Column, columnIndex: number): ReactElement => {\n    const isRowHeader =\n      column.type === ColumnType.ROW_HEADER || column.type === ColumnType.ROW_HEADER_GROUP;\n    const shouldBeLeftAligned =\n      column.type !== ColumnType.DIMENSION ||\n      column.children?.filter((child) => child.type === ColumnType.MEASURE).length === 1;\n    const leafColumns = column.getLeafColumns();\n    const isSticky =\n      isRowHeader ||\n      leafColumns.some(\n        (child) =>\n          child.type === ColumnType.ROW_HEADER || child.type === ColumnType.ROW_HEADER_GROUP,\n      );\n    const shouldRenderRightBorder =\n      column.depth === 0 ||\n      column.type !== ColumnType.MEASURE ||\n      column.parent?.children?.at(-1)?.key === column.key;\n    const isSortable = enableSorting && column.type !== ColumnType.DIMENSION;\n    const sortedDirection = sortCriteria?.find(\n      (criteria) => criteria.key === column.key,\n    )?.direction;\n\n    return (\n      <th\n        key={`${columnIndex}-${column.key}`}\n        colSpan={leafColumns.length}\n        className={cn('p-2 border-y first:border-l', {\n          'border-b-0': column.children?.length,\n          'border-r': shouldRenderRightBorder,\n          'lg:sticky lg:left-0 lg:z-10 bg-[color:--embeddable-controls-backgrounds-colors-soft]':\n            isSticky,\n          'cursor-pointer': isSortable,\n        })}\n        style={\n          minColumnWidth\n            ? {\n                minWidth: (isRowHeader ? minHeaderColumnWidth : minColumnWidth) ?? 'auto',\n              }\n            : {}\n        }\n        {...(isSortable\n          ? {\n              onClick: () => {\n                onSortingChange?.(\n                  column.key,\n                  sortedDirection === SortDirection.DESCENDING\n                    ? SortDirection.ASCENDING\n                    : SortDirection.DESCENDING,\n                );\n              },\n            }\n          : null)}\n      >\n        <div\n          className={cn('text-center', {\n            'text-left': shouldBeLeftAligned,\n            'flex justify-between items-center gap-2': isSortable,\n          })}\n        >\n          <span className={`text-[color:--embeddable-font-colorNormal}]`} style={{ fontSize }}>\n            {column.label}\n          </span>\n          {isSortable ? (\n            <span\n              className={cn('w-3', {\n                invisible: !sortedDirection,\n              })}\n            >\n              {sortedDirection === SortDirection.ASCENDING ? (\n                <SortUp fill=\"currentcolor\" />\n              ) : (\n                <SortDown fill=\"currentcolor\" />\n              )}\n            </span>\n          ) : null}\n        </div>\n      </th>\n    );\n  };\n\n  if (!columns.length) {\n    return null;\n  }\n\n  // Recursively render table headers with all dimensions\n  return (\n    <>\n      <tr>{columns.map(renderColumn)}</tr>\n      {columns[0].children ? (\n        <TableHead\n          columns={columns.map((column) => column?.children || []).flat()}\n          onSortingChange={onSortingChange}\n          fontSize={fontSize}\n          minColumnWidth={minColumnWidth}\n          minHeaderColumnWidth={minHeaderColumnWidth}\n          enableSorting={enableSorting}\n          sortCriteria={sortCriteria}\n        />\n      ) : null}\n    </>\n  );\n}\n","export enum MeasureVisualizationFormat {\n  NUMERIC_VALUES_ONLY = 'Numeric Value Only',\n  VALUE_BARS = 'Value Bars',\n  HEATMAP = 'Heat Map'\n}","export enum ColumnType {\n  DIMENSION = 'dimension',\n  MEASURE = 'measure',\n  ROW_HEADER_GROUP = 'row-header-group',\n  ROW_HEADER = 'row-header'\n}"],"names":["dataResults","aggregateRowDimensions","inputs","MeasureVisualizationFormat","_c","columnDimensions","_b","rowValuesInputData","n","measures","timeDimension","filteredRowDimensions","dimension","loadData","sort","index","dimensionsToFetch","resultSet","rowDimensions","dimensions","rowDimension","_a","SortDirection","isDimension","metric","isMeasure","input","columnValuesInputData","state","PivotTable_emb","defineComponent","Component","meta","SortDirectionType","ce","metrics","props","rowValues","columnValues","results","result","PivotTable","jsx","Container","row","getMeasureByLabel","column","theme","granularity","cellValue","fontSize","nullValueCharacter","formatValue","rowRecord","isRowGroupDefaultExpanded","getLeafColumns","TableRow","sortedRows","sortDirection","columnKey","setSortCriteria","sortCriteria","columnSortingEnabled","minRowDimensionColumnWidth","columns","minColumnWidth","TableHead","jsxs","useMemo","label","O","measure","sortRows","rows","sortCriteriaWithDataAccessor","nullValueCharacterAsNumber","sortCriterion","multisortFn","defaultColumnDimensionSortDirection","data","usePivotTable","defaultRowDimensionSortDirection","useState","useTheme","rowModel","config","columnDimensionsValues","useTableColumns","acc","columnDimension","a","b","basicSortFn","dimensionalData","RowModel","valA","valB","isNumber","aValue","getValue","key","bValue","direction","criteria","num","item","leafColumns","columnDimensionValues","createMeasureColumns","createRowDimensionsColumn","children","dimensionValue","dimensionValuesInARow","parent","restColumnDimensions","depth","currentColumnDimension","ColumnType","createColumnKey","Column","rowDimensionColumn","getRowDimensionColumns","rowDimensionCols","child","childColumns","type","dataType","group","__publicField","_dimensionalData","_measures","_rowDimensions","_columnDimensions","_parsedTableData","_aggregateRowDimensions","_rows","_columnDimensionValues","_getDimensionValues","_getRowDataKeyedByColumnDimensions","_insertDataToPath","_getRowsFromParsedTableData","__privateGet","dimensionName","__privateSet","dimensionData","record","tableData","appropriateRowDimensions","rowData","rowDataPath","dimensionDataIndex","Row","tableDataRecord","value","__privateAdd","levelData","currentKey","path","createGeneralKey","_id","_data","_children","_depth","uuid","rnds","unsafeStringify","options","rng","native","v4","buf","offset","randomUUID","getRandomValues","rnds8","byteToHex","arr","i","DIMENSION_KEY_SEPARATOR","dimensionValues","subRow","renderCell","level","isExpanded","renderColumns","Fragment","getTableCell","toggleExpand","cn","ChevronDown","_d","isRowHeader","TableCell","setIsExpanded","expanded","isHeader","className","Cell","enableSorting","minHeaderColumnWidth","onSortingChange","renderColumn","columnIndex","sortedDirection","SortUp","SortDown","isSortable","shouldBeLeftAligned","isSticky","u","shouldRenderRightBorder","_f","_e"],"mappings":";;;;;;;;;;;;;;;;;;AiBAO,IAAKG,EAAZ,mBAAA,CAAA,CAAYA,CAAZ,MACEA,CADF,CACE,mBADF,GACwB,oBADxB,EAEEA,CAFF,CAEE,UAFF,GAEe,YAFf,EAGEA,CAHF,CAGE,OAHF,GAGY,UAHZ,EAAYA,CAAZ,CAAA,EAAYA,EAAZ,IAAY,EAAA,CAAZ,ECAYkH,CDAZ,mBAAA,CAAA,CCAYA,CDAZ,MCCEA,CDDF,CCCE,SDDF,GCCc,WDDd,ECEEA,CDFF,CCEE,ODFF,GCEY,SDFZ,ECGEA,CDHF,CCGE,gBDHF,GCGqB,kBDHrB,ECIEA,CDJF,CCIE,UDJF,GCIe,YDJf,ECAYA,CDAZ,CAAA,ECAYA,CDAZ,ICAY,EAAA,CDAZ;ADoBA,SAAwBnD,EAAxB,CAAkC;AAAA,EAChC,OADF,EACEF,CADF;AACEA,EACA,QAFF,EAEEd,CAFF,GAEa,MAFb;AAEa,EACX,cAFF,EAEEe,GAFF;AAEEA,EACA,oBAFFzD,EAEE+L,CAFF/L;AAEE+L,EACA,aAFF,EAEED,CAFF,GAEkB,IAFlB;AAEkB,EAChB,YAFF,EAEEzI,EAFF;AAEEA,EACA,eAFF,EAEE2I;AACF,CAAA,EAAU;AACV,EAAA,MAAQzJ,CAAR,GAAuBoC,QAAvB,EAAA;AACEjC,EAAF,CAAA,GAAaH,CAAb,CAAmB,IAAnB,CAAwB,IAAxB,EACoBA,CADpB,CAC0B,IAD1B,CAC+B,WAD/B;AAGA,EAAA,MAAQ0J,CAAR,GAAuB,CAAC3J,CAAxB,EAAwC4J,CAAxC,KAA8E;;AAC9E,IAAA,MAAUX,CAAV,GACMjJ,CADN,CACa,IADb,KACsBuE,CADtB,CACiC,UADjC,IAC+CvE,CAD/C,CACsD,IADtD,KAC+DuE,CAD/D,CAC0E,gBAD1E,EAEU0F,EAFV,GAGMjK,CAHN,CAGa,IAHb,KAGsBuE,CAHtB,CAGiC,SAHjC,IAAA,CAAA,CAIMhG,CAJN,GAIMyB,CAJN,CAIa,QAJb,KAIM,IAJN,GAAA,KAAA,CAAA,GAIMzB,CAJN,CAIuB,MAJvB,CAI8B,CAACsG,CAJ/B,KAIyCA,CAJzC,CAI+C,IAJ/C,KAIwDN,CAJxD,CAImE,OAJnE,CAAA,CAI4E,MAJ5E,MAIuF,CAJvF,EAKUX,CALV,GAKwB5D,CALxB,CAK+B,cAL/B,EAAA,EAMUkK,GANV,GAOMjB,CAPN,IAQMrF,CARN,CAQkB,IARlB;AAQkB,MACV,CAACiB,CATT,KAUUA,CAVV,CAUgB,IAVhB,KAUyBN,CAVzB,CAUoC,UAVpC,IAUkDM,CAVlD,CAUwD,IAVxD,KAUiEN,CAVjE,CAU4E;AAAA,KAF5E,EAIU6F,CAJV,GAKMpK,CALN,CAKa,KALb,KAKuB,CALvB,IAMMA,CANN,CAMa,IANb,KAMsBuE,CANtB,CAMiC,OANjC,IAAA,CAAA,CAOMyE,CAPN,GAAA,CAOM1L,CAPN,GAAA,CAOME,CAPN,GAOMwC,CAPN,CAOa,MAPb,KAOM,IAPN,GAEA,KAFA,CAAA,GAOMxC,CAPN,CAOqB,QAPrB,KAOM,IAPN,GAEA,KAFA,CAAA,GAOMF,CAPN,CAO+B,EAP/B,CAOkC,CAPlC,CAEA,CAFA,KAOM,IAPN,GAEA,KAFA,CAAA,GAOM0L,CAPN,CAOuC,GAPvC,MAO+ChJ,CAP/C,CAOsD,GAPtD,EAQUgK,CARV,GAQuBR,CARvB,IAQwCxJ,CARxC,CAQ+C,IAR/C,KAQwDuE,CARxD,CAQmE,SARnE,EASUsF,CATV,GAAA,CAS4BS,EAT5B,GAS4BvJ,EAT5B,IAS4B,IAT5B,GAEA,KAFA,CAAA,GAS4BA,EAT5B,CAS0C,IAT1C;AAS0C,MACpC,CAAC0C,CARP,KAQoBA,CARpB,CAQ6B,GAR7B,KAQqCzD,CARrC,CAQ4C;AAAA,KAD5C,KAA4B,IAA5B,GACA,KADA,CAAA,GAA4BsK,EAA5B,CAEO,SAFP;AAIA,IAAA,uBAAA,GAAA,CACM1K,GADN;AACMA,MAAC,IADP;AACO,MAAA;AAAA,QAEC,OAFR,EAEiBgE,CAFjB,CAE6B,MAF7B;AAE6B,QACrB,SAHR,EAGmBkF,CAHnB,CAGsB,6BAHtB,EAGqD;AAAA,UAC3C,YAFV,EAAA,CAEwBuB,CAFxB,GAEwBrK,CAFxB,CAE+B,QAF/B,KAEwB,IAFxB,GACA,KADA,CAAA,GAEwBqK,CAFxB,CAEyC,MAFzC;AAEyC,UAC/B,UAFV,EAEsBD,CAFtB;AAEsBA,UACZ,sFAFV,EAGYF,GAHZ;AAGYA,UACF,gBAHVC,EAG4BH;AAAAA,SACnB,CAFT;AAES,QACD,KAFR,EAGU7I,GAHV,GAIc;AAAA,UACE,QAJhB,EAAA,CAI2B8H,CAJ3B,GAIyCQ,CAJzC,GAIgEtI,GAJhE,KAImF;AAAA,SADnF,GAGc,EAHd;AAGc,QAEL,GAAI6I,CAJb,GAKY;AAAA,UACE,OAJd,EAIuB,MAAM;AACbN,YAAhB,CAAA,IAAgB,IAAhB,IAAgBA,CAAhB;AAAgBA,cACE1J,CADlB,CACyB,GADzB;AACyB,cACP6J,CAFlB,KAEsCrL,CAFtC,CAEoD,UAFpD,GAGsBA,CAHtB,CAGoC,SAHpC,GAIsBA,CAJtB,CAIoC;AAAA,aAHpC;AAGoC;AACpB,SADhB,GAIY,IAJZ;AAIY,QAEJ,QALR,kBAAA,GAAA,CAKQ6C,IALR;AAKQA,UAAC,KAFT;AAES,UAAA;AAAA,YACC,SADV,EACqByH,CADrB,CACwB,aADxB,EACuC;AAAA,cAC3B,WAFZ,EAEyBmB,EAFzB;AAEyBA,cACb,yCAFZ,EAEuDD;AAAAA,aAC5C,CAFX;AAEW,YAED,QAHV,EAGU;AAAA,8BAFV,GAAA,CAEUpK,GAFV,CAEW,MAFX,EAEW,EAAK,SAFhB,EAE2B,6CAF3B,EAE0E,KAF1E,EAEiF,EAAE,QAFnF,EAEmFQ,CAFnF,EAAA,EAGa,QAHb,EAEA,CAFA,CAGoB,KAHpB,EAIU,CAJV;AAIU,cACC4J,CAHX,mBAAA,GAAA,CAIYpK,GAJZ;AAIYA,gBAAC,MAFb;AAEa,gBAAA;AAAA,kBACC,SADd,EACyBkJ,CADzB,CAC4B,KAD5B,EACmC;AAAA,oBACnB,SAFhB,EAE2B,CAACe;AAAAA,mBACb,CAFf;AAEe,kBAEA,QAHf,EAGeA,CAHf,KAGmCrL,CAHnC,CAGiD,SAHjD,mBAAA,GAAA,CAIgBoB,GAJhB,CAIiBkK,EAJjB,EAIiB,EAAO,IAJxB,EAI6B,cAJ7B,EAI4C,CAJ5C,mBAAA,GAAA,CAMgBlK,GANhB,CAMiBmK,EANjB,EAMiB,EAAS,IAN1B,EAM+B,cAN/B,EAM8C;AAAA;AAAA,eAA9C,GAGc;AAAA;AAAA;AAAA;AAAA,OAAd;AAAc,MAlDD,CAkDb,EAlDgBH,CAAW,CAkD3B,CAAA,EAlD+B5J,CAkD/B,CAlDsC,GAAG,CAkDzC;AAlDyC,KAmDzC;AAnDyC,GAAzC;AAwDA,EAAA,OAAOkB,CAAP,CAAe,MAAf,mBAAA,GAAA,CAMIG,IANJ,CAMIsH,GANJ,CAAA,QAAA,EAMI,EACE,QAPN,EAOM;AAAA,oBAPN,GAAA,CAOM/I,GAPN,CAOO,IAPP,EAOO,EAAI,QAPX,EAOWsB,CAPX,CAOmB,GAPnB,CAOuByI,CAAY,CAPnC,EAOqC,CAPrC;AAOqC,IAC9BzI,CADP,CACe,CAAC,CADhB,CACkB,QADlB,mBAAA,GAAA,CAEQtB,GAFR;AAEQA,MAACwB,EAFT;AAESA,MAAA;AAAA,QACC,OADV,EACmBF,CADnB,CAC2B,GAD3B,CAC+B,CAAClB,CADhC,KAAA,CAC2CA,CAD3C,IAC2C,IAD3C,GAAA,KAAA,CAAA,GAC2CA,CAD3C,CACmD,QADnD,KAC+D,EAAE,CADjE,CACmE,IADnE,EAAA;AAAA,QAEU,eAFV,EAEU0J,CAFV;AAEUA,QACA,QAFV,EAEUtJ,CAFV;AAEUA,QACA,cAFV,EAEUe,GAFV;AAEUA,QACA,oBAFVzD,EAEU+L,CAFV/L;AAEU+L,QACA,aAFV,EAEUD,CAFV;AAEUA,QACA,YAFV,EAEUzI;AAAAA;AAAA,KAAV,GAEU;AAAA,GAFV,EAGI,CAHJ,GAfW,IAeX;AAKA;AD9HA,SAAwBmI,EAAxB,CAAkC,EAAE,QAApC,EAAoCG,CAApC,EAA8C,SAA9C,EAA8CC,CAA9C,EAAyD,QAAzD,EAAyDtF,EAAzD,EAAA,EAA+F;AAC/F,EAAA,MAAQuF,CAAR,GAAeF,CAAf,GAA0B,IAA1B,GAAiC,IAAjC;AAEA,EAAA,uBAAA,GAAA,CACIzJ,GADJ;AACIA,IAAC2J,CADL;AACKA,IAAA;AAAA,MACC,SADN,EACiBT,CADjB,CACoB,mDADpB,EACyE;AAAA,QACjE,uCAFR,EAEiDO;AAAAA,OADjD,EAESC,CAAS,CAFlB;AAEkB,MAEV,QAHR,EAGQtF;AAAAA;AAAA,GAAR;AAGA;ADJA,MAAMtD,EAAN,GAAiB,CAAC,EAAE,OAApB,EAAoBQ,CAApB,EAA6B,GAA7B,EAA6BpB,CAA7B,EAAkC,UAAlC,EAAkCyI,EAAlC,EAA8C,KAA9C,EAA8CC,CAA9C,GAAsD,CAAtD,EAAyD,yBAAzD,EAAyDhI,CAAzD,EAAA,KAAgG;;AAChG,EAAA,MAAQ,CAACiI,EAAT,EAAqBU,CAAa,CAAlC,GAAsC/G,YAAtC,CAAsCA,QAAtC,CAAwD5B,CAAxD,IAAqF,IAAI,CAAzF,EAEQqI,CAFR,GAEuB,MAAM;AACzBM,IAAJ,CAAA,CAAkB,CAACC,CAAnB,KAAgC,CAACA,CAAQ,CAAzC;AAAyC,GAAzC,EAGQR,CAHR,GAGuB,CAAC5I,CAHxB,EAGwCsG,EAHxC,KAGuF;;AACvF,IAAA,MAAU2C,CAAV,GAAwBjJ,CAAxB,CAA+B,IAA/B,KAAwCuE,CAAxC,CAAmD,UAAnD;AAEA,IAAA,uBAAA,GAAA,CACM3E,GADN;AACMA,MAACsJ,EADP;AACOA,MAAA;AAAA,QAEC,QAFR,EAEkBD,CAFlB;AAEkBA,QACV,SAHR,EAGmBH,CAHnB,CAGsB,UAHtB,EAGkC;AAAA,UACxB,UAFV,EAGY,CAAC9I,CAHb,CAGoB,MAHpB,IAAA,CAAA,CAG8B1C,CAH9B,GAAA,CAG8BE,CAH9B,GAAA,CAG8Be,GAH9B,GAG8ByB,CAH9B,CAGqC,MAHrC,KAG8B,IAH9B,GACA,KADA,CAAA,GAG8BzB,GAH9B,CAG6C,QAH7C,KAG8B,IAH9B,GACA,KADA,CAAA,GAG8Bf,CAH9B,CAGuD,EAHvD,CAG0D,CAH1D,CACA,CADA,KAG8B,IAH9B,GACA,KADA,CAAA,GAG8BF,CAH9B,CAG+D,GAH/D,MAGuE0C,CAHvE,CAG8E,GAH9E,IAGqFiJ;AAAAA,SAC5E,CAHT;AAGS,QAED,QAHR,kBAAA,GAAA,CAGQ5H,IAHR;AAGQA,UAAC,KAFT;AAES,UAAA;AAAA,YACC,SADV,EACoB,mBADpB;AACoB,YACV,KAFV,EAEiB,EAAE,UAFnB,EAE+B4H,CAF/B,GAE6C,CAF7C,EAEgDT,CAFhD,GAEwD,EAAE,CAF1D,EAAA,CAAA,GAEiE,CAFjE,EAAA;AACA,YAGW,QAHX,EAGW;AAAA,cAFX,CAEWQ,CAFX,GAEWlJ,CAFX,CAEe,QAFf,KAEW,IAFX,IAEWkJ,CAFX,CAEyB,MAFzB,IAEmCC,CAFnC,mBAAA,GAAA,CAGYrJ,GAHZ;AAGYA,gBAACmJ,EADb;AACaA,gBAAA;AAAA,kBACC,SADd,EACyBD,CADzB,CAC4B,uCAD5B,EACqE;AAAA,oBACrD,YAFhB,EAE8B,CAACL;AAAAA,mBAChB,CAFf;AAEe,kBACD,OAFd,EAEuBI;AAAAA;AAAA,eAAvB,GAEc,IAFd;AAEc,cAFd,CAGWN,EAHX,IAGW,IAHX,GAEA,KAFA,CAAA,GAGWA,EAHX,CAGwBjC,EAHxB,EAGiCtG,CADjC,CAFA,KAG4CsG,EAH5C,CAGoDtG,CAHpD,CAG2D,GAAG;AAAA;AAAA;AAAA;AAAA,OAA9D;AAA8D,MAnBjD,CAmBb,EAnBgBF,CAmBhB,CAnBoB,EAAE,CAmBtB,CAAA,EAnB0BE,CAmB1B,CAnBiC,GAAG,CAmBpC;AAnBoC,KAoBpC;AApBoC,GAApC,EAyBQ0I,CAzBR,GAyBwB,CAACxH,CAzBzB,EAyB4CoF,EAzB5C,KA0BIpF,CA1BJ,CA0BY,GA1BZ;AA0BY,IAAI,CAAClB,CA1BjB,KA0BiB;;AACjB,MAAA,OAAMA,CAAN,CAAa,IAAb,KAAsBuE,CAAtB,CAAiC,gBAAjC,KAAA,CAAqDhG,EAArD,GAAqDyB,CAArD,CAA4D,KAA5D,KAAqD,IAArD,IAAqDzB,EAArD,CAAmE,MAAnE,CAAA,GACUqK,CADV,CACuB5I,CADvB,CAC8B,KAD9B,CACoCwI,CAAK,CADzC,EAC4ClC,EAAO,CADnD,GAEUsC,CAFV,CAEuB5I,CAFvB,EAE+BsG,EAAO,CAFtC;AAEsC;AAAtC,GAAA;AAGA,EAAA,uBAAA,GAAA,CACIjF,IADJ,CACIsH,GADJ,CAAA,QAAA,EACI,EACE,QAFN,EAEM;AAAA,oBAFN,GAAA,CAEM/I,GAFN;AAEMA,MAAC,IAAP;AAAO,MAAA;AAAA,QACC,SADR,EACkB;AAAA;AAAA,wEADlB,CAAA;AACkB,QAIT,QALT,EAKS8I,CALT,CAKuBxH,CALvB,EAKgCpB,CALhC,CAKoC,IAAI;AAAA;AAAA,KAAxC;AAAwC,IAEjC2I,EAFP,KAAA,CAGQlK,CAHR,GAGQuB,CAHR,CAGY,QAHZ,KAGQ,IAHR,GAAA,KAAA,CAAA,GAGQvB,CAHR,CAGsB,GAHtB,CAG0B,CAAC+J,CAH3B,qBAAA,GAAA,CAIU1I,GAJV;AAIUA,MAACc,EAJX;AAIWA,MAAA;AAAA,QAEC,OAFZ,EAEYQ,CAFZ;AAEYA,QACA,GAHZ,EAGiBoH,CAHjB;AAGiBA,QACL,UAFZ,EAEYC,EAFZ;AAEYA,QACA,KAFZ,EAEmBC,CAFnB,GAE2B;AAAA,OAD3B;AAC2B,MAJVF,CAIjB,CAJwB;AAAA,KAAxB,CAIA;AAJA,GAAA,EAOI,CAPJ;AASA,CAAA,EDjFMF,ECiFN,GDjFgC,KCiFhC,ED/EapB,EC+Eb,GD/EgC,CAACL,CC+EjC,KD9EMA,CC8EN,ID9EgB,IC8EhB,GD7EW,EC6EX,GD1ESA,CC0ET,CD1Ee,QC0Ef,EAAA,CD1E0B,UC0E1B,CD1EqC,GC0ErC,ED1E0C,GAAG,CC0E7C,CD1E+C,WC0E/C,EAAA,EDvEanC,ECuEb,GDvE+B,CAAC6D,CCuEhC,KDtES;AAAA,EACL,GAAGA,CCqEP,CDrEuB,GCqEvB,CDrE2B,CAAApE,CCqE3B,KDrE6C+C,ECqE7C,CDrE8D/C,CAAc,CAAC;AAAA,CAA7E,CACI,IADJ,CACSmE,EAAuB,CADhC,EDXMH,CCWN,GDXkB,ECWlB;ADVA,KAAA,IAASE,CAAT,GAAa,CAAb,EAAgBA,CAAhB,GAAoB,GAApB,EAAyB,EAAEA,CAA3B;AACIF,EAAJ,CAAA,CAAc,IAAd,CAAA,CAAoBE,CAApB,GAAwB,GAAxB,EAA+B,QAA/B,CAAwC,EAAE,CAA1C,CAA4C,KAA5C,CAAkD,CAAC,CAAC,CAApD;AAEO,SAASZ,EAAhB,CAAgCW,CAAhC,EAAqCL,CAArC,GAA8C,CAA9C,EAAiD;AACjD,EAAA,OAAA,CAAYI,CAAZ,CAAsBC,CAAtB,CAA0BL,CAA1B,GAAmC,CAAC,CAAC,CAArC,GACQI,CADR,CACkBC,CADlB,CACsBL,CADtB,GAC+B,CAAC,CAAC,CADjC,GAEQI,CAFR,CAEkBC,CAFlB,CAEsBL,CAFtB,GAE+B,CAAC,CAAC,CAFjC,GAGQI,CAHR,CAGkBC,CAHlB,CAGsBL,CAHtB,GAG+B,CAAC,CAAC,CAHjC,GAIQ,GAJR,GAKQI,CALR,CAKkBC,CALlB,CAKsBL,CALtB,GAK+B,CAAC,CAAC,CALjC,GAMQI,CANR,CAMkBC,CANlB,CAMsBL,CANtB,GAM+B,CAAC,CAAC,CANjC,GAOQ,GAPR,GAQQI,CARR,CAQkBC,CARlB,CAQsBL,CARtB,GAQ+B,CAAC,CAAC,CARjC,GASQI,CATR,CASkBC,CATlB,CASsBL,CATtB,GAS+B,CAAC,CAAC,CATjC,GAUQ,GAVR,GAWQI,CAXR,CAWkBC,CAXlB,CAWsBL,CAXtB,GAW+B,CAAC,CAAC,CAXjC,GAYQI,CAZR,CAYkBC,CAZlB,CAYsBL,CAZtB,GAY+B,CAAC,CAAC,CAZjC,GAaQ,GAbR,GAcQI,CAdR,CAckBC,CAdlB,CAcsBL,CAdtB,GAc+B,EAAE,CAAC,CAdlC,GAeQI,CAfR,CAekBC,CAflB,CAesBL,CAftB,GAe+B,EAAE,CAAC,CAflC,GAgBQI,CAhBR,CAgBkBC,CAhBlB,CAgBsBL,CAhBtB,GAgB+B,EAAE,CAAC,CAhBlC,GAiBQI,CAjBR,CAiBkBC,CAjBlB,CAiBsBL,CAjBtB,GAiB+B,EAAE,CAAC,CAjBlC,GAkBQI,CAlBR,CAkBkBC,CAlBlB,CAkBsBL,CAlBtB,GAkB+B,EAAE,CAAC,CAlBlC,GAmBQI,CAnBR,CAmBkBC,CAnBlB,CAmBsBL,CAnBtB,GAmB+B,EAAE,CAAC,CAnBlC,EAmBqC,WAnBrC,EAAA;AAoBA;AD1BA,IAAIE,EAAJ;AACA,MAAMC,EAAN,GAAc,IAAI,UAAlB,CAA6B,EAAE,CAA/B;AACe,SAASP,EAAxB,GAA8B;AAC9B,EAAA,IAAQ,CAACM,EAAT,EAA0B;AAC1B,IAAA,IAAY,OAAO,MAAnB,GAA8B,GAA9B,IAA6C,CAAC,MAA9C,CAAqD,eAArD;AACA,MAAA,MAAkB,IAAI,KAAtB,CAA4B,0GAA0G,CAAtI;AAEQA,IAAR,EAAA,GAA0B,MAA1B,CAAiC,eAAjC,CAAiD,IAAjD,CAAsD,MAAM,CAA5D;AAA4D;AAE5D,EAAA,OAAWA,EAAX,CAA2BC,EAAK,CAAhC;AACA;ADVA,MAAMF,EAAN,GAAmB,OAAO,MAA1B,GAAqC,GAArC,IAAoD,MAApD,CAA2D,UAA3D,IAAyE,MAAzE,CAAgF,UAAhF,CAA2F,IAA3F,CAAgG,MAAM,CAAtG,EACAJ,EADA,GACe,EAAE,UADjB,EACiBI,EADjB,EAAA;ADGA,SAASH,EAAT,CAAYH,CAAZ,EAAqBI,CAArB,EAA0BC,EAA1B,EAAkC;;AAClC,EAAA,IAAQH,EAAR,CAAe,UAAf,IAAqC,CAACF,CAAtC;AACA,IAAA,OAAeE,EAAf,CAAsB,UAAtB,EAAA;AAEIF,EAAJ,CAAA,GAAcA,CAAd,IAAyB,EAAzB;AACA,EAAA,MAAUF,CAAV,GAAiBE,CAAjB,CAAyB,MAAzB,KAAA,CAAmCjJ,CAAnC,GAAmCiJ,CAAnC,CAA2C,GAA3C,KAAmC,IAAnC,GAAA,KAAA,CAAA,GAAmCjJ,CAAnC,CAAmC,IAAnC,CAAmCiJ,CAAnC,CAAA,CAAA,IAAsDC,EAAtD,EAAA;AACA,EAAA,IAAQH,CAAR,CAAa,MAAb,GAAsB,EAAtB;AACA,IAAA,MAAc,IAAI,KAAlB,CAAwB,mCAAmC,CAA3D;AAEA,EAAA,OAAIA,CAAJ,CAAS,CAAC,CAAV,GAAeA,CAAf,CAAoB,CAAC,CAArB,GAAyB,EAAzB,GAAiC,EAAjC,EACIA,CADJ,CACS,CAAC,CADV,GACeA,CADf,CACoB,CAAC,CADrB,GACyB,EADzB,GACiC,GADjC,EAYWC,EAZX,CAY2BD,CAAI,CAZ/B;AAaA;;ADvBO,MAAMb,EAAb,CAAiB;AAAA,EAMf,WANF,CAMcxE,CANd,EAMyC+B,EANzC,GAM2D,EAN3D,EAM+DK,CAN/D,GAM+E,CAN/E,EAMkF;AALvEuC,IAAX,CAAA,CAAW,IAAX,EAAWK,CAAX,CAAA;AACEL,IAAF,CAAA,CAAE,IAAF,EAAEM,CAAF,CAAA;AACEN,IAAF,CAAA,CAAE,IAAF,EAAEO,CAAF,CAAA;AACWP,IAAX,CAAA,CAAW,IAAX,EAAWQ,CAAX,CAAA;AAGInB,IAAJ,CAAA,CAAI,IAAJ,EAASgB,CAAT,EAAeI,EAAf,EAAA,CAAA,EACIpB,CADJ,CACI,IADJ,EACSiB,CADT,EACiBjF,CADjB,CAAA,EAEIgE,CAFJ,CAEI,IAFJ,EAESkB,CAFT,EAEqBnD,EAFrB,CAAA,EAGIiC,CAHJ,CAGI,IAHJ,EAGSmB,CAHT,EAGkB/C,CAHlB,CAAA;AAAA;AAGkB,EAGhB,IAAI,EAHN,GAGmB;AACnB,IAAA,OAAW0B,CAAX,CAAW,IAAX,EAAgBkB,CAAhB,CAAA;AAAA;AAAgB,EAGd,IAAI,IAHN,GAGkC;AAClC,IAAA,OAAWlB,CAAX,CAAW,IAAX,EAAgBmB,CAAhB,CAAA;AAAA;AAAgB,EAGd,IAAI,IAHN,CAGWjF,CAHX,EAGsC;AAClCgE,IAAJ,CAAA,CAAI,IAAJ,EAASiB,CAAT,EAAiBjF,CAAjB,CAAA;AAAA;AAAiB,EAGf,IAAI,QAHN,GAGwB;AACxB,IAAA,OAAW8D,CAAX,CAAW,IAAX,EAAgBoB,CAAhB,CAAA;AAAA;AAAgB,EAGd,IAAI,QAHN,CAGenD,CAHf,EAGgC;AAC5BiC,IAAJ,CAAA,CAAI,IAAJ,EAASkB,CAAT,EAAqBnD,CAArB,CAAA;AAAA;AAAqB,EAGnB,IAAI,KAHN,GAGsB;AACtB,IAAA,OAAW+B,CAAX,CAAW,IAAX,EAAgBqB,CAAhB,CAAA;AAAA;AAAgB,EAGP,WAHT,GAG8B;AAC9B,IAAA,OAAS,IAAT,CAAc,QAAd,CAAuB,MAAvB,GAIW,IAJX,CAIgB,QAJhB,CAIyB,MAJzB,CAIuC,CAAC1E,CAJxC,EAI6CmC,EAJ7C,KAKa,CAAC,GAAGnC,CALjB,EAKsB,GAAGmC,EALzB,CAK+B,WAL/B,EAK4C,CAL5C,EAMO,EAAE,CANT,GACa,CAAC,IAAI,CADlB;AACkB;AAOlB;AA7CWoC,CAAXA,mBAAAA,IAAAA,OAAAA,EAAAA,EACEC,CADFD,mBAAAA,IAAAA,OAAAA,EAAAA,EAEEE,CAFFF,mBAAAA,IAAAA,OAAAA,EAAAA,EAGWG,CAHXH,mBAAAA,IAAAA,OAAAA,EAAAA;;ADMA,MAAMjE,EAAN,CAAe;AAAA,EAUb,WAVF,CAWID,CAXJ,EAYIpF,EAZJ,EAaIS,CAbJ,GAaiC,EAbjC,EAcIb,CAdJ,GAcoC,EAdpC,EAeIJ,EAfJ,GAe6B,IAf7B,EAgBI;AAfOyJ,IAAX,CAAA,CAAW,IAAX,EAAWzB,CAAX,CAAA;AACWyB,IAAX,CAAA,CAAW,IAAX,EAAWxB,CAAX,CAAA;AACWwB,IAAX,CAAA,CAAW,IAAX,EAAWvB,CAAX,CAAA;AACWuB,IAAX,CAAA,CAAW,IAAX,EAAWtB,CAAX,CAAA;AACWsB,IAAX,CAAA,CAAW,IAAX,EAAWrB,CAAX,CAAA;AACWqB,IAAX,CAAA,CAAW,IAAX,EAAWpB,CAAX,CAAA;AACEoB,IAAF,CAAA,CAAE,IAAF,EAAEnB,CAAF,CAAA;AACEmB,IAAF,CAAA,CAAE,IAAF,EAAElB,CAAF,EAAwD,EAAxD,CAAA;AAiDEkB,IAAF,CAAA,CAAE,IAAF,EAAEjB,CAAF,EAAwB,CAACQ,EAAzB,EAAyD9H,EAAzD,KACWA,EADX,IACW,IADX,GAAA,KAAA,CAAA,GACWA,EADX,CACuB,GADvB,CAC2B,CAACP,EAD5B,MAEWiI,CAFX,CAEW,IAFX,EAEgBL,CAFhB,CAAA,CAEuC5H,EAFvC,CAEiD,IAAI,CAFrD,KAGQiI,CAHR,CAGQ,IAHR,EAGaL,CAHb,CAAA,CAGoC5H,EAHpC,CAG8C,IAAI,CAHlD,mBAAA,IAG0D,GAH1D,EAAA,CAAA,EAKMiI,CALN,CAKM,IALN,EAKWL,CALX,CAAA,CAKkC5H,EALlC,CAK4C,IAAI,CALhD,CAKkD,GALlD,CAKsDqI,EALtD,CAK6DrI,EAL7D,CAKuE,IAAI,CAAC,CAL5E,EAOaqI,EAPb,CAOoBrI,EAPpB,CAO8B,IAAI,CAPlC,CAAA,CAAA,CAAA;AAWE8I,IAAF,CAAA,CAAE,IAAF,EAAEhB,EAAF,EAAuC,CAACO,EAAxC,KACIJ,CADJ,CACI,IADJ,EACSX,CADT,CAAA,CACmB,MADnB,CAC0B,CAACkB,EAD3B,EACoC7E,EADpC,MACiD;AAAA,MAC3C,GAAG6E,EAFT;AAESA,MACH,CAAC9B,EAFP,CAEuB,CAAC,GAAGuB,CAF3B,CAE2B,IAF3B,EAEgCJ,CADhC,CADA,CAE2B,IAF3B,CACA,IADA,EAEoDQ,EAFpD,EAE4DJ,CAF5D,CAE4D,IAF5D,EAEiET,CADjE,CAAA,CADA,EAEqF7D,EAFrF,CAE6F,IAAI,CAAC,CAAC,GAAG0E,EAFtG,CAE6G1E,EAF7G,CAEqH,IAAI;AAAA,KADzH,CAAA,EAEQ,EAAE,CADV,CADA;AAKEmF,IAAF,CAAA,CAAE,IAAF,EAAEf,CAAF,EAAsB,CAACgB,EAAvB,EAAgDE,EAAhD,EAAgE9E,EAAhE,KAAiG;AACjG,MAAA,IAAQ,CAAC8E,EAAT,CAAc,MAAd,EAAsB;AAChBF,QAAAA,EAAN,CAAgB,IAAhB,GAAuB,EAAE,GAAGA,EAA5B,CAAsC,IAAtC,EAA4C,GAAG5E,EAA/C,EAAA;AACA,QAAA;AAAA;AAGA,MAAA,MAAU6E,EAAV,GAAuBE,EAAvB,CAAwCD,EAAxC,CAA6C,CAAC,CAAC,CAA/C;AAGSF,MAAAA,EAAT,CAAmB,QAAnB,CAA4B,GAA5B,CAAgCC,EAAU,CAA1C,IACMD,EADN,CACgB,QADhB,CACyB,GADzB,CAC6BC,EAD7B,EACyC;AAAA,QACjC,IAFR,EAEc,EAFd;AAEc,QACN,QAFR,kBAAA,IAEsB,GAFtB;AACA,OAEO,CAFP,EAKIf,CALJ,CAKI,IALJ,EAKSF,CAJT,CADA,CAKI,IALJ,CACA,IADA,EAK2BgB,EAL3B,CAKqC,QALrC,CAK8C,GAL9C,CAKkDC,EAAU,CAL5D,EAKgEC,EALhE,CAKqE,KALrE,CAK2E,CAAC,CAL5E,EAK+E9E,EAJ/E,CADA;AACA,KAIA,CAJA;AAOE2E,IAAF,CAAA,CAAE,IAAF,EAAEd,CAAF,EAAgC,CAACY,EAAjC,EAAgErC,EAAhE,GAAwE,CAAxE,KAAqF;AACrF,MAAA,MAAU1C,EAAV,GAAwB,EAAxB;AAEA,MAAA,IAAQoE,CAAR,CAAQ,IAAR,EAAaV,CAAb,CAAA,CAA4B,MAA5B;AACA,QAAA,KAAA,MAAiB,GAAGsB,EAAK,CAAzB,IAA8BD,EAA9B,CAA8C,QAA9C;AACQ/E,UAAAA,EAAR,CAAa,IAAb,CAAkB,IAAI8E,EAAtB;AAAsBA,YACZE,EADV,CACgB,IADhB;AACgB,YACNZ,CAFV,CAEU,IAFV,EAEeD,CADf,CADA,CAEU,IAFV,CACA,IADA,EAE2Ca,EAF3C,EAEkDtC,EAFlD,GAE0D,CAD1D,CADA;AACA,YAEUA;AAAAA,WACD,CAFT;AAES;AAGH1C,QAAAA,EAAN,CAAW,IAAX,CAAgB,IAAI8E,EAApB,CAAwBC,EAAxB,CAAwC,IAAI,CAAC,CAA7C;AAGA,MAAA,OAAW/E,EAAX;AAAWA,KAAX,CAAA;AA5FIsE,IAAJ,CAAA,CAAI,IAAJ,EAASd,CAAT,EAA4BpC,CAA5B,CAAA,EACIkD,CADJ,CACI,IADJ,EACSb,CADT,EACqBzH,EADrB,CAAA,EAEIsI,CAFJ,CAEI,IAFJ,EAESZ,CAFT,EAE0BjH,CAF1B,IAE2C,EAF3C,CAAA,EAGI6H,CAHJ,CAGI,IAHJ,EAGSX,CAHT,EAG6B/H,CAH7B,CAAA,EAII0I,CAJJ,CAII,IAJJ,EAIST,CAJT,EAImCrI,EAJnC,CAAA,EAMI8I,CANJ,CAMI,IANJ,EAMSV,CANT,EAM4BQ,CAN5B,CAM4B,IAN5B,EAMiCZ,CANjC,CAAA,CAMkD,MANlD,CAMyD,CAACiB,CAN1D,EAMqEF,CANrE,EAMoFM,CANpF,KAM2G;AAC3G,MAAA,MAAYH,CAAZ,GAAuCN,CAAvC,CAAuC,IAAvC,EAA4CP,CAA5C,CAAA,GAAsEO,CAAtE,CAAsE,IAAtE,EAA2EV,CAA3E,CAAA,CAA0F,KAA1F,CAAgG,CAAhG,EAAmGmB,CAAnG,GAAwH,CAAC,CAAzH,GAA6HT,CAA7H,CAA6H,IAA7H,EAAkIV,CAAlI,CAAA;AAEA,MAAA,OAAMa,CAAN,CAAoB,OAApB,CAA4B,CAAAC,CAA5B,KAAsC;AACtC,QAAA,MAAcI,CAAd,GAA4BR,CAA5B,CAA4B,IAA5B,EAAiCJ,CAAjC,CAAA,CAA4B,IAA5B,CAAA,IAAA,EAAqDQ,CAArD,EAA6DE,CAA7D,CAAA,EACcC,EADd,GAC6C;AAAA,UACnC,GAAGP,CAFb,CAEa,IAFb,EAEkBH,EADlB,CADA,CAEa,IAFb,CACA,IADA,EAEqDO,CADrD,CADA;AACA,UAEU,GAAGE,CAFb,CAEsC,MAFtC,CAE6C,CAAC3D,CAF9C,EAEmDpE,EAFnD,MAEqE;AAAA,YACzD,GAAGoE,CAFf;AAEeA,YACH,CAACpE,EAFb,CAE0B,IAAI,GAAG6H,CAFjC,CAEwC7H,EAFxC,CAEqD,IAAI;AAAA,WADzD,CAAA,EAEc,EAAE;AAAA,SADhB;AAKY+H,QAAZ,CAAA,CAAqC,MAArC,IAA+CN,CAA/C,CAA+C,IAA/C,EAAoDV,CAApD,CAAA,CAAmE,MAAnE,GAA4E,CAA5E,KACUiB,EADV,CACkB,aAAa,CAD/B,GACmCH,CADnC,CAC0CE,CAD1C,CACmE,EADnE,CACsE,CADtE,CACwE,CADxE,CAC2E,IAAI,CAD/E,CAAA,EAIQN,CAJR,CAIQ,IAJR,EAIaF,CAJb,CAAA,CAIQ,IAJR,CAAA,IAAA,EAI+BO,CAJ/B,EAI0CG,CAJ1C,EAIuDD,EAJvD,CAAA;AAAA,OAKO,CALP,EAOaF,CAPb;AAOaA,KAHb,EAIO,EAAE,IAJT,EAIe,EAJf,EAImB,QAJnB,kBAAA,IAIiC,GAJjC,EAAA,EAIwC,CADxC,CAHA,EAOQ,CAACL,CAPT,CAOS,IAPT,EAOcV,CAJd,CAHA,CAO6B,MAP7B,IAOuCU,CAPvC,CAOuC,IAPvC,EAO4CT,CAJ5C,CAHA,CAO8D,MAP9D,IAQMS,CARN,CAQM,IARN,EAQWZ,CALX,CAHA,CAQ4B,OAR5B,CAQoC,CAACe,CARrC,KAQuD;AAC/CA,MAAR,CAAA,CAAsB,OAAtB,CAA8B,CAAAC,CAA9B,KAAwCJ,CAAxC,CAAwC,IAAxC,EAA6CJ,CAA7C,CAAA,CAAwC,IAAxC,CAAA,IAAA,EAAiEQ,CAAjE,EAAyEJ,CAAzE,CAAyE,IAAzE,EAA8ET,CAA9E,CAAA,CAAgG,CAAhG;AAAgG,KACzF,CADP,EAIIW,CAJJ,CAII,IAJJ,EAISR,CAJT,EAIiB,IAJjB,CAAA;AAAA;AAIiB,EA0Df,IAAI,IA1DN,GA0Da;AACb,IAAA,OAASM,CAAT,CAAS,IAAT,EAAcN,CAAd,CAAA,IACMQ,CADN,CACM,IADN,EACWR,CADX,EACmBM,CADnB,CACmB,IADnB,EACwBD,CADxB,CAAA,CACmB,IADnB,CAAA,IAAA,EACoDC,CADpD,CACoD,IADpD,EACyDR,CADzD,CAAA,CAAA,CAAA,EAGWQ,CAHX,CAGW,IAHX,EAGgBN,CAHhB,CAAA;AAAA;AAGgB,EAGP,wBAHT,CAGkCO,CAHlC,EAGyD;AACzD,IAAA,OAAW,CAAC,GAAGD,CAAf,CAAe,IAAf,EAAoBL,CAApB,CAAA,CAA2CM,CAAa,CAAC,CAAzD;AAAyD;AAEzD;AAzHWb,CAAXA,mBAAAA,IAAAA,OAAAA,EAAAA,EACWC,CADXD,mBAAAA,IAAAA,OAAAA,EAAAA,EAEWE,CAFXF,mBAAAA,IAAAA,OAAAA,EAAAA,EAGWG,CAHXH,mBAAAA,IAAAA,OAAAA,EAAAA,EAIWI,CAJXJ,mBAAAA,IAAAA,OAAAA,EAAAA,EAKWK,CALXL,mBAAAA,IAAAA,OAAAA,EAAAA,EAMEM,CANFN,mBAAAA,IAAAA,OAAAA,EAAAA,EAOEO,CAPFP,mBAAAA,IAAAA,OAAAA,EAAAA,EAwDEQ,CAxDFR,mBAAAA,IAAAA,OAAAA,EAAAA,EAmEES,EAnEFT,mBAAAA,IAAAA,OAAAA,EAAAA,EA0EEU,CA1EFV,mBAAAA,IAAAA,OAAAA,EAAAA,EA6FEW,CA7FFX,mBAAAA,IAAAA,OAAAA,EAAAA;ADQO,MAAMV,CAAb,CAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsElB,WAtEF,CAsEc;AAAA,IACV,KAvEJ,EAuEIlD,CAvEJ;AAuEIA,IACA,GAFJ,EAEI+B,EAFJ;AAEIA,IACA,IAFJ,EAEIyB,CAFJ;AAEIA,IACA,QAFJ,EAEIC,CAFJ;AAEIA,IACA,KAFJ,EAEIX,EAFJ,GAEY,CAFZ;AAEY,IACR,QAFJ,EAEIL,CAFJ;AAEIA,IACA,MAFJ,EAEIG,CAFJ;AAEIA,IACA,KAFJ,EAEIc;AAAAA,GADJ,EAEmB;AAzEjBC,IAAF,CAAA,CAAE,IAAF,EAAA,OAAA,CAAA;AAOEA,IAAF,CAAA,CAAE,IAAF,EAAA,KAAA,CAAA;AAOEA,IAAF,CAAA,CAAE,IAAF,EAAA,MAAA,CAAA;AAOEA,IAAF,CAAA,CAAE,IAAF,EAAA,UAAA,CAAA;AAOEA,IAAF,CAAA,CAAE,IAAF,EAAA,OAAA,CAAA;AAOEA,IAAF,CAAA,CAAE,IAAF,EAAA,UAAA,CAAA;AAOEA,IAAF,CAAA,CAAE,IAAF,EAAA,QAAA,CAAA;AAQEA,IAAF,CAAA,CAAE,IAAF,EAAA,OAAA,CAAA;AAwBA,IAAA,IAAA,CAAS,KAAT,GAAiB3D,CAAjB,EACI,IADJ,CACS,GADT,GACe+B,EADf,EAEI,IAFJ,CAES,IAFT,GAEgByB,CAFhB,EAGI,IAHJ,CAGS,QAHT,GAGoBC,CAHpB,IAGgC,IAHhC,EAII,IAJJ,CAIS,KAJT,GAIiBX,EAJjB,EAKI,IALJ,CAKS,MALT,GAKkBF,CALlB,IAK4B,IAL5B,EAMI,IANJ,CAMS,QANT,GAMoBH,CANpB,IAMgC,IANhC,EAOI,IAPJ,CAOS,KAPT,GAOiBiB,CAPjB,IAO0B,IAP1B;AAO0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASjB,WATT,CASqBH,CATrB,EASuD;AACvD,IAAA,OAAA,IAAA,CAAS,QAAT,GAAoB;AAAA,MACd,GAAG,IADT,CACc,QADd,IAC0B,EAD1B;AAC0B,MACpB,GAAGA;AAAAA,KADT,EAIW,IAJX,CAIgB,QAJhB;AAIgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQP,cART,GAQoC;;AACpC,IAAA,OAAA,CAASvG,CAAT,GAAS,IAAT,CAAc,QAAd,KAAS,IAAT,IAASA,CAAT,CAAwB,MAAxB,GAIW,IAJX,CAIgB,QAJhB,CAIyB,MAJzB,CAI0C,CAACmE,EAJ3C,EAIgDmC,CAJhD,KAKa,CAAC,GAAGnC,EALjB,EAKsB,GAAGmC,CALzB,CAK+B,cAL/B,EAK+C,CAL/C,EAMO,EAAE,CANT,GACa,CAAC,IAAI,CADlB;AACkB;AAOlB;AD3HO,MAAMpC,EAAb,GAA+B,CAC7BlF,CADF,EAEEa,CAFF,EAGET,EAHF,EAIEkG,CAJF,EAKEtB,CALF,GAQM,EARN,KASsB;AACtB,EAAA,MAAQtC,EAAR,GAAuBoC,QAAvB,EAAA;AAEA,EAAA,SAAWsC,CAAX,CACIxH,CADJ,GACsC,KADtC,EAEIgH,EAFJ,GAE4B,IAF5B,EAGc;AACd,IAAA,MAAUS,CAAV,GAA6BxG,CAA7B,CAA2C,GAA3C;AAA2C,MACrC,CAACE,EADP,KAEQ,IAAImG,CAFZ,CAEmB;AAAA,QACT,KAHV,EAGiBnG,EAHjB,CAG8B,KAH9B;AAG8B,QACpB,GAFV,EAEeA,EAFf,CAE4B,IAF5B;AAE4B,QAClB,KAFV,EAEiBf,CAFjB,CAEkC,MAFlC;AAEkC,QACxB,IAFV,EAEgBgH,CAFhB,CAE2B,UAF3B;AAE2B,QACjB,QAFV,EAEoBjG,EAFpB,CAEiC,UAFjC;AAEiC,QACvB,MAFV,EAEU6F;AAAAA,OACD;AAAA,KADT;AAIA,IAAA,OAAQhH,CAAR,GACa;AAAA,MACL,IAAIsH,CAFZ,CAEmB;AAAA,QACT,KAFV,EAEiBrG,CAFjB,CAE+B,GAF/B,CAEmC,CAACE,EAFpC,KAEqDA,EAFrD,CAEkE,KAAK,CAFvE,CAEyE,IAFzE,CAE8E,KAAK,CAFnF;AAEmF,QACzE,GAFV,EAEe,aAFf;AAEe,QACL,KAFV,EAEiBf,CAFjB,CAEkC,MAFlC;AAEkC,QACxB,IAFV,EAEgBgH,CAFhB,CAE2B,gBAF3B;AAE2B,QACjB,KAFV,EAEiBK,CAFjB;AAEiBA,QACP,MAFV,EAEUT;AAAAA,OACD;AAAA,KADT,GAIaS,CAJb;AAIaA;AAIb,EAAA,SAAWb,CAAX,CACIxG,CADJ,EAEI8G,EAFJ,GAEoB,CAFpB,EAGIF,CAHJ,GAG4B,IAH5B,EAIc;AACd,IAAA,IAAQ,CAAC5G,CAAT,CAA0B,MAA1B;AACA,MAAA,OAAaoH,CAAb;AAAaA,QACLpC,CADR,CACe,sBADf,IACyCnE,CADzC,CACuD,MADvD,GACgE,CADhE;AACgE,QACxD+F;AAAAA,OADR;AAKA,IAAA,MAAU,CAACG,EAAX,EAAmC,GAAGF,CAAoB,CAA1D,GAA8D7G,CAA9D,EAEUmH,CAFV,GAE+B,IAAID,CAFnC,CAE0C;AAAA,MACpC,KAHN,EAGaH,EAHb,CAGoC,KAHpC;AAGoC,MAC9B,GAFN,EAEWA,EAFX,CAEkC,IAFlC;AAEkC,MAC5B,KAFN,EAEMD,EAFN;AAEMA,MACA,IAFN,EAEYE,CAFZ,CAEuB,SAFvB;AAEuB,MACjB,QAFN,EAEgBD,EAFhB,CAEuC,UAFvC;AAEuC,MACjC,MAFN,EAEMH;AAAAA,KACD,CAFL,EAIUH,CAJV,GAIqBD,CAJrB,CAI+CK,CAJ/C,EAIqEC,EAJrE,GAI6E,CAJ7E,EAIgFK,CAAkB,CAJlG;AAKA,IAAA,OAAIA,CAAJ,CAAuB,WAAvB,CAAmCV,CAAQ,CAA3C,EAEW,CAACU,CAAkB,CAF9B;AAE8B;AAG9B,EAAA,SAAWZ,CAAX,CACIvG,CADJ,EAEI8G,EAFJ,GAEY,CAFZ,EAGIF,CAHJ,GAG4B,IAH5B,EAIID,EAJJ,GAIsC,EAJtC,EAKc;AACd,IAAA,IAAQ,CAAC3G,CAAT,CAA0B,MAA1B;AACA,MAAA,OAAaI,EAAb,CAAsB,GAAtB;AAAsB,QACd,CAAC8D,CADT,KAEU,IAAIgD,CAFd,CAEqB;AAAA,UACT,KAHZ,EAGmBhD,CAHnB,CAG2B,KAH3B;AAG2B,UACf,GAFZ,EAEiB+C,EAFjB,CAEiC,CAAC,GAAGN,EAFrC,EAE4DzC,CAF5D,CAEoE,IAAI,CAAC,CAFzE;AAEyE,UAC7D,KAFZ,EAEY4C,EAFZ;AAEYA,UACA,IAFZ,EAEkBE,CAFlB,CAE6B,OAF7B;AAE6B,UACjB,QAFZ,EAEsB9C,CAFtB,CAE8B,UAF9B;AAE8B,UAClB,MAFZ,EAEoB0C,CAFpB,IAE8B;AAAA,SACnB;AAAA,OADX;AAKA,IAAA,MAAU,CAACG,CAAX,EAAmC,GAAGF,CAAoB,CAA1D,GAA8D7G,CAA9D;AAEA,IAAA,OAAWsG,CAAX,CAAiCS,CAAjC,CAAwD,IAAI,CAA5D,CAA8D,GAA9D,CAAkE,CAACL,CAAnE,KAAsF;AACtF,MAAA,MAAYjE,CAAZ,GAAqB,IAAIyE,CAAzB,CAAgC;AAAA,QACxB,KADR,EAEUnE,EAFV,CAEsB2D,CAFtB,EAEsC;AAAA;AAAA,UAE1B,GAAI1B,CAJhB,CAIuB,WAJvB,IAIsC+B,CAJtC,CAI6D,UAJ7D,KAI4E,MAJ5E,IAIsFL,CAJtF,GAKgB;AAAA,YACE,UAJlB,EAKoBhE,EALpB,CAK0B,WAL1B,CAKsCsC,CALtC,CAK6C,WAA6C;AAAA,WAF1F,GAIgB;AAAA,SACL,CAHX,IAGgB,GAHhB;AAGgB,QACR,GAFR,EAEaiC,EAFb,CAE6B,CAAC,GAAGN,EAFjC,EAEwDD,CAAc,CAAC,CAFvE;AAEuE,QAC/D,KAFR,EAEQI,EAFR;AAEQA,QACA,IAFR,EAEcE,CAFd,CAEyB,SAFzB;AAEyB,QACjB,QAFR,EAEkBD,CAFlB,CAEyC,UAFzC;AAEyC,QACjC,MAFR,EAEQH;AAAAA,OACD,CAFP,EAIYH,CAJZ,GAIuBF,CAJvB,CAI4CM,CAJ5C,EAIkEC,EAJlE,GAI0E,CAJ1E,EAI6ErE,CAJ7E,EAIqF;AAAA,QAC7E,GAAGkE,EAJX;AAIWA,QACHD;AAAAA,OACD,CAFP;AAGA,MAAA,OAAMjE,CAAN,CAAa,WAAb,CAAyBgE,CAAQ,CAAjC,EAEahE,CAFb;AAEaA,KACR,CAHL;AAGK;AAGL,EAAA,MAAQkB,CAAR,GAA4BI,YAA5B,CAA4BA,OAA5B;AAA4BA,IACxB,MAAM;AAAA,MACJ,GAAIlD,CAFV,CAEwB,MAFxB,GAEiC2F,CAFjC,CAE2DxG,CAAgB,CAF3E,GAE+E,EAF/E;AAE+E,MACzE,GAAGuG,CAFT,CAE8BvG,CAAgB;AAAA,KAD9C;AAC8C,IAE1C;AAAA,MACEA,CAHN;AAGMA,MACAa,CAFN;AAEMA,MACAT,EAFN;AAEMA,MACAkG,CAFN;AAEMA,MACAtB,CAFN,CAEa;AAAA;AAAA,GAAb,EAIQqB,CAJR,GAIgCtC,YAJhC,CAIgCA,OAJhC;AAIgCA,IAC5B,MAAMJ,CALVM,CAKkB,GALlBA,CAKsB,CAACxB,CALvBwB,KAKkCxB,CALlCwB,CAKyC,cALzCA,EAKyD,CALzDA,CAK2D,IAL3DA,EAAAA;AAIA,IAEI,CAACN,CAAO;AAAA,GADZ;AAIA,EAAA,OAAS;AAAA,IACL,OADJ,EACIA,CADJ;AACIA,IACA,cAFJ,EAEoB,MAAM0C;AAAAA,GAD1B;AAGA,CAAA;AD1JA,SAASP,EAAT,CAAqBM,CAArB,EAA8BL,CAA9B,EAAsE;AACtE,EAAA,OAAS,OAAOA,CAAhB,IAAwB,UAAxB,GAAqCA,CAArC,CAAyCK,CAAI,CAA7C,GAAiDA,CAAjD,CAAsDL,CAAG,CAAzD;AACA;AAEA,SAASH,EAAT,CAAkBO,CAAlB,EAAqC;AACrC,EAAA,OAAS,CAAC,KAAV,CAAgBA,CAAG,CAAnB;AACA;AAEA,MAAa3B,EAAb,GAA2B,CAAI0B,CAA/B,KACS,CAACb,CADV,EACgBC,EADhB,KACiC;AACjC,EAAA,KAAA,MAAe,EAAE,GAAjB,EAAiBS,CAAjB,EAAsB,SAAtB,EAAsBE,CAAtB,EAAA,IAAqCC,CAArC,EAA+C;AAC/C,IAAA,MAAYL,EAAZ,GAAqBC,EAArB,CAA8BT,CAA9B,EAAiCU,CAAG,CAApC,IAAyC,CAAzC,EACYC,CADZ,GACqBF,EADrB,CAC8BR,EAD9B,EACiCS,CAAG,CADpC,IACyC,CADzC,EAGY5D,CAHZ,GAGqBoD,EAHrB,CAGiCM,EAHjC,EAGyCG,CAHzC,EAGiDC,CAAS,CAH1D;AAIA,IAAA,IAAU9D,CAAV,KAAqB,CAArB;AACA,MAAA,OAAeA,CAAf;AAAeA;AAGf,EAAA,OAAW,CAAX;AAAW,CAAX,CAAA,CAIaoD,EAJb,GAI2B,CAACF,CAJ5B,EAIoCC,CAJpC,EAI4CjC,GAJ5C,KAIqF;AACrF,EAAA,IAAMuC,EAAN,CAAeP,CAAC,CAAhB,IAAqBO,EAArB,CAA8BN,CAAC,CAA/B,EAAkC;AAClC,IAAA,MAAUI,CAAV,GAAiB,QAAjB,CAA0BL,CAA1B,EAA6B,EAAE,CAA/B,EACUM,CADV,GACiB,QADjB,CAC0BL,CAD1B,EAC6B,EAAE,CAD/B;AAGA,IAAA,OAAA,CAAYI,CAAZ,GAAmBC,CAAnB,KAA4BtC,GAA5B,KAA8CpC,CAA9C,CAA4D,SAA5D,GAAwE,CAAxE,GAA4E,CAA5E,CAAA,CAAA;AAA4E,GAA5E,MAAA,OAEa,OAAOoE,CAFpB,IAE0B,QAF1B,IAEsC,OAAOC,CAF7C,IAEmD,QAFnD,GAGWD,CAHX,CAGa,aAHb,CAG2BC,CAH3B,EAG8B,KAH9B,CAAA,EAGyC;AAAA,IACnC,WAJN,EAImB,MAJnB;AAImB,IACb,OAFN,EAEe;AAAA,GACV,CAFL,IAEUjC,GAFV,KAE4BpC,CAF5B,CAE0C,SAF1C,GAEsD,CAFtD,GAE0D,CAF1D,CAAA,CAAA,GAGa,OAAOoE,CAHpB,IAG0B,QAH1B,GAIW,CAJX,CAAA,GAMW,CANX;AAQA,CAAA,CAAA,CDhCaV,ECgCb,GDhC6B,CAC3Ba,CC+BF,ED9BEpF,CC8BF,ED7BES,GC6BF,GD7B+B,EC6B/B,ED5BEb,CC4BF,GD5BkC,EC4BlC,ED3BEgF,CC2BF,GDvBM,ECuBN,KDtBqB;AACrB,EAAA,MAAQD,EAAR,GAAmBhB,YAAnB,CAAA,OAAA,CAA2B,MAAM,IAAI0B,EAArC;AAAqCA,IACjCD,CADJ;AACIA,IACApF,CAFJ;AAEIA,IACAS,GAFJ;AAEIA,IACAb,CAFJG;AAEIH,IACAgF,CAFJ,CAEW;AAAA,GADX,EAEK,CAACQ,CAFN,EAEuBpF,CAFvB,EAEiCS,GAFjC,EAEgDb,CAFhD,EAEkEgF,CAFlE,CAEyE,sBAAsB,CAAC,CAFhG,EAIQC,CAJR,GAIiClB,YAJjC,CAIiCA,OAJjC,CAIyC,MAAM/D,CAJ/C,CAIgE,MAJhE,CAIuE,CAACmF,CAJxE,EAI6EC,CAJ7E,MAIkG;AAAA,IAC9F,GAAGD,CAJP;AAIOA,IACH,CAACC,CAFL,CAEqB,IAAI,GAAGL,EAF5B,CAEqC,wBAFrC,CAE8DK,CAF9D,CAE8E,IAAI,CAFlF,CAEoF,IAFpF,CAEyF,CAACC,CAF1F,EAE6FC,EAF7F,KAEmGC,EAFnG,CAE+GF,CAF/G,EAEkHC,EAFlH,EAEqHN,CAFrH,CAE4H,kBAF5H,IAEkJ/D,CAFlJ,CAEgK,SAAS,CAAC;AAAA,GAD1K,CAAA,EAEM,EAAE,CAFR,EAEW,CAACjB,CAFZ,EAE8B+E,EAF9B,EAEwCC,CAFxC,CAE+C,kBAAkB,CAAC,CAFlE,EAIQ,EAAE,OAJV,EAIUrB,CAJV,EAImB,cAJnB,EAImBT,CAJnB,EAAA,GAIsCgC,EAJtC;AAIsCA,IAClClF,CAJJ;AAIIA,IACAa,GAFJ;AAEIA,IACAT,CAFJD;AAEIC,IACA6E,CAFJ;AAEIA,IACA;AAAA,MACE,sBAFN,EAE8BD,CAF9B,CAEqC,sBAFrC;AAEqC,MAC/B,WAFN,EAEmBA,CAFnB,CAE0B;AAAA;AAAA,GAA1B;AAIA,EAAA,OAAS;AAAA,IACL,IADJ,EACUD,EADV,CACmB,IADnB;AACmB,IACf,OAFJ,EAEIpB,CAFJ;AAEIA,IACA,cAFJ,EAEIT;AAAAA,GADJ;AAGA,CAAA,CAAA,CD1BMd,EC0BN,GD1BmB,CAAK;AAAA,EACtB,sBCyBF,EDzBExC,CCyBF,GDzB2B,ICyB3B;ADzB2B,EACzB,gBAFF,EAEEI,CAFF;AAEEA,EACA,oBAFF,EAEEyD,EAFF,GAEyB,IAFzB;AAEyB,EACvB,IAFF,EAEEiB,CAFF;AAEEA,EACA,mCAFF,EAEED,CAFF;AAEEA,EACA,gCAFF,EAEEG,EAFF;AAEEA,EACA,QAFF,EAEE/B,CAFF,GAEa,MAFb;AAEa,EACX,WAFF,EAEEF,CAFF;AAEEA,EACA,yBAFF,EAEEM,CAFF,GAE8B,IAF9B;AAE8B,EAC5B,QAFF,EAEE7C,CAFF;AAEEA,EACA,cAFF,EAEEwD,CAFF;AAEEA,EACA,0BAFF,EAEEF,CAFF;AAEEA,EACA,kBAFF,EAEEZ,EAFF,GAEuB,EAFvB;AAEuB,EACrB,aAFF,EAEEjC;AACF,CAAA,KAAgB;AAChB,EAAA,MAAQ6B,EAAR,GAAuBoC,QAAvB,EAAA;AACEjC,EAAF,CAAA,GAAaH,EAAb,CAAmB,IAAnB,CAAwB,IAAxB;AAEA,EAAA,MAAQ,CAACc,CAAT,EAAuBD,CAAe,CAAtC,GAA0CsB,YAA1C,CAA0CA,QAA1C,CAAwE,MAChE,CAAChE,CADT,IAC0B,CAAC+D,EAD3B,GAEa,EAFb,GAKW;AAAA,IACL;AAAA,MACE,GAFR,EAEa/D,CAFb,CAE2B,MAF3B,KAEsC,CAFtC,GAE0CA,CAF1C,CAEwD,CAAC,CAFzD,CAE2D,IAF3D,GAEkE,aAFlE;AAEkE,MAC1D,SAFR,EAEmB+D;AAAAA;AAAA,GAGhB,CAHH,EAKQ,EAAE,IALV,EAKUR,CALV,EAKgB,OALhB,EAKgBT,CALhB,EAKyB,cALzB,EAKyBT,CALzB,EAAA,GAK4CyB,EAL5C;AAK4CA,IACxCD,CANJ;AAMIA,IACAtE,CAFJ;AAEIA,IACAS,CAFJ;AAEIA,IACAb,CAFJ;AAEIA,IACA;AAAA,MACE,sBAFN,EAEMJ,CAFN;AAEMA,MACA,kBAFN,EAE0B6E,CAF1B;AAE0BA,MACpB,WAFN,EAEM9B;AAAAA;AAAA,GAAN,EAIQwB,CAJR,GAImB,CAACC,CAJpB,EAIiCZ,CAJjC,KAI8E;AAC9E,IAAA,MAAUJ,EAAV,GAAuB,CAAC,GAAGgB,CAAI,CAA/B;AACAhB,IAAAA,OAAIA,EAAJA,CAAe,IAAfA,CAAoBoB,EAApBpB,CAAgCI,CAAY,CAAC,CAA7CJ,EAEIA,EAFJA,CAEe,OAFfA,CAEuB,CAACb,EAFxBa,KAEgC;;AAChC,MAAA,CAAUpC,CAAV,GAAUuB,EAAV,CAAc,QAAd,KAAU,IAAV,IAAUvB,CAAV,CAAwB,MAAxB,KACQuB,EADR,CACY,QADZ,GACuB4B,CADvB,CACgC5B,EADhC,CACoC,QADpC,EAC8CiB,CAAY,CAD1D,CAAA;AAC0D,KAErD,CAHL,EAKWJ,EALX;AAKWA,GAJX,EAOQiB,CAPR,GAOuCN,YAPvC,CAOuCA,OAPvC,CAOoE,MAAM;AAC1E,IAAA,MAAUO,CAAV,GAAuC,QAAvC,CAAgDxB,EAAhD,EAAoE,EAAE,CAAtE;AAEA,IAAA,OAAWU,CAAX,CAAwB,GAAxB,CAA4B,CAACe,CAA7B,MAAgD;AAAA,MAC1C,GAAGA,CADT;AACSA,MACH,GAFN,EAEW,CAAChC,EAFZ,KAGQA,EAHR,CAGY,IAHZ,CAGiBgC,CAHjB,CAG+B,GAAa,CAH5C,KAIS,KAJT,CAIeD,CAA0B,CAJzC,GAI6C,IAJ7C,GAIoDA,CAJpD;AAIoDA,KAHpD,CAIM,CAJN;AAIM,GADN,EAEK,CAACd,CAAY,CAAC,CAFnB,EAIQJ,EAJR,GAIqBW,YAJrB,CAIqBA,OAJrB,CAIoC,MACzBI,CALX,CAKoBC,CALpB,EAK0BC,CAA4B,CALtD,EAMK,CAACD,CANN,EAMYC,CAA4B,CAAC,CANzC,EAQQ7B,CARR,GAQ4BuB,YAR5B,CAQ4BA,OAR5B;AAQ4BA,IACxB,MAAM,CAACC,CARXC,KASa7D,CATb6D,CASsB,IATtBA,CAS2B,CAACC,CAT5BD,KASwCC,CATxCD,CASgD,KAThDA,KAS0DD,CAAK,CAT/DC;AAS+D,IAE3D,CAAC7D,CAAQ;AAAA,GAFb;AAKA,EAAA,uBAAA,GAAA,CACI0D,IADJ,CACK,OADL,EACK,EAAM,SADX,EACqB,yDADrB,EAEM,QAFN,EAEM;AAAA,oBAFN,GAAA,CAEMzB,GAFN;AAEMA,MAAC,OAAP;AAAO,MAAA;AAAA,QACC,SADR,EACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADnB,CAAA;AACmB,QAQX,QATR,kBAAA,GAAA,CASQA,GATR;AASQA,UAACwB,EART;AAQSA,UAAA;AAAA,YACC,OADV,EACUF,CADV;AACUA,YACA,cAFV,EAE0B,CAF1B,EAE6BC,CAAc,CAF3C,EAAA,CAAA;AAE2C,YACjC,oBAFV,EAEgC,CAFhC,EAEmCF,CAA0B,CAF7D,EAAA,CAAA;AAE6D,YACnD,aAFV,EAEyBD,EAFzB;AAEyBA,YACf,YAFV,EAEUD,CAFV;AAEUA,YACA,eAFV,EAE2B,CAACF,CAF5B,EAEuCD,CAFvC,KAEyD;AAC7CE,cAAZ,CAAA,CAA4B;AAAA,gBACd;AAAA,kBACE,GAFhB,EAEqBD,CAFrB;AAEqBA,kBACL,SAFhB,EAE2BD;AAAAA;AAAA,eAEd,CAFb;AAEa,aAFb;AAEa,YAEH,QAFV,EAEUR;AAAAA;AAAA;AAAA;AAAA,KAAV;AACQ,oBAAR,GAAA,CAAA,GAAA,CAGO,OAHP,EAGO,EAAM,SAHb,EAGuB,iBAHvB,EAIS,QAJT,EAISO,EAJT,CAIoB,GAJpB,CAIwB,CAACb,CAJzB,qBAAA,GAAA,CAKUF,GALV;AAKUA,MAACc,EALX;AAKWA,MAAA;AAAA,QAEC,OAFZ,EAEqBD,CAFrB,EAAA;AAAA,QAGY,GAHZ,EAGYX,CAHZ;AAGYA,QACA,yBAFZ,EAEYU,CAFZ;AAEYA,QACA,UAFZ,EAEwB,CAACD,CAFzB,EAEoCP,EAFpC,KAE+C;;AAC/C,UAAA,MAAoBG,EAApB,GAAgCI,CAAhC,CAA0CP,EAA1C,CAAiD,GAAG,CAApD;AAEA,UAAA,OAAkB,OAAOG,EAAzB,IAAuC,SAAvC,mBAAA,GAAA,CAAA,GAAA,CACwB,MADxB,EAAA,EAC6B,KAD7B,EACoC,EAAE,QADtC,EACsCC,CADtC,EAAA,EACmD,QADnD,EACmDD,EADnD,GAC+D,MAD/D,GACwE,OADxE,EACgF,CADhF,mBAAA,GAAA,CAKgBP,GALhB,CAKiB,MALjB,EAKiB,EAAK,KALtB,EAK6B,EAAE,QAL/B,EAK+BQ,CAL/B,EAAA,EAMmB,QANnB,EAM8CD,EAN9C,IAM4D,IAN5D,GAOsBE,EAPtB,GAQsBC,EARtB,CAQkCH,EARlC,EAQ6C;AAAA;AAAA,YAErB,GAAID,CAV5B,IAU2CF,EAV3C,CAUkD,QAVlD,KAU+D,MAV/D,GAW4B;AAAA,cACE,UAJ9B,EAKgCC,EALhC,CAKsC,WALtC,CAKkDC,CAA6C;AAAA,aAF/F,GAI4B,EAJ5B;AAI4B;AAAA,YAEJ,GAAIH,CAJ5B,CAI8CC,EAJ9C,CAIqD,KAAK,CAJ1D,GAK4B,EAAE,IAL9B,EAAA,CAKoCzB,CALpC,GAKoCwB,CALpC,CAKsDC,EALtD,CAK6D,KAAK,CALlE,KAKoC,IALpC,GAEA,KAFA,CAAA,GAKoCzB,CALpC,CAKqE,IALrE,EAK2E,IAL3E,EAKiF,QALjF,EAAA,GAM4B;AAAA,WACL,CALvB,EAMgB,CANhB;AAMgB;AAAA,OAAhB;AAAgB,MA5BCuB,CA4BjB,CA5BqB;AAAA,KAgCZ,CAFT,EAGM;AAAA,GAjCN,EAkCI,CAlCJ;AAoCA,CAAA,CAAA,CDnJAb,ECmJA,GDnJe,CAAC,EAAE,SCmJlB,EDnJkBM,CCmJlB,EDnJ6B,YCmJ7B,EDnJ6BC,CCmJ7B,EDnJ2C,OCmJ3C,EDnJ2CH,ECmJ3C,EDnJoD,GAAGC,CCmJvD,EAAA,KDnJ0E;AAC1E,EAAA,MAAQG,CAAR,GAAkC,EAAlC;AAEA,EAAA,OAAMF,CAAN,IAAM,IAAN,IAAMA,CAAN,CAAiB,MAAjB,IAA2BD,CAA3B,CAAiC,sBAAjC,GACIC,CADJ,IACI,IADJ,IACIA,CADJ,CACe,OADf,CACuB,CAACjB,EADxB,EACsCL,CADtC,KACgD;AACtCqB,IAAV,CAAA,CAAgB,CAAhB,gBAAA,EAAmCrB,CAAK,CAAxC,CAA0C,CAA1C,IACQwB,CADR,CACgB,IADhB,CACqBH,CADrB,CAC2B,CAD3B,gBAAA,EAC8CrB,CAAK,CADnD,CACqD,CAAC,CADtD;AACsD,GAAtD,CADA,GAKIwB,CALJ,CAKY,IALZ,CAKiBH,CALjB,CAKuB,iBAAiB,CALxC,kBAAA,GAAA,CASIM,GATJ;AASIA,IAACC,EARL;AAQKA,IAAA;AAAA,MACC,KADN,EACaP,CADb,CACmB,KADnB;AACmB,MACb,OAFN,EAEMG,CAFN;AAEMA,MACA,WAFN,EAEmBH,CAFnB,CAEyB,WAFzB;AAEyB,MACnB,SAFN,EAEgB,eAFhB;AAEgB,MAET,QAHP,EAGOG,CAHP,CAGe,KAHf,CAGqB,CAACC,EAHtB,KAGiCA,EAHjC,IAG2C,CAACA,EAH5C,CAGmD,SAHnD,IAGgE,CAACA,EAHjE,CAGwE,KAAK,CAH7E,oBAAA,GAAA,CAIQE,GAJR;AAIQA,QAACD,EAHT;AAGSA,QAAA;AAAA,UACE,GAAGL,CADd;AACcA,UACJ,IAFV,EAEgBG,CAFhB,CAEwB,GAFxB,CAE4B,CAACC,EAF7B,KAEwCA,EAFxC,CAE+C,IAAK,CAFpD;AAEoD,UAC1C,gBAFV,EAE4BF,CAF5B;AAE4BA,UAClB,mCAFV,EAE+CF,CAF/C,CAEqD,mBAFrD;AAEqD,UAC3C,aAFV,EAEyBC,CAFzB,IAEyB,IAFzB,GACA,KADA,CAAA,GAEyBA,CAFzB,CAEoC,MAFpC,CAE2C,CAACb,EAF5C,KAEuDD,CAFvD,CAEmEC,EAAM,CADzE,CADA;AACA,UAEU,gCAFV,EAE4CY,CAF5C,CAEkD,gBAFlD;AAEkD,UACxC,QAFV,EAEoBD,EAFpB;AAEoBA,UACV,QAFV,EAEoBC,CAFpB,CAE0B,QAF1B,GAEqC,CAFrC,EAEwCA,CAFxC,CAE8C,QAAQ,CAFtD,EAAA,CAAA,GAE6D,KAF7D;AAE6D;AAAA;AAAA;AAAA,GAA7D;AAKA,CAAA,CAAA,CD7CaJ,EC6Cb,GD7CoB;AAAA,EAClB,IC4CF,ED5CQ,YC4CR;AD5CQ,EACN,KAFF,EAES,aAFT;AAES,EACP,UAFF,EAEc,CAAC,aAAa,CAF5B;AAE4B,EAC1B,QAFF,EAEY,oBAFZ;AAEY,EACV,MAFF,EAEU;AAAA,IACN;AAAA,MACE,IAFN,EAEY,IAFZ;AAEY,MACN,IAFN,EAEY,SAFZ;AAEY,MACN,KAFN,EAEa,oBAFb;AAEa,MACP,QAFN,EAEgB;AAAA,KADhB;AACgB,IAEZ;AAAA,MACE,IAHN,EAGY,SAHZ;AAGY,MACN,IAFN,EAEY,SAFZ;AAEY,MACN,KAFN,EAEa,SAFb;AAEa,MACP,KAFN,EAEa,IAFb;AAEa,MACP,MAFN,EAEc;AAAA,QACN,OAFR,EAEiB;AAAA,OADjB;AACiB,MAEX,QAFN,EAEgB;AAAA,KAFhB;AAEgB,IAEZ;AAAA,MACE,IAHN,EAGY,WAHZ;AAGY,MACN,IAFN,EAEY,WAFZ;AAEY,MACN,KAFN,EAEa,YAFb;AAEa,MACP,KAFN,EAEa,IAFb;AAEa,MACP,MAFN,EAEc;AAAA,QACN,OAFR,EAEiB,IAFjB;AAEiB,QACT,eAFR,EAEyB;AAAA,OADzB;AACyB,MAEnB,QAFN,EAEgB;AAAA,KAFhB;AAEgB,IAEZ;AAAA,MACE,IAHN,EAGY,cAHZ;AAGY,MACN,IAFN,EAEY,WAFZ;AAEY,MACN,KAFN,EAEa,eAFb;AAEa,MACP,KAFN,EAEa,IAFb;AAEa,MACP,MAFN,EAEc;AAAA,QACN,OAFR,EAEiB,IAFjB;AAEiB,QACT,eAFR,EAEyB;AAAA,OADzB;AACyB,MAEnB,QAFN,EAEgB;AAAA,KAFhB;AAEgB;AAAA,IAGZ;AAAA,MACE,IAJN,EAIY,aAJZ;AAIY,MACN,IAFN,EAEY,aAFZ;AAEY,MACN,KAFN,EAEa,yBAFb;AAEa,MACP,YAFN,EAEoB,MAFpB;AAEoB,MACd,QAFN,EAEgB;AAAA,KADhB;AACgB;AAAA,IAGZ;AAAA,MACE,IAJN,EAIY,OAJZ;AAIY,MACN,IAFN,EAEY,QAFZ;AAEY,MACN,KAFN,EAEa,OAFb;AAEa,MACP,WAFN,EAEmB,yBAFnB;AAEmB,MACb,QAFN,EAEgB;AAAA,KADhB;AACgB,IAEZ;AAAA,MACE,IAHN,EAGY,aAHZ;AAGY,MACN,IAFN,EAEY,QAFZ;AAEY,MACN,KAFN,EAEa,aAFb;AAEa,MACP,WAFN,EAEmB,+BAFnB;AAEmB,MACb,QAFN,EAEgB;AAAA,KADhB;AACgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASZ;AAAA,MACE,IAVN,EAUY,oBAVZ;AAUY,MACN,IAFN,EAEY,QAFZ;AAEY,MACN,KAFN,EAEa,sBAFb;AAEa,MACP,WAFN,EAEmB,4DAFnB;AAEmB,MACb,YAFN,EAEoB,GAFpB;AAEoB,MACd,QAFN,EAEgB;AAAA,KADhB;AACgB,IAEZ;AAAA,MACE,IAHN,EAGY,2BAHZ;AAGY,MACN,IAFN,EAEY,SAFZ;AAEY,MACN,KAFN,EAEa,+BAFb;AAEa,MACP,YAFN,EAEoB,KAFpB;AAEoB,MACd,QAFN,EAEgB;AAAA,KADhB;AACgB,IAEZ;AAAA,MACE,IAHN,EAGY,sBAHZ;AAGY,MACN,IAFN,EAEY,SAFZ;AAEY,MACN,KAFN,EAEa,uBAFb;AAEa,MACP,YAFN,EAEoB,IAFpB;AAEoB,MACd,QAFN,EAEgB;AAAA,KADhB;AACgB,IAEZ;AAAA,MACE,IAHN,EAGY,kBAHZ;AAGY,MACN,IAFN,EAEYC,CAFZ;AAEYA,MACN,YAFNC,EAEoB,EAAE,KAFtBA,EAE6BZ,CAF7BY,CAE2C,SAF3CA,EAAAA;AACA,MAEM,KAFN,EAEa,4BAFb;AAEa,MACP,QAFN,EAEgB;AAAA,KADhB;AACgB,IAEZ;AAAA,MACE,IAHN,EAGY,qBAHZ;AAGY,MACN,IAFN,EAEYD,CAFZ;AAEYA,MACN,YAFNC,EAEoB,EAAE,KAFtBA,EAE6BZ,CAF7BY,CAE2C,SAF3CA,EAAAA;AACA,MAEM,KAFN,EAEa,+BAFb;AAEa,MACP,QAFN,EAEgB;AAAA,KADhB;AACgB;AAAA,IAIZ;AAAA,MACE,IALN,EAKY,gBALZ;AAKY,MACN,IAFN,EAEY,QAFZ;AAEY,MACN,KAFN,EAEa,uCAFb;AAEa,MACP,YAFN,EAEoB,GAFpB;AAEoB,MACd,QAFN,EAEgB;AAAA,KADhB;AACgB,IAEZ;AAAA,MACE,IAHN,EAGY,4BAHZ;AAGY,MACN,IAFN,EAEY,QAFZ;AAEY,MACN,KAFN,EAEa,mCAFb;AAEa,MACP,YAFN,EAEoB,GAFpB;AAEoB,MACd,QAFN,EAEgB;AAAA,KADhB;AACgB,IAEZ;AAAA,MACE,IAHN,EAGY,UAHZ;AAGY,MACN,IAFN,EAEY,QAFZ;AAEY,MACN,KAFN,EAEa,qBAFb;AAEa,MACP,QAFN,EAEgB;AAAA;AAAA;AAGhB,CAAA,CAAA,CAEMjC,EAFN,GAE+B,IAF/B,CAAA,CAIA4B,EAJA,GAIeC,eAJf,CAI+BC,EAJ/B,EAI0CC,EAJ1C,EAIgD;AAAA,EAC9C,KALF,EAKS,CAAC9B,CALV,EAKuC,CAAC0B,CAAK,CAL7C,KAKmD;;AAEnD,IAAA,MAAUrB,GAAV,GAA+B,KAA/B,CAAqC,OAArC,CAA6CL,CAA7C,CAAoD,SAAS,CAA7D,GACQA,CADR,CACe,SADf,GAEQ,CAACA,CAFT,CAEgB,SAAS,CAFzB,EAGUyB,CAHV,GAGkC,KAHlC,CAGwC,OAHxC,CAGgDzB,CAHhD,CAGuD,YAAY,CAHnE,GAIQA,CAJR,CAIe,YAJf,GAKQ,CAACA,CALT,CAKgB,YAAY,CAL5B,EAOUgB,CAPV,GAAA,CAO2BX,GAP3B,IAOiD,EAPjD,EAOqD,MAPrD;AAOqD,MAAO,CAACmB,CAP7D,KAQMH,CARN,CAQkBG,CAAK;AAAA,KADvB,EAGUrB,EAHV,GAAA,CAG8BsB,CAH9B,IAGuD,EAHvD,EAG2D,MAH3D;AAG2D,MAAO,CAACD,CAFnE,KAGMH,CAHN,CAGkBG,CAAK;AAAA,KADvB,EAGUjB,CAHV,GAAA,CAGqBY,CAHrB,GAGqBnB,CAHrB,CAG4B,OAH5B,KAGqB,IAHrB,GACA,KADA,CAAA,GAGqBmB,CAHrB,CAGqC,MAHrC,CAG4C,CAACG,CAH7C,KAGwDC,GAHxD,CAGkED,CAAM,CAFxE,CADA,EAKUb,CALV,GAK+CO,CAL/C,CAK6D,MAL7D;AAK6D,MACvD,CAACN,CALP,KAKqBA,CALrB,IAKkCW,CALlC,CAK8CX,CAAS;AAAA,KADvD,EAIUE,CAJV,GAI4BH,CAJ5B,CAIkD,GAJlD,CAIsD,CAACS,CAJvD,KAIuD;;AAAvD,MAAA,OAAA;AAAA,QACM,QADN,EACgBA,CADhB;AACgBA;AAAAA,QAEV,SAHN,EAAA,CAAA,CAGkBC,EAHlB,GAGkBnB,CAHlB,CAGyB,gBAHzB,KAGkB,IAHlB,GACA,KADA,CAAA,GAGkBmB,EAHlB,CAG2C,KAH3C,MAGqDC,CAHrD,CAGmE,SAHnE,GAIU,KAJV,GAKU;AAAA,OAJV;AAIU,KACJ,CADN,EAIUtB,CAJV,GAKMkB,CALN,IAKM,IALN,IAKMA,CALN,CAKqB,MALrB,IAK+BjB,EAL/B,GAMUiB,CANV,CAMwB,MANxB,CAM+B,CAACD,CANhC,EAM2CL,EAN3C,EAMsDG,CANtD,EAM6DI,CAN7D,KAM4E;AAC5E,MAAA,MAAkBH,CAAlB,GAAsC;AAAA,QACxB,GAAGL,CADjB,CACuC,KADvC,CAC6C,CAD7C,EACgDI,CADhD,GACwD,CAAC,CADzD;AACyD,QAC3C,GAAGV;AAAAA,OADjB;AAIA,MAAA,OAAmB;AAAA,QACL,GAAGY,CADjB;AACiBA,QACH,CAAC,CAFf,gBAAA,EAEkCF,CAAK,CAFvC,CAEyC,GAAGF,CAF5C,CAEqD;AAAA,UACrC,IAFhB,EAEsBX,CAFtB,CAE6B,EAF7B;AAE6B,UACb,MAFhB,EAEwB;AAAA,YACN,GAAGc,CAFrB,CAEuC,MAFvC;AAEuC,cACnB,CAACJ,CAFrB,KAEmCA,CAFnC,CAE6C,UAF7C,KAE4D;AAAA,aAD5D;AAC4D,YAE1C,GAAGI,CAFrB,CAEuC,MAFvC,CAE8C,CAACJ,CAF/C,KAE6DA,CAF7D,CAEuE,UAFvE,KAEsF,MAAM,CAF5F,CAGmB,GAHnB,CAGuB,CAACF,CAHxB,MAG2C;AAAA,cACvB,SAJpB,EAI+BA,CAJ/B,CAI6C,IAJ7C;AAI6C,cACzB,WAFpB,EAEiCR,CAFjC,CAEwC;AAAA,aADxC,CAEoB,CAFpB;AAEoB,YACF,GAAGO;AAAAA,WADrB;AACqB,UAEL,OAFhB,EAEyBK,CAFzB,CAE8B,KAF9B,CAEoC,CAFpC,EAEuCC,CAFvC,GAE+C,CAAC,CAFhD;AAEgD,UAChC,KAHhB,EAGuB;AAAA,SACR;AAAA,OADf;AACe,KAAf,EAEa,EAAE,CAFf,GAGU;AAAA,MACE,iBAJZ,EAI+BF,CAJ/B,CAIwC;AAAA,QAC1B,IAFd,EAEoBX,CAFpB,CAE2B,EAF3B;AAE2B,QACb,MAFd,EAEsB;AAAA,UACN;AAAA,YACE,GAAG,CAAC,GAAIS,CAF1B,IAEmD,EAFnD,EAEwD,GAAGN,EAAgB,CAF3E,CAGmB,MAHnB,CAG0B,CAACO,CAH3B,KAGyCA,CAHzC,CAGmD,UAHnD,KAGkE,MAAM,CAHxE,CAImB,GAJnB,CAIuB,CAACF,CAJxB,MAI2C;AAAA,cACvB,SAJpB,EAI+BA,CAJ/B,CAI6C,IAJ7C;AAI6C,cACzB,WAFpB,EAEiCR,CAFjC,CAEwC;AAAA,aADxC,CAEoB;AAAA,WADpB;AACoB,UAEJ,GAAGO;AAAAA,SAFnB;AAEmB,QAEL,KAFd,EAEqB;AAAA,OACR;AAAA,KADb;AAIA,IAAA,OAAW;AAAA,MACL,GAAGP,CADT;AACSA,MACH,SAFN,EAEiBK,GAFjB;AAEiBA,MACX,YAFNC,EAEoBH,EAFpBG;AAEoBH;AAAAA,MAEd,gBAHN,EAAA,CAGwBC,CAHxB,GAGwBJ,CAHxB,CAG+B,gBAH/B,KAGwB,IAHxB,GACA,KADA,CAAA,GAGwBI,CAHxB,CAGiD,KAHjD;AAGiD;AAAA,MAE3C,mBAJN,EAAA,CAI2BF,GAJ3B,GAI2BF,CAJ3B,CAIkC,mBAJlC,KAI2B,IAJ3B,GAEA,KAFA,CAAA,GAI2BE,GAJ3B,CAIuD,KAJvD;AAIuD;AAAA,MAEjD,0BAJN,EAIkCD,EAJlC,CAI6D,mBAJ7D;AAI6D,MACvD,sBAHN,EAGMF,EAHN;AAGMA,MACA,QAFN,EAEgBC,CAFhB,CAEuB,QAFvB;AAEuB,MACjB,GAAGF;AAAAA,KADT;AACS;AAGT,CAAC;;;;"}