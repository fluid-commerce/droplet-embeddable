{"version":3,"file":"subYears-CyoGbgS0-DIOARaW6-mzW26xd4.js","sources":["../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/subYears.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/subQuarters.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/subMonths.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/subDays.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/addYears.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/addQuarters.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/addMonths.mjs","../../../node_modules/@embeddable.com/vanilla-components/node_modules/date-fns/addDays.mjs"],"sourcesContent":["import { addYears } from \"./addYears.mjs\";\n\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of years to be subtracted.\n *\n * @returns The new date with the years subtracted\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * const result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\nexport function subYears(date, amount) {\n  return addYears(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subYears;\n","import { addQuarters } from \"./addQuarters.mjs\";\n\n/**\n * @name subQuarters\n * @category Quarter Helpers\n * @summary Subtract the specified number of year quarters from the given date.\n *\n * @description\n * Subtract the specified number of year quarters from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of quarters to be subtracted.\n *\n * @returns The new date with the quarters subtracted\n *\n * @example\n * // Subtract 3 quarters from 1 September 2014:\n * const result = subQuarters(new Date(2014, 8, 1), 3)\n * //=> Sun Dec 01 2013 00:00:00\n */\nexport function subQuarters(date, amount) {\n  return addQuarters(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subQuarters;\n","import { addMonths } from \"./addMonths.mjs\";\n\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be subtracted.\n *\n * @returns The new date with the months subtracted\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function subMonths(date, amount) {\n  return addMonths(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subMonths;\n","import { addDays } from \"./addDays.mjs\";\n\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be subtracted.\n *\n * @returns The new date with the days subtracted\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport function subDays(date, amount) {\n  return addDays(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subDays;\n","import { addMonths } from \"./addMonths.mjs\";\n\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of years to be added.\n *\n * @returns The new date with the years added\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\nexport function addYears(date, amount) {\n  return addMonths(date, amount * 12);\n}\n\n// Fallback for modularized imports:\nexport default addYears;\n","import { addMonths } from \"./addMonths.mjs\";\n\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of quarters to be added.\n *\n * @returns The new date with the quarters added\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * const result = addQuarters(new Date(2014, 8, 1), 1)\n * //=> Mon Dec 01 2014 00:00:00\n */\nexport function addQuarters(date, amount) {\n  const months = amount * 3;\n  return addMonths(date, months);\n}\n\n// Fallback for modularized imports:\nexport default addQuarters;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */\nexport function addMonths(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  const dayOfMonth = _date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  const endOfDesiredMonth = constructFrom(date, _date.getTime());\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n  const daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    _date.setFullYear(\n      endOfDesiredMonth.getFullYear(),\n      endOfDesiredMonth.getMonth(),\n      dayOfMonth,\n    );\n    return _date;\n  }\n}\n\n// Fallback for modularized imports:\nexport default addMonths;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n"],"names":["addYears","date","amount","subYears","addQuarters","subQuarters","addMonths","subMonths","addDays","subDays","months","dayOfMonth","_date","endOfDesiredMonth","daysInMonth","constructFrom","toDate"],"mappings":";;AOuBO,SAASQ,CAAhB,CAAwBP,CAAxB,EAA8BC,CAA9B,EAAsC;AACtC,EAAA,MAAQU,CAAR,GAAgBI,CAAhB,CAAuBf,CAAI,CAA3B;AACA,EAAA,OAAM,KAAN,CAAYC,CAAM,CAAlB,GAA4Ba,CAA5B,CAA0Cd,CAA1C,EAAgD,GAAG,CAAnD,IACOC,CADP,IAKEU,CALF,CAKQ,OALR,CAKgBA,CALhB,CAKsB,OALtB,EAAA,GAKkCV,CAAM,CALxC,EAMSU,CANT,CAAA;AAOA;ADLO,SAASN,CAAhB,CAA0BL,CAA1B,EAAgCC,CAAhC,EAAwC;AACxC,EAAA,MAAQU,CAAR,GAAgBI,CAAhB,CAAuBf,CAAI,CAA3B;AACA,EAAA,IAAM,KAAN,CAAYC,CAAM,CAAlB,EAAA,OAA4Ba,CAA5B,CAA0Cd,CAA1C,EAAgD,GAAG,CAAnD;AACA,EAAA,IAAM,CAACC,CAAP;AAEA,IAAA,OAAWU,CAAX;AAEA,EAAA,MAAQD,CAAR,GAAqBC,CAArB,CAA2B,OAA3B,EAAA,EAUQC,CAVR,GAU4BE,CAV5B,CAU0Cd,CAV1C,EAUgDW,CAVhD,CAUsD,OAVtD,EAU+D,CAV/D;AAWEC,EAAF,CAAA,CAAoB,QAApB,CAA6BD,CAA7B,CAAmC,QAAnC,EAAA,GAAgDV,CAAhD,GAAyD,CAAzD,EAA4D,CAAC,CAA7D;AACA,EAAA,MAAQY,CAAR,GAAsBD,CAAtB,CAAwC,OAAxC,EAAA;AACA,EAAA,OAAMF,CAAN,IAAoBG,CAApB,GAGWD,CAHX,IAYID,CAZJ,CAYU,WAZV;AAYU,IACJC,CAbN,CAawB,WAbxB,EAAA;AAYA,IAEMA,CAFN,CAEwB,QAFxB,EAAA;AACA,IAEMF;AAAAA,GADN,EAGWC,CAHX,CAAA;AAKA;AD5CO,SAASR,CAAhB,CAA4BH,CAA5B,EAAkCC,CAAlC,EAA0C;AAC1C,EAAA,MAAQQ,CAAR,GAAiBR,CAAjB,GAA0B,CAA1B;AACA,EAAA,OAASI,CAAT,CAAmBL,CAAnB,EAAyBS,CAAM,CAA/B;AACA;ADHO,SAASV,CAAhB,CAAyBC,CAAzB,EAA+BC,CAA/B,EAAuC;AACvC,EAAA,OAASI,CAAT,CAAmBL,CAAnB,EAAyBC,CAAzB,GAAkC,EAAE,CAApC;AACA;ADFO,SAASO,CAAhB,CAAwBR,CAAxB,EAA8BC,CAA9B,EAAsC;AACtC,EAAA,OAASM,CAAT,CAAiBP,CAAjB,EAAuB,CAACC,CAAM,CAA9B;AACA;ADFO,SAASK,CAAhB,CAA0BN,CAA1B,EAAgCC,CAAhC,EAAwC;AACxC,EAAA,OAASI,CAAT,CAAmBL,CAAnB,EAAyB,CAACC,CAAM,CAAhC;AACA;ADFO,SAASG,CAAhB,CAA4BJ,CAA5B,EAAkCC,CAAlC,EAA0C;AAC1C,EAAA,OAASE,CAAT,CAAqBH,CAArB,EAA2B,CAACC,CAAM,CAAlC;AACA;ADFO,SAASC,CAAhB,CAAyBF,CAAzB,EAA+BC,CAA/B,EAAuC;AACvC,EAAA,OAASF,CAAT,CAAkBC,CAAlB,EAAwB,CAACC,CAAM,CAA/B;AACA;;;;"}