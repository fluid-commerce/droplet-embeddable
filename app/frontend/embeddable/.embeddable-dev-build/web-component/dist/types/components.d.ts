/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface EmbeddableComponent {
        /**
          * @default '{}'
         */
        "clientContext": string;
        "componentName": string;
        /**
          * @default '{}'
         */
        "props": string;
        /**
          * @default {}
         */
        "theme": any;
    }
}
export interface EmbeddableComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEmbeddableComponentElement;
}
declare global {
    interface HTMLEmbeddableComponentElementEventMap {
        "componentLoaded": any;
    }
    interface HTMLEmbeddableComponentElement extends Components.EmbeddableComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEmbeddableComponentElementEventMap>(type: K, listener: (this: HTMLEmbeddableComponentElement, ev: EmbeddableComponentCustomEvent<HTMLEmbeddableComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEmbeddableComponentElementEventMap>(type: K, listener: (this: HTMLEmbeddableComponentElement, ev: EmbeddableComponentCustomEvent<HTMLEmbeddableComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEmbeddableComponentElement: {
        prototype: HTMLEmbeddableComponentElement;
        new (): HTMLEmbeddableComponentElement;
    };
    interface HTMLElementTagNameMap {
        "embeddable-component": HTMLEmbeddableComponentElement;
    }
}
declare namespace LocalJSX {
    interface EmbeddableComponent {
        /**
          * @default '{}'
         */
        "clientContext"?: string;
        "componentName"?: string;
        "onComponentLoaded"?: (event: EmbeddableComponentCustomEvent<any>) => void;
        /**
          * @default '{}'
         */
        "props"?: string;
        /**
          * @default {}
         */
        "theme"?: any;
    }
    interface IntrinsicElements {
        "embeddable-component": EmbeddableComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "embeddable-component": LocalJSX.EmbeddableComponent & JSXBase.HTMLAttributes<HTMLEmbeddableComponentElement>;
        }
    }
}
